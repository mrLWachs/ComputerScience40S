Mr. Wachs Computer Science testing started......................................................
Computer Science 42SAP starting......................................................
Computer Science 42SAP curriculum content starting......................................................
AP curriculum - Part 1 Test started......................................................
AP: Unit 1 (Primitive Types) started......................................................
// 1.1 Why Programming? Why Java?
...
System.out.print outputs text to the screen and System.out.println outputs with a line break
...
More specifically, the code word "System" refers to the "computer system" and the 
word "out" refers to outputting, and finally the word "print" or "println" are calls to 
methods (or "actions") that take the string literal (which is the word or words in between 
the quotation marks) and outputs it. So the command "System.out.println("literal");" 
will take the string literal and output it to the default output device - that being the 
computer screen.
...
// 1.2 Variables and Data Types
...
Data/information refers to the "kind" of data being stored (or "remembered") by the program 
in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
specified at the time you write a line of code to "create" (or "declare") the variable. A 
variable can only be one type and only store that specified type of data. However, the data 
itself can change (or "vary") after the initial declaration. Examples of this are below...
...
// Variables declared and assigned initial ("starting") values:
boolean a = true;
int     b = 0;
double  c = 1.0;
char    d = 'A';
// Variables content changes ("reassigned"):
a = false;
b = 1;
c = 1.1;
d = 'B';
...
A "final" (or a "constant") is a variable in which the stored value does NOT change 
(it stays "constant") and it locked at that value. Final (or constant) variables are 
given the initial value when declared (or initialized) and that value stays locked. These 
types of values are written in ALL_CAPS with the underscore value used to seperate words in 
the name. Final variables are more efficient for a number of reasons including ease of code 
understanding, speed (faster code), easier to update code, and others. Examples of finals 
are below...
// Constants (finals) declared (initialized)
final boolean FOUND  = true;
final int     VALUE  = 1;
final double  AMOUNT = 2.5;
final char    CODE   = 'X';
...
// 1.3 Expressions and Assignment Statements
...
Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
context, the word "literal" can also mean a number (like "5"). This usually involves 
variable types int and double (the number types) used in a math expression or equation. This 
can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
evaluated in a formula, they always evaluate to an int answer (solution) and double values 
will evaluate to a double. Complex (or "compound" expressions can be formed in which 
the order of operations (or precedence order). This means multiplication and division are 
evaluated before addition and subtraction. If operations are at the same precedence level, 
then they are evaluated from left to right.When you try and divide by zero, an error 
(the "ArithmeticException" error) will occur and the program will stop running. Examples:
...
// Arithmetic evaluations using variables
int    v1 = 5;
int    v2 = 3;
int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
double v4 = 5.2;
double v5 = 3.3;
double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
...
// 1.4 Compound Assignment Operators
...
Compound statements in this context refers to using shortcuts to quickly add or subtract one 
(increment or decrement) to a variable. You can also use more complex shorthand compound 
statements to quickly multiply, divide, even modulus a varaible with itself or other 
variables. For example:
...
// Shorthand Compound Arithmetic expressions
int value = 5;
value++;    // is the same as "value = value + 1;"
value--;    // is the same as "value = value + 1;"
value += 5; // is the same as "value = value + 5;"
value -= 5; // is the same as "value = value - 5;"
value *= 5; // is the same as "value = value * 5;"
value /= 5; // is the same as "value = value / 5;"
value %= 5; // is the same as "value = value % 5;"
...
// 1.5 Casting and Ranges of Variables
...
Casting is the process of "converting" one data type into another data type. When casting 
an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
A char when cast will turn into it's ASCII value. The process of casting involves putting 
variable to be cast with the type being cast into in round brackets to the left of that 
variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
evaluates ab int outside that range, an error will occur (overflow error). For example:
...
// Casting data types
int integer = Integer.MAX_VALUE;
double doub = Double.MIN_VALUE;
doub        = (int)integer;
integer     = (int)doub;
char letter = 'A';
integer     = (int)letter;
...
AP: Unit 1 (Primitive Types) completed!...................................................
AP: Unit 3 (Boolean Expressions And If Statements) started......................................................
// 3.1 Boolean Expressions
// 3.2 if Statements and Control Flow
// 3.3 if-else Statements
// 3.4 else if Statements
// 3.5 Compound Boolean Expressions
// 3.6 Equivalent Boolean Expressions
// 3.7 Comparing Objects
AP: Unit 3 (Boolean Expressions And If Statements) completed!...................................................
AP: Unit 4 (Iteration) started......................................................
// 4.1 while Loops
// 4.2 for Loops
// 4.3 Developing Algorithms Using Strings
// 4.4 Nested Iteration
// 4.5 Informal Code Analysis
AP: Unit 4 (Iteration) completed!...................................................
AP curriculum - Part 1 Test completed!...................................................
AP curriculum - Part 2 Test started......................................................
AP: Unit 2 (Using Objects) started......................................................
// 2.1 Objects: Instances of Classes
// 2.2 Creating and Storing Objects (Instantiation)
// 2.3 Calling a Void Method
// 2.4 Calling a Void Method with Parameters
// 2.5 Calling a Non-void Method
// 2.6 String Objects: Concatenation, Literals, and More
// 2.7 String Methods
// 2.8 Wrapper Classes: Integer and Double
// 2.9 Using the Math Class
AP: Unit 2 (Using Objects) completed!...................................................
AP: Unit 5 (Writing Classes) started......................................................
// 5.1 Anatomy of a Class
// 5.2 Constructors
// 5.2 Documentation with Comments
// 5.4 Accessor Methods
// 5.5 Mutator Methods
// 5.6 Writing Methods
// 5.7 Static Variables and Methods
// 5.8 Scope and Access
// 5.9 this Keyword
// 5.10 Ethical and Social Implications of Computing Systems
AP: Unit 5 (Writing Classes) completed!...................................................
AP: Unit 9 (Inheritance) started......................................................
// 9.1 Creating Superclasses and Subclasses
// 9.2 Writing Constructors for Subclasses
// 9.3 Overriding Methods
// 9.4 super Keyword
// 9.5 Creating References Using Inheritance Hierarchies
// 9.6 Polymorphism
// 9.7 Object Superclass
AP: Unit 9 (Inheritance) completed!...................................................
AP curriculum - Part 2 Test completed!...................................................
AP curriculum - Part 3 Test started......................................................
AP: Unit 6 (Arrays) started......................................................
// 6.1 Array Creation and Access
// 6.2 Traversing Arrays
// 6.3 Enhanced for Loop for Arrays
// 6.4 Developing Algorithms Using Arrays
AP: Unit 6 (Arrays) completed!...................................................
AP: Unit 8 (2D Arrays) started......................................................
// 8.1 2D Arrays
// 8.2 Traversing 2D Arrays
AP: Unit 8 (2D Arrays) completed!...................................................
AP curriculum - Part 3 Test completed!...................................................
AP curriculum - Part 4 Test started......................................................
AP: Unit 7 (Array List) started......................................................
// 7.1 Introduction to ArrayList
// 7.2 ArrayList Methods
// 7.3 Traversing ArrayLists
// 7.4 Developing Algorithms Using ArrayLists
// 7.5 Searching
// 7.6 Sorting
// 7.7 Ethical Issues Around Data Collection
AP: Unit 7 (Array List) completed!...................................................
AP: Unit 10 (Recursion ) started......................................................
// 10.1 Recursion
// 10.2 Recursive Searching and Sorting
AP: Unit 10 (Recursion ) completed!...................................................
AP curriculum - Part 4 Test completed!...................................................
Computer Science 42SAP curriculum content complete!...................................................
Computer Science 42SAP complete!...................................................
