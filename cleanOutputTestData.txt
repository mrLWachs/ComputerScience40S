Mr. Wachs Computer Science testing started.................................................
Computer Science 42SAP starting............................................................
Computer Science 42SAP curriculum content starting.........................................
AP curriculum - Part 1 Test started........................................................
AP: Unit 1 (Primitive Types) started.......................................................
1.1 Why Programming? Why Java?
System.out.print outputs text to the screen and System.out.println outputs with a line break
More specifically, the code word "System" refers to the "computer system" and the 
word "out" refers to outputting, and finally the word "print" or "println" are calls to 
methods (or "actions") that take the string literal (which is the word or words in between 
the quotation marks) and outputs it. So the command "System.out.println("literal");" 
will take the string literal and output it to the default output device - that being the 
computer screen.
1.2 Variables and Data Types
Data/information refers to the "kind" of data being stored (or "remembered") by the program 
in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
specified at the time you write a line of code to "create" (or "declare") the variable. A 
variable can only be one type and only store that specified type of data. However, the data 
itself can change (or "vary") after the initial declaration. Examples of this are below...
Variables declared and assigned initial ("starting") values:
boolean a = true;
int     b = 0;
double  c = 1.0;
char    d = 'A';
Variables content changes ("reassigned"):
a = false;
b = 1;
c = 1.1;
d = 'B';
A "final" (or a "constant") is a variable in which the stored value does NOT change 
(it stays "constant") and it locked at that value. Final (or constant) variables are 
given the initial value when declared (or initialized) and that value stays locked. These 
types of values are written in ALL_CAPS with the underscore value used to seperate words in 
the name. Final variables are more efficient for a number of reasons including ease of code 
understanding, speed (faster code), easier to update code, and others. Examples of finals 
are below
Constants (finals) declared (initialized)
final boolean FOUND  = true;
final int     VALUE  = 1;
final double  AMOUNT = 2.5;
final char    CODE   = 'X';
1.3 Expressions and Assignment Statements
Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
context, the word "literal" can also mean a number (like "5"). This usually involves 
variable types int and double (the number types) used in a math expression or equation. This 
can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
evaluated in a formula, they always evaluate to an int answer (solution) and double values 
will evaluate to a double. Complex (or "compound" expressions can be formed in which 
the order of operations (or precedence order). This means multiplication and division are 
evaluated before addition and subtraction. If operations are at the same precedence level, 
then they are evaluated from left to right.When you try and divide by zero, an error 
(the "ArithmeticException" error) will occur and the program will stop running. Examples:
Arithmetic evaluations using variables
int    v1 = 5;
int    v2 = 3;
int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
double v4 = 5.2;
double v5 = 3.3;
double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
1.4 Compound Assignment Operators
Compound statements in this context refers to using shortcuts to quickly add or subtract one 
(increment or decrement) to a variable. You can also use more complex shorthand compound 
statements to quickly multiply, divide, even modulus a variable with itself or other 
variables. For example:
Shorthand Compound Arithmetic expressions
int value = 5;
value++;    // is the same as "value = value + 1;"
value--;    // is the same as "value = value + 1;"
value += 5; // is the same as "value = value + 5;"
value -= 5; // is the same as "value = value - 5;"
value *= 5; // is the same as "value = value * 5;"
value /= 5; // is the same as "value = value / 5;"
value %= 5; // is the same as "value = value % 5;"
1.5 Casting and Ranges of Variables
Casting is the process of "converting" one data type into another data type. When casting 
an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
A char when cast will turn into it's ASCII value. The process of casting involves putting 
variable to be cast with the type being cast into in round brackets to the left of that 
variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
evaluates an int outside that range, an error will occur (overflow error). For example:
Casting data types
int integer = Integer.MAX_VALUE;
double doub = Double.MIN_VALUE;
doub        = (int)integer;
integer     = (int)doub;
char letter = 'A';
integer     = (int)letter;
AP: Unit 1 (Primitive Types) completed!....................................................
AP: Unit 3 (Boolean Expressions And If Statements) started.................................
3.1 Boolean Expressions
A Boolean (true/false) expression is a code statement most likely in a control structure 
like a conditional statement or loop control structure that evaluates to true or false to 
make decisions and control the flow of the program. The Boolean expression will require 
the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
than", "greater than", "less than or equal to", "greater than or equal to", "equal 
to", and "not equal to".
3.2 if Statements and Control Flow
A "Conditional Statement" is also known under other names like "branching statement", "if 
statement", "one-way selection statement", and "control structure". It uses the reserved 
keyword "if" along with round brackets which contain the Boolean expression, and curly 
brackets to contain the control block of all code you wish to be controlled by the 
conditional statement. Brackets are optional if the block is only one line, and you may also 
move thos lines up to the same line as the conditional statement. For example:
Example of if statements
int a = 10;
int b = 10;
if (a == a) {
    // "equal"
}
3.3 if-else Statements
The "else" statement is paired with an "if" statement to control the flow of the logic so 
that the conditional now evaluates to both true and false. This can be called a "two 
way selection" (for true/false). An "else" must always follow an "if" statement first. 
For example:
if with "else" 
double c = 1.45, d = 1.5; 
if (c < d) {
    // "Less than"
}
else {
    // "Greater than"
}
Shortened lines version
char e = 'A';
char f = 'a';
if (e != f) e = '!';
else        e = '=';
3.4 else if Statements
When making multiple decisions (more than 2), the "else if" statement is added to an 
existing "if" statement to have multiple branches of logic for the code to follow. This 
is much more efficient than seperate "if" statements. This can also be called "multi-way 
selection" (or "if-else-if"). An "else" statement is also still the final option (but 
this is not required). For example:
Showing a "chain" of else if statements
int g = 0;
if (g == 1) {
    // The first if is true
}
else if (g == 2) {
    // The next if is true
}
else if (g == 3) {
    // The next if (in the "chain" of ifs) is true
}
else {
    // Nothing above is true, so go to this else
}
3.5 Compound Boolean Expressions
The process of "nesting" means to place one conditional statement inside the "block" of 
another conditional statement. The logical operators: "and", "or", and "not" are 
represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
is used to combine logical boolean expressions such that ALL expressions need to be true for 
the entire statement to be true. The operator OR is used to combine logical boolean 
expressions such that ANY expression can be true for the entire statement to be true. The 
operator NOT reverses the logic so that true statements are evaluated as false (and visa 
versa). If the statement contains multiple Boolean expressions and the result of the 
evaluation of one expression has already determined the expressions result, then the 
rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
evaluation". For example:
Logical operators and "nesting"
int    age = 17;
double iq  = 1.0;
if (age >= 18 && iq > 90) {
    // with "and" ("&&") BOTH have to be true
}
else if (age >= 18 || iq > 0) {
    // with "or" ("||") EITHER can be true
}
else {
    // Case if neither evaluates
    if (age > 0) {
        // A "nested if statement"
    }
}
3.6 Equivalent Boolean Expressions
Boolean (true/false) expressions turned into logical statements used by control structures 
like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
not necessarily applicable to this exam). This just means that complex statements need to be 
evaluated by using mathematical rules (like "order of operations") and logical operators 
(like "and, or, not") to determine the final Boolean result. This could determine if a 
control structure (like an "if" statement) runs a block of code or not.
3.7 Comparing Objects
The use of an advanced data type like an "Object" in code means that comparison 
operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
determine the equality of two objects. For example:
Use of the built-in equals method with Objects
String word1 = "edgy";
String word2 = "edGy";
if (word1.equals(word2)) {
    // "W1=W2"
}
else if (word1.equalsIgnoreCase(word2)) {
    // "W1 kind of == W2"
}
AP: Unit 3 (Boolean Expressions And If Statements) completed!..............................
AP: Unit 4 (Iteration) started.............................................................
4.1 while Loops
The word "Iteration" is another word for "Loop" or "Looping" which is a control 
struture to have code statements "repeat". Like conditional ("if") statements, iteration 
statements control the flow of a program's logic. Also like if statements, iteration 
statements are controlled by a Boolean expression (true or false). The result of the Boolean 
expression will result in the code executing zero or mulitple times (until the expression 
evaluates to false). The expression is evaluated each time through an iteration of the loop. 
A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
(thus the loop never stops looping - or never stops running). It is possible a loop will 
never run if it evaluates to false before the body (block) of the loop. If you use the 
keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
potentially exit any method the loop is written inside. The "while" loop is a event loop or 
non-deterministic loop, which means it is not usually used for counting but when you do 
not know how many times the loop needs to run (a certain event can cause the loop to 
end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
(traversing) arrays and lists, and searching and sorting values. For example:
Example of a simple while loop
int counter = 0;
while (counter < 10) {
    counter++;
}
4.2 for Loops
The "for" loop is another looping form. The for loop is a count controlled loop that 
generally is used when a loop needs to run a specific number of times. There are three 
parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
the starting, ending, and change of the loop. In a for loop a counting variable is 
generally declared right inside the loop to a starting value, then the Boolean condition 
to end the loop, then the change value increasing (increment) or decreasing (decrement) 
that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
by one" error occurs when a loop runs one too many or one too few times. For Example:
Example of a for loop
for (int i = 0; i < 10; i++) {
    // potential code body...
}
4.3 Developing Algorithms Using Strings
...
The String class allows for several "built-in" methods of the String class to manipulate 
the string and the value it stores. Several of these methods could apply to the A.P. exam 
including travelling (traversing) string characters, pulling out substrings (parts 
of the string), reversing a string, etc. For example:
Example of string methods with a loop
String word   = "completion";
String parts1 = word.substring(3);
String parts2 = word.substring(1,7);
for (int i = 0; i < word.length(); i++) {
    char character = word.charAt(i);
}
4.4 Nested Iteration
Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
This means you can place a iteration statement inside the block of another iteration 
statement. The inner loop must complete all of its iterations before the outer loop 
can continue. For example:
Example of nested loops
for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 10; j++) {
        int k = 10;
        while (k < 10) {
            // potential code body...
        }
    }
}
4.5 Informal Code Analysis
Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
loops are typical A.P. exam questions. You should practice these types of questions.
AP: Unit 4 (Iteration) completed!..........................................................
AP curriculum - Part 1 Test completed!.....................................................
AP curriculum - Part 2 Test started........................................................
AP: Unit 2 (Using Objects) started.........................................................
2.1 Objects: Instances of Classes
2.2 Creating and Storing Objects (Instantiation)
2.3 Calling a Void Method
2.4 Calling a Void Method with Parameters
2.5 Calling a Non-void Method
2.6 String Objects: Concatenation, Literals, and More
2.7 String Methods
2.8 Wrapper Classes: Integer and Double
2.9 Using the Math Class
AP: Unit 2 (Using Objects) completed!......................................................
AP: Unit 5 (Writing Classes) started.......................................................
5.1 Anatomy of a Class
5.2 Constructors
5.2 Documentation with Comments
5.4 Accessor Methods
5.5 Mutator Methods
5.6 Writing Methods
5.7 Static Variables and Methods
5.8 Scope and Access
5.9 this Keyword
5.10 Ethical and Social Implications of Computing Systems
AP: Unit 5 (Writing Classes) completed!....................................................
AP: Unit 9 (Inheritance) started...........................................................
9.1 Creating Superclasses and Subclasses
9.2 Writing Constructors for Subclasses
9.3 Overriding Methods
9.4 super Keyword
9.5 Creating References Using Inheritance Hierarchies
9.6 Polymorphism
9.7 Object Superclass
AP: Unit 9 (Inheritance) completed!........................................................
AP curriculum - Part 2 Test completed!.....................................................
AP curriculum - Part 3 Test started........................................................
AP: Unit 6 (Arrays) started................................................................
6.1 Array Creation and Access
6.2 Traversing Arrays
6.3 Enhanced for Loop for Arrays
6.4 Developing Algorithms Using Arrays
AP: Unit 6 (Arrays) completed!.............................................................
AP: Unit 8 (2D Arrays) started.............................................................
8.1 2D Arrays
8.2 Traversing 2D Arrays
AP: Unit 8 (2D Arrays) completed!..........................................................
AP curriculum - Part 3 Test completed!.....................................................
AP curriculum - Part 4 Test started........................................................
AP: Unit 7 (Array List) started............................................................
7.1 Introduction to ArrayList
7.2 ArrayList Methods
7.3 Traversing ArrayLists
7.4 Developing Algorithms Using ArrayLists
7.5 Searching
7.6 Sorting
7.7 Ethical Issues Around Data Collection
AP: Unit 7 (Array List) completed!.........................................................
AP: Unit 10 (Recursion ) started...........................................................
10.1 Recursion
10.2 Recursive Searching and Sorting
AP: Unit 10 (Recursion ) completed!........................................................
AP curriculum - Part 4 Test completed!.....................................................
Computer Science 42SAP curriculum content complete!........................................
Computer Science 42SAP complete!...........................................................
