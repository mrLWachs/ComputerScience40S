/** Required package class namespace */
package computerscience30s;

/** Required imports */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import javax.swing.JColorChooser;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.Timer;

/**
 * Graphics3.java - using the NetBeans visual designer in combination
 * with our custom code (a 'hybrid' approach) to make a "mini final project" 
 * type of application (a mini 'PhotoShop')
 *
 * @author Mr. Wachs
 * @since 10-Jan-2022, 11:40:10 AM
 */
public class Graphics3 extends javax.swing.JFrame {

    /**
     * Creates new form Graphics3
     */
    public Graphics3() {
        initComponents();
        // The "hybrid" approach means is you use the designer combined
        // with your own code to make the user interface what you want
        // So we call our own custom method that we place at the bottom of 
        // the code
        initializeContainer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jPanel1MouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 826, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(210, 30, 830, 410);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Drawing Tool Size:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 250, 120, 20);

        jRadioButton1.setText("Open Oval");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(20, 90, 170, 23);

        jRadioButton2.setText("Filled Oval");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton2);
        jRadioButton2.setBounds(20, 60, 170, 23);

        jRadioButton3.setText("Arc");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton3);
        jRadioButton3.setBounds(20, 210, 170, 23);

        jRadioButton4.setText("Filled Rectangle");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton4);
        jRadioButton4.setBounds(20, 120, 170, 23);

        jRadioButton5.setText("Open Rectangle");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton5);
        jRadioButton5.setBounds(20, 150, 170, 23);

        jRadioButton6.setText("3D Rectangle");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton6);
        jRadioButton6.setBounds(20, 180, 170, 23);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Drawing Tool Type:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 30, 190, 20);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        getContentPane().add(jSpinner1);
        jSpinner1.setBounds(140, 250, 50, 20);

        jButton1.setText("Background Color");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(20, 330, 180, 30);

        jButton2.setText("Foreground Color");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(20, 290, 180, 30);

        jButton3.setText("Star Burst");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(20, 410, 180, 30);

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(20, 370, 180, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setForeground();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setBackground();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setClear();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setStarBurst();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        setDrag(evt);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jPanel1MouseWheelMoved
        setWheel(evt);
    }//GEN-LAST:event_jPanel1MouseWheelMoved

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        setSpinner();
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        setRadio(jRadioButton2,BRUSHES[0]);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        setRadio(jRadioButton1,BRUSHES[1]);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        setRadio(jRadioButton4,BRUSHES[2]);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        setRadio(jRadioButton5,BRUSHES[3]);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        setRadio(jRadioButton6,BRUSHES[4]);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        setRadio(jRadioButton3,BRUSHES[5]);
    }//GEN-LAST:event_jRadioButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

    // Global variables (properties of the class) below........................
    
    // Constants:
    private final int MIN    = 2;           // for the brushes
    private final int MAX    = 200;         
    private final int CHANGE = 5;           
    private final String[] BRUSHES = {
        "Filled oval",
        "Open oval",
        "Filled rectangle",
        "Open rectangle",
        "3D rectangle",
        "Arc"
    };
    
    // Variables (primitive)
    private String brush;
    private int    size;
    private int    currentX;
    private int    currentY;
    
    // Class object variables (non-primitive)
    private Color              foreground;
    private Color              background;
    private Graphics           graphics;
    private SpinnerNumberModel model;
    private Timer              timer;
    
    // Custom Methods (that I wrote) below.....................................
    
    /**
     * Sets the properties of this form
     */
    private void initializeContainer() {
        // Setup the frame properties
        this.setSize(1080,500);
        this.setTitle("Graphics 3");    // Sets the title at top of form (frame)
        this.setResizable(false);       // Makes it so the user cannot resize
        this.setLocationRelativeTo(null);   // Centers the form on screen
        
        // Code to initialize the other code variables....
        
        // Setup the primitives to default values
        size     = MIN;
        brush    = BRUSHES[0];
        currentX = 0;
        currentY = 0;
        
        // Setup the advanced data types to default values
        background = Color.white;
        foreground = Color.black;
        graphics   = jPanel1.getGraphics();
        model      = (SpinnerNumberModel)jSpinner1.getModel(); 
        
        // Assign the variables and defaults to the controls
        model.setValue(size);
        model.setStepSize(CHANGE);
        model.setMaximum(MAX);
        model.setMinimum(MIN);        
        jRadioButton2.setSelected(true);        
        graphics.setColor(foreground);
        jPanel1.setBackground(background);
        
        // Setup the timer (use autocomplete to help write this code)
        timer = new Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tick();                                 // Call custom method
            }
        });
        
        this.setVisible(true);                          // Make form appear
    }
    
    /**
     * User selected a brush radio button
     * 
     * @param button the specific radio button selected
     * @param brush the specific brush selected 
     */
    private void setRadio(JRadioButton button, String brush) {
        timer.stop();                       // Timer should be off
        JRadioButton[] buttons = {
            jRadioButton2,
            jRadioButton1,
            jRadioButton4,
            jRadioButton5,
            jRadioButton6,
            jRadioButton3
        };                                          // Put buttons in an array
        for (int i = 0; i < buttons.length; i++) {  // Traverse array
            buttons[i].setSelected(false);          // set button to false
        }
        button.setSelected(true);                   // Select the one button
        this.brush = brush;                         // Select this brush
    }
    
    /**
     * The event for the brush size spinner
     */
    private void setSpinner() {
        if (timer != null) timer.stop();        // Timer should be off
        size = (Integer)model.getNumber();      // Set size from spinner
    }
    
    /**
     * Sets the foreground color for the brushes
     */
    private void setForeground() {
        timer.stop();                               // Stop timer (if running)
        foreground = JColorChooser.showDialog(this, 
                "Choose a foreground color", foreground);   // Dialog selection
        if (foreground == null) {                           // Nothing chosen
            foreground = Color.black;                       // Default color
        }
        graphics.setColor(foreground);                      // Set chosen colo
    }

    /**
     * Set the background color of the drawing surface
     */
    private void setBackground() {
        timer.stop();                               // Stop timer (if running)
        background = JColorChooser.showDialog(this, 
                "Choose a background color", background);   // Dialog selection
        if (background == null) {                           // Nothing chosen
            background = Color.white;                       // Default color
        }
        jPanel1.setBackground(background);                 // Set chosen color
    }

    /**
     * Starts a timer drawing random stars on the drawing surface
     */
    private void setClear() {
        timer.stop();                   // Timer should be off
        jPanel1.repaint();              // Have the surface clear of all marks
    }

    /**
     * Starts a timer drawing random stars on the drawing surface
     */
    private void setStarBurst() {
        jPanel1.repaint();              // Have the surface clear of all marks
        timer.start();                  // Start timer code to make stars
    }

    /**
     * The event of dragging a mouse over the panel drawing area
     * 
     * @param event the mouse event 
     */
    private void setDrag(MouseEvent event) {
        timer.stop();                           // Timer should be off
        int x = event.getX()-(size/2);          // Get mouse x coordinate
        int y = event.getY()-(size/2);          // and y coordinate
        if (brush.equals(BRUSHES[0])) {
            graphics.fillOval(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[1])) {
            graphics.drawOval(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[2])) {
            graphics.fillRect(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[3])) {
            graphics.drawRect(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[4])) {
            graphics.fill3DRect(x, y, size, size,true);
        }
        else if (brush.equals(BRUSHES[5])) {
            graphics.drawArc(x, y, size, size,45,120);
        } 
    }

    /**
     * The event of the mouse wheel spinning over the panel drawing area
     * 
     * @param event the mouse wheel event 
     */
    private void setWheel(MouseWheelEvent event) {
        timer.stop();                                       // Timer off
        if (event.getWheelRotation() < 0) size += CHANGE;   // Increase size
        else                              size -= CHANGE;   // Decrease size
        if (size < MIN) size = MIN;                         // Check for edge
        if (size > MAX) size = MAX; 
        model.setValue(size);                               // Set spinner
    }

    /**
     * The event the timer runs on it's interval
     */
    private void tick() {
        final int SPACE = 8;            // Spacing between points
        final int POINTS = 10;          // Total number of vertices
        int w = jPanel1.getWidth() - (SPACE * 5);  // Width of drawing area
        int h = jPanel1.getHeight() - (SPACE * 5); // Height of drawing area
        currentX = (int)((w-SPACE+1d)*Math.random()+SPACE); // Random x
        currentY = (int)((h-SPACE+1d)*Math.random()+SPACE); // Random y
        // Set all the x coordinate points
        int x1  = currentX;
        int x2  = x1 + SPACE;
        int x3  = x2 + SPACE;
        int x4  = x3 + SPACE;
        int x5  = x4 + SPACE;
        int x6  = x5 - SPACE;
        int x7  = x6 + SPACE;
        int x8  = x7 - (SPACE * 2);
        int x9  = x8 - (SPACE * 2);
        int x10 = x9 + SPACE;
        // Set all the y coordinate points
        int y1  = currentY;
        int y2  = y1;
        int y3  = y2 - SPACE;
        int y4  = y3 + SPACE;
        int y5  = y4;
        int y6  = y5 + SPACE;
        int y7  = y6 + (SPACE * 2);
        int y8  = y7 - SPACE;
        int y9  = y8 + SPACE;
        int y10 = y9 - (SPACE * 2);
        // Put all the x and y points into two arrays
        int xPoints[] = {x1,x2,x3,x4,x5,x6,x7,x8,x9,x10};
        int yPoints[] = {y1,y2,y3,y4,y5,y6,y7,y8,y9,y10};
        // Generate random color values
        int r = (int)((255d-0d+1d)*Math.random()+0d);
        int g = (int)((255d-0d+1d)*Math.random()+0d);
        int b = (int)((255d-0d+1d)*Math.random()+0d);
        Color color = new Color(r, g, b);                   // Random color
        Polygon polygon = new Polygon(xPoints, yPoints, POINTS);    
        graphics.setColor(color);                           // Set color
        graphics.fillPolygon(polygon);                      // Draw star
    }
    
}
