
/** Required package class namespace */
package testing.prerequisite.cs20s;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import javax.swing.JColorChooser;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;


/**
 * Unit5Looping2.java - this is a Visual Studio (C#) Windows Form
 * adaptation into NetBeans (Java) JFrame (some code may not translate)
 *
 * @author Mr. Wachs
 * @since Feb 22, 2024, 3:16:37â€¯p.m.
 */
public class Unit5Looping2 extends javax.swing.JFrame 
{

    // Global variables and constants...

    int width = 0;
    int height = 0;

    // This constant will act as a 'gap' between what we will be 
    // using this program to do: drawing circles on the screen
    // (and anything else drawn/moving on the screen) to fill up   
    // the screen. This is measured in "pixels"

    final int SPACER = 5;
    Color color;
    boolean shouldRun = false;
    
    /** 
     * Default constructor, creates new form Unit5Looping2 
     */
    public Unit5Looping2() {
        initComponents();        
        this.getContentPane().setLayout(null);        
        this.setTitle("Unit 5 Looping 2");
        
        // When the form first loads up.... We can add code
        // here to change the some of the same properties as 
        // we do using the designer

        // REMINDER: to bring up autocomplete (any time)
        // press "CTRL + SPACE" if you are having trouble  
        // with some of the specifics of the coding

        // Set the form's background color to black
        this.setBackground(Color.black);
        this.getContentPane().setBackground(Color.black);

        // Set the form to have no border
        //this.FormBorderStyle = FormBorderStyle.None;
        //this.setUndecorated(true);

        // Set the form to be maximized (full screen)
        //this.WindowState = FormWindowState.Maximized;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize.width, screenSize.height);
        
        // Get ("retrieve") and remember (in our global variables)
        // the width and height of "this" form (as now the form has 
        // changed size to fill the screen). The keyword "this"
        // refers to "this form"

        width = screenSize.width;
        height = screenSize.height;

        // To move (position) objects (like a button, etc.)
        // you can use the (x, y) coordinate system like in math
        // (geometry) - another way in C# is like this...

        // Set the exit button over to the right of the screen
        // (based on the global variable values)
        int w1 = btnExit.getWidth();
        int h1 = btnExit.getHeight();        
        int x1 = width - btnExit.getWidth() - SPACER;
        int y1 = 0 + SPACER;        
        btnExit.setBounds(x1, y1, w1, h1);         

        // "Left" is the same as "X" coordinate
        // "Top" is the same as "Y" coordinate

        // Move the run button to match up with the exit button
        int w2 = btnRun.getWidth();
        int h2 = btnRun.getHeight();        
        int x2 = width - btnRun.getWidth() - SPACER;
        int y2 = btnExit.getY() + btnExit.getHeight() + SPACER;        
        btnRun.setBounds(x2, y2, w2, h2); 
                
        // Move the up down size selector to match up with the run button
        int w3 = nudSize.getWidth();
        int h3 = nudSize.getHeight();        
        int x3 = width - nudSize.getWidth() - SPACER;
        int y3 = btnRun.getY() + btnRun.getHeight() + SPACER;
        nudSize.setBounds(x3, y3, w3, h3);
        
        // Set the minimum and maximum of the size of the circles
        // (the radius of the circles) to draw
        //nudSize.Minimum = SPACER;
        //nudSize.Maximum = height - (SPACER * 2); 
        
        int min = SPACER;
        int max = height - (SPACER * 2); 
        SpinnerModel spinnerModel = new SpinnerNumberModel(SPACER, min, max, 1);
        nudSize.setModel(spinnerModel); 
        
        this.setVisible(true);
    }
    
    // <editor-fold defaultstate="collapsed" desc="NetBeans Generated Code">

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExit = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        nudSize = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit);
        btnExit.setBounds(80, 20, 50, 23);

        btnRun.setText("+");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });
        getContentPane().add(btnRun);
        btnRun.setBounds(80, 50, 50, 23);
        getContentPane().add(nudSize);
        nudSize.setBounds(80, 80, 50, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Another way to code an exit button, like:
        // Application.Exit();

        this.dispose();

        // or even just "Close();"
        // But that line will exit ("close") ONE form, and
        // the "Application.Exit();" line closes everything!
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        shouldRun = true;   
        color = JColorChooser.showDialog(null, "Choose a color", Color.RED);
        this.repaint();
    }//GEN-LAST:event_btnRunActionPerformed

    public void paint(Graphics graphics) {
        
        if (!shouldRun) return;
        
        // This button will ask the user what color to draw the circles
        // (the color inside, filling the circle) use a "fancy" dialog
        // box (like the MessageBox) then it will fill up the screen drawing
        // as many circles as it can based on the size the user choose in the
        // numeric up/down

        // Show the user a color choosing dialog box
        //cdbColor.ShowDialog();

        // Create a "color variable" (remembers a color) for the chooser
        //Color color = cdbColor.Color;
        
        // Create a surface to draw on (we are working with other 
        // people's code to do a lot of the graphics drawing)
        //Graphics surface = this.CreateGraphics();

        // "this" again means "this form"

        // Clear (wipe) the surface to a color to draw on
        //surface.Clear(Color.Black);
        graphics.setColor(color);
        
        // Create a "pen" to draw the outside (line) of a circle
        //Pen pen = new Pen(Color.White, 1);

        // Create a "brush" to fill in the circle with color
        //Brush brush = new SolidBrush(color);

        // Make a variable for the size of the circles
        int size = (int)nudSize.getValue();

        // Make a variable for how far apart the circles are
        int move = size + SPACER;

        // Make a variable for the max number of circles we can 
        // draw going down ("Y" axis)
        int maxY = height - size - SPACER;

        // Make a variable for the max number of circles we can 
        // draw going across ("X" axis)
        int maxX = width - size - SPACER;

        // NOW, the actual content of this uint, the "for" loop...            

        // The "for" loop has three parts:
            // what to START at
            // what to STOP at
            // what to CHANGE by
        // Uses round and curley brackets (like the while loop)
        // Uses two ";" semi-colons

        // Visual Studio can help write a for loop by doing this:
            // Type "for"
            // Press the "TAB" key twice

        // Use the "for" loop to repeatitively draw circles
        for (int y = SPACER; y <= maxY; y = y + move)
        {
            // "Nest" a loop inside our loop
            for (int x = SPACER; x <= maxX; x = x + move)
            {
                // Now draw the inside of the circle (fill)
                //surface.FillEllipse(brush, x, y, size, size);
                graphics.fillOval(x, y, size, size);
                
                // Now draw the outside (line) of the circle
                //surface.DrawEllipse(pen, x, y, size, size);
                graphics.drawOval(x, y, size, size);
            }
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc="NetBeans Generated Code">
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRun;
    private javax.swing.JSpinner nudSize;
    // End of variables declaration//GEN-END:variables

    // </editor-fold>
    
}
