
/** Required package class namespace */
package testing.cs30s;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import javax.swing.JColorChooser;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.Timer;


/**
 * Graphics3.java - using the NetBeans visual designer in combination
 * with our custom code (a 'hybrid' approach) to make a "mini final project" 
 * type of application (a mini 'PhotoShop') - I have removed the "main" method
 * that is added with JFrames added with the designer (like I did in Graphics1)
 * and I also took time to name all the objects when designing by right 
 * clicking each object with the designer and selecting "Change Variable
 * Name..." and then typing in a new name (with no specific naming style used)
 *
 * @author Mr. Wachs
 * @since June 2023
 */
public class Graphics3 extends javax.swing.JFrame {

    /**
     * Creates new form Graphics3
     */
    public Graphics3() {
        initComponents();
        
        // The "hybrid" approach means is you use the designer combined
        // with your own code to make the user interface what you want
        // So we call our own custom method that we place at the bottom of 
        // the code
        initializeContainer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filledOvalRadio = new javax.swing.JRadioButton();
        openOvalRadio = new javax.swing.JRadioButton();
        openRectangleRadio = new javax.swing.JRadioButton();
        filledRectangleRadio = new javax.swing.JRadioButton();
        arcRadio = new javax.swing.JRadioButton();
        threeDRectangleRadio = new javax.swing.JRadioButton();
        brushLabel = new javax.swing.JLabel();
        brushSpinner = new javax.swing.JSpinner();
        backgroundButton = new javax.swing.JButton();
        foregroundButton = new javax.swing.JButton();
        starButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        drawingPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        filledOvalRadio.setText("Filled Oval");
        filledOvalRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledOvalRadioActionPerformed(evt);
            }
        });
        getContentPane().add(filledOvalRadio);
        filledOvalRadio.setBounds(10, 20, 150, 20);

        openOvalRadio.setText("Open Oval");
        openOvalRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOvalRadioActionPerformed(evt);
            }
        });
        getContentPane().add(openOvalRadio);
        openOvalRadio.setBounds(10, 50, 150, 20);

        openRectangleRadio.setText("Open Rectangle");
        openRectangleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRectangleRadioActionPerformed(evt);
            }
        });
        getContentPane().add(openRectangleRadio);
        openRectangleRadio.setBounds(10, 110, 150, 20);

        filledRectangleRadio.setText("Filled Rectangle");
        filledRectangleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledRectangleRadioActionPerformed(evt);
            }
        });
        getContentPane().add(filledRectangleRadio);
        filledRectangleRadio.setBounds(10, 80, 150, 20);

        arcRadio.setText("Arc");
        arcRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arcRadioActionPerformed(evt);
            }
        });
        getContentPane().add(arcRadio);
        arcRadio.setBounds(10, 170, 160, 20);

        threeDRectangleRadio.setText("3D Rectangle");
        threeDRectangleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeDRectangleRadioActionPerformed(evt);
            }
        });
        getContentPane().add(threeDRectangleRadio);
        threeDRectangleRadio.setBounds(10, 140, 150, 20);

        brushLabel.setText("Brush Size:");
        getContentPane().add(brushLabel);
        brushLabel.setBounds(20, 210, 70, 16);

        brushSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brushSpinnerStateChanged(evt);
            }
        });
        getContentPane().add(brushSpinner);
        brushSpinner.setBounds(90, 202, 64, 30);

        backgroundButton.setText("Background Color");
        backgroundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backgroundButton);
        backgroundButton.setBounds(20, 290, 140, 30);

        foregroundButton.setText("Foreground Color");
        foregroundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foregroundButtonActionPerformed(evt);
            }
        });
        getContentPane().add(foregroundButton);
        foregroundButton.setBounds(20, 250, 140, 30);

        starButton.setText("Star Burst");
        starButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starButtonActionPerformed(evt);
            }
        });
        getContentPane().add(starButton);
        starButton.setBounds(20, 370, 140, 30);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton);
        clearButton.setBounds(20, 330, 140, 30);

        drawingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        drawingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanelMouseDragged(evt);
            }
        });
        drawingPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawingPanelMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        getContentPane().add(drawingPanel);
        drawingPanel.setBounds(170, 20, 580, 380);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void foregroundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foregroundButtonActionPerformed
        setForeground();        // Use "lightbulb" to create custom method
    }//GEN-LAST:event_foregroundButtonActionPerformed

    private void backgroundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundButtonActionPerformed
        setBackground();
    }//GEN-LAST:event_backgroundButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        setClear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void starButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starButtonActionPerformed
        setStarBurst();
    }//GEN-LAST:event_starButtonActionPerformed

    private void drawingPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseDragged
        setDrag(evt);
    }//GEN-LAST:event_drawingPanelMouseDragged

    private void drawingPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawingPanelMouseWheelMoved
        setWheel(evt);
    }//GEN-LAST:event_drawingPanelMouseWheelMoved

    private void brushSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brushSpinnerStateChanged
        setSpinner();
    }//GEN-LAST:event_brushSpinnerStateChanged

    private void filledOvalRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledOvalRadioActionPerformed
        setRadio(filledOvalRadio,BRUSHES[0]);
    }//GEN-LAST:event_filledOvalRadioActionPerformed

    private void openOvalRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOvalRadioActionPerformed
        setRadio(openOvalRadio,BRUSHES[1]);
    }//GEN-LAST:event_openOvalRadioActionPerformed

    private void filledRectangleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledRectangleRadioActionPerformed
        setRadio(filledRectangleRadio,BRUSHES[2]);
    }//GEN-LAST:event_filledRectangleRadioActionPerformed

    private void openRectangleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRectangleRadioActionPerformed
        setRadio(openRectangleRadio,BRUSHES[3]);
    }//GEN-LAST:event_openRectangleRadioActionPerformed

    private void threeDRectangleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeDRectangleRadioActionPerformed
        setRadio(threeDRectangleRadio,BRUSHES[4]);
    }//GEN-LAST:event_threeDRectangleRadioActionPerformed

    private void arcRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arcRadioActionPerformed
        setRadio(arcRadio,BRUSHES[5]);
    }//GEN-LAST:event_arcRadioActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton arcRadio;
    private javax.swing.JButton backgroundButton;
    private javax.swing.JLabel brushLabel;
    private javax.swing.JSpinner brushSpinner;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel drawingPanel;
    private javax.swing.JRadioButton filledOvalRadio;
    private javax.swing.JRadioButton filledRectangleRadio;
    private javax.swing.JButton foregroundButton;
    private javax.swing.JRadioButton openOvalRadio;
    private javax.swing.JRadioButton openRectangleRadio;
    private javax.swing.JButton starButton;
    private javax.swing.JRadioButton threeDRectangleRadio;
    // End of variables declaration//GEN-END:variables

    // Global variables (properties of the class) below........................
    
    // Constants:
    private final int MIN    = 2;           // for the brushes
    private final int MAX    = 200;         
    private final int CHANGE = 5;           
    private final String[] BRUSHES = {
        "Filled oval",
        "Open oval",
        "Filled rectangle",
        "Open rectangle",
        "3D rectangle",
        "Arc"
    };
    
    // Variables (primitive)
    private String brush;
    private int    size;
    private int    currentX;
    private int    currentY;
    
    // Class object variables (non-primitive)
    private Color              foreground;
    private Color              background;
    private Graphics           graphics;
    private SpinnerNumberModel model;
    private Timer              timer;
    
    // Custom Methods (that I wrote) below.....................................
    
    /**
     * Sets the properties of this form
     */
    private void initializeContainer() {
        // Setup the frame properties
        this.setSize(780,460);
        this.setTitle("Graphics 3");    // Sets the title at top of form (frame)
        this.setResizable(false);       // Makes it so the user cannot resize
        this.setLocationRelativeTo(null);   // Centers the form on screen
        
        // Code to initialize the other code variables....
        
        // Setup the primitives to default values
        size     = MIN;
        brush    = BRUSHES[0];
        currentX = 0;
        currentY = 0;
        
        // Setup the advanced data types to default values
        background = Color.white;
        foreground = Color.black;
        graphics   = drawingPanel.getGraphics();
        model      = (SpinnerNumberModel)brushSpinner.getModel(); 
        
        // Assign the variables and defualts to the controls
        model.setValue(size);
        model.setStepSize(CHANGE);
        model.setMaximum(MAX);
        model.setMinimum(MIN);        
        filledOvalRadio.setSelected(true);        
        graphics.setColor(foreground);
        drawingPanel.setBackground(background);
        
        // Setup the timer (use autocomplete to help write this code)
        timer = new Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tick();                                 // Call custom method
            }
        });
        
        this.setVisible(true);                          // Make form appear
    }
    
    /**
     * Sets the foreground color for the brushes
     */
    private void setForeground() {
        timer.stop();                               // Stop timer (if running)
        foreground = JColorChooser.showDialog(this, 
                "Choose a foreground color", foreground);   // Dialog selection
        if (foreground == null) {                           // Nothing chosen
            foreground = Color.black;                       // Default color
        }
        graphics.setColor(foreground);                      // Set chosen color
    }

    /**
     * Set the background color of the drawing surface
     */
    private void setBackground() {
        timer.stop();                               // Stop timer (if running)
        background = JColorChooser.showDialog(this, 
                "Choose a background color", background);   // Dialog selection
        if (background == null) {                           // Nothing chosen
            background = Color.white;                       // Default color
        }
        drawingPanel.setBackground(background);             // Set chosen color
    }

    /**
     * Clears the drawing surface of all graphics
     */
    private void setClear() {
        timer.stop();                   // Timer should be off
        drawingPanel.repaint();         // Have the surface clear of all marks
    }

    /**
     * Starts a timer drawing random stars on the drawing surface
     */
    private void setStarBurst() {
        drawingPanel.repaint();         // Have the surface clear of all marks
        timer.start();                  // Start timer code to make stars
    }

    /**
     * The event of dragging a mouse over the panel drawing area
     * 
     * @param event the mouse event 
     */
    private void setDrag(MouseEvent event) {
        timer.stop();                           // Timer should be off
        int x = event.getX()-(size/2);          // Get mouse x coordinate
        int y = event.getY()-(size/2);          // and y coordinate
        if      (brush.equals(BRUSHES[0])) graphics.fillOval(x, y, size, size);
        else if (brush.equals(BRUSHES[1])) graphics.drawOval(x, y, size, size);
        else if (brush.equals(BRUSHES[2])) graphics.fillRect(x, y, size, size);
        else if (brush.equals(BRUSHES[3])) graphics.drawRect(x, y, size, size);
        else if (brush.equals(BRUSHES[4])) graphics.fill3DRect(x, y, size, size,true);
        else if (brush.equals(BRUSHES[5])) graphics.drawArc(x, y, size, size,45,120);  
    }

    /**
     * The event of the mouse wheel spinning over the panel drawing area
     * 
     * @param event the mouse wheel event 
     */
    private void setWheel(MouseWheelEvent event) {
        timer.stop();                                       // Timer off
        if (event.getWheelRotation() < 0) size += CHANGE;   // Increase size
        else                              size -= CHANGE;   // Decrease size
        if (size < MIN) size = MIN;                         // Check for edge
        if (size > MAX) size = MAX; 
        model.setValue(size);                               // Set spinner
    }

    /**
     * The event for the brush size spinner
     */
    private void setSpinner() {
        if (timer != null) timer.stop();        // Timer should be off
        size = (Integer)model.getNumber();      // Set size from spinner
    }

    /**
     * User selected a brush radio button
     * 
     * @param button the specific radio button selected
     * @param brush the specific brush selected 
     */
    private void setRadio(JRadioButton button, String brush) {
        timer.stop();                       // Timer should be off
        JRadioButton[] buttons = {
            openOvalRadio,
            filledOvalRadio,
            openRectangleRadio,
            filledRectangleRadio,
            threeDRectangleRadio,
            arcRadio
        };                                          // Put buttons in an array
        for (int i = 0; i < buttons.length; i++) {  // Traverse array
            buttons[i].setSelected(false);          // set button to false
        }
        button.setSelected(true);                   // Select the one button
        this.brush = brush;                         // Select this brush
    }
    
    /**
     * The event the timer runs on it's interval
     */
    private void tick() {
        final int SPACE = 8;            // Spacing between points
        final int POINTS = 10;          // Total number of vertices
        int w = drawingPanel.getWidth() - (SPACE * 5);  // Width of drawing area
        int h = drawingPanel.getHeight() - (SPACE * 5); // Height of drawing area
        currentX = (int)((w-SPACE+1d)*Math.random()+SPACE); // Random x
        currentY = (int)((h-SPACE+1d)*Math.random()+SPACE); // Random y
        // Set all the x coordinate points
        int x1  = currentX;
        int x2  = x1 + SPACE;
        int x3  = x2 + SPACE;
        int x4  = x3 + SPACE;
        int x5  = x4 + SPACE;
        int x6  = x5 - SPACE;
        int x7  = x6 + SPACE;
        int x8  = x7 - (SPACE * 2);
        int x9  = x8 - (SPACE * 2);
        int x10 = x9 + SPACE;
        // Set all the y coordinate points
        int y1  = currentY;
        int y2  = y1;
        int y3  = y2 - SPACE;
        int y4  = y3 + SPACE;
        int y5  = y4;
        int y6  = y5 + SPACE;
        int y7  = y6 + (SPACE * 2);
        int y8  = y7 - SPACE;
        int y9  = y8 + SPACE;
        int y10 = y9 - (SPACE * 2);
        // Put all the x and y points into two arrays
        int xPoints[] = {x1,x2,x3,x4,x5,x6,x7,x8,x9,x10};
        int yPoints[] = {y1,y2,y3,y4,y5,y6,y7,y8,y9,y10};
        // Generate random color values
        int r = (int)((255d-0d+1d)*Math.random()+0d);
        int g = (int)((255d-0d+1d)*Math.random()+0d);
        int b = (int)((255d-0d+1d)*Math.random()+0d);
        Color color = new Color(r, g, b);                   // Random color
        Polygon polygon = new Polygon(xPoints, yPoints, POINTS);    
        graphics.setColor(color);                           // Set color
        graphics.fillPolygon(polygon);                      // Draw star
    }
    
}
