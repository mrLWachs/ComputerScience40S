1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	Hello World
13:	I'm in the world
14:	Good-bye world!
15:	Make a quote " 
16:	Make a slash \ 
17:	Make a 	 tab 
18:	Make a new line 
 break 
19:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
20:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
21:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
22:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
23:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
24:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
25:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
29:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
34:	a = false
35:	b = 1
36:	c = 1.2
37:	d = A
38:	e = apple
39:	x = 10
40:	x = 20
41:	y = 30
42:	y = 30
43:	x = 28
44:	y = 5
45:	z = 3
46:	3.141592658389, 99, Y, true, Wachs
47:	f = 25
48:	g = 25.0
49:	g = 25.999999999999
50:	h = 25
51:	k = 2.99999999
52:	l = 2
53:	m = 2.0
54:	n = A
55:	o = 65
56:	p = F
57:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
58:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
59:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
60:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
61:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
62:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
63:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
64:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
65:	Word hippopotomonsprosesquippedaiophobia is length 35
66:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
67:	answer1 = 3.141592653589793
68:	answer2 = 0.8775825618903728
69:	answer3 = 1.0
70:	answer4 = 125.0
71:	answer5 = 3.0
72:	answer6 = -0.6931471805599453
73:	seed = 0.49414795506619125
74:	low    = 1.0
75:	high   = 10.0
76:	number = 5.941479550661913
77:	value = 5
78:	card is 47
79:	equal
80:	The example is less than
81:	!=
82:	W1 kind of == W2
83:	Keep trying
84:	counter = 0
85:	counter = 1
86:	counter = 2
87:	counter = 3
88:	counter = 4
89:	counter = 5
90:	counter = 6
91:	counter = 7
92:	counter = 8
93:	counter = 9
94:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
95:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
96:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
97:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
98:	i = 0
99:	i = 1
100:	i = 2
101:	i = 3
102:	i = 4
103:	i = 5
104:	i = 6
105:	i = 7
106:	i = 8
107:	i = 9
108:	counting = 100
109:	counting = 90
110:	counting = 80
111:	counting = 70
112:	counting = 60
113:	counting = 50
114:	counting = 40
115:	counting = 30
116:	counting = 20
117:	counting = 10
118:	counting = 0
119:	i = 99.789
120:	i = 19.007428571428573
121:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
122:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
123:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
125:	Starting to Learn methods...
126:	*
127:	*
128:	Phenakistoscope
129:	Volleywood
130:	pancakes
131:	Spider-man
132:	Batman
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Number is 10
334:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
335:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
336:	Completed Learning Methods!
337:	Start learning arrays...
338:	333
339:	666
340:	666
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	333
440:	0 = 666
441:	1 = 0
442:	2 = 0
443:	3 = 0
444:	4 = 0
445:	5 = 0
446:	6 = 0
447:	7 = 0
448:	8 = 0
449:	9 = 0
450:	10 = 0
451:	11 = 0
452:	12 = 0
453:	13 = 0
454:	14 = 0
455:	15 = 0
456:	16 = 0
457:	17 = 0
458:	18 = 0
459:	19 = 0
460:	20 = 0
461:	21 = 0
462:	22 = 0
463:	23 = 0
464:	24 = 0
465:	25 = 0
466:	26 = 0
467:	27 = 0
468:	28 = 0
469:	29 = 0
470:	30 = 0
471:	31 = 0
472:	32 = 0
473:	33 = 0
474:	34 = 0
475:	35 = 0
476:	36 = 0
477:	37 = 0
478:	38 = 0
479:	39 = 0
480:	40 = 0
481:	41 = 0
482:	42 = 0
483:	43 = 0
484:	44 = 0
485:	45 = 0
486:	46 = 0
487:	47 = 0
488:	48 = 0
489:	49 = 0
490:	50 = 0
491:	51 = 0
492:	52 = 0
493:	53 = 0
494:	54 = 0
495:	55 = 0
496:	56 = 0
497:	57 = 0
498:	58 = 0
499:	59 = 0
500:	60 = 0
501:	61 = 0
502:	62 = 0
503:	63 = 0
504:	64 = 0
505:	65 = 0
506:	66 = 0
507:	67 = 0
508:	68 = 0
509:	69 = 0
510:	70 = 0
511:	71 = 0
512:	72 = 0
513:	73 = 0
514:	74 = 0
515:	75 = 0
516:	76 = 0
517:	77 = 0
518:	78 = 0
519:	79 = 0
520:	80 = 0
521:	81 = 0
522:	82 = 0
523:	83 = 0
524:	84 = 0
525:	85 = 0
526:	86 = 0
527:	87 = 0
528:	88 = 0
529:	89 = 0
530:	90 = 0
531:	91 = 0
532:	92 = 0
533:	93 = 0
534:	94 = 0
535:	95 = 0
536:	96 = 0
537:	97 = 0
538:	98 = 0
539:	99 = 333
540:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
541:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
542:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
543:	~~~ SIMULATED {Message} DIALOG: [5,4,5,10,3,3,8,9,2,8,8,8,8,10,3,8,5,8,10,4,7,7,6,5,5,7,1,5,5,3,2,4,6,10,3,6,6,5,9,5,7,10,8,4,3,7,3,8,2,5,] ~~~ 
544:	Random character was n
545:	z O _ E 7 m 1 = g } + x S w < & ` p f 3 1 k l C > K U } , ; 
h x p ( & m V v 0 ! N " ' N e T d } 9 k n r k 6 x < ' j i Y 
W M _ G m 5 = 9 R g ; ' o , 2 1 ~ Y s 1 : : \ U 8 e H X 6 3 
8 J . = B 2 C x ; ... (line shortened) ...
546:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	X O X 
O X O 
X O X 

549:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
550:	Completed learning arrays!
551:	Start Learning classes...
552:	Complete Learning classes
553:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
556:	Computer Science 40S Course:...............................................................
557:	Recursion test started...
558:	Recursive factorials............................
559:	-1 factorial = 1
560:	0 factorial = 1
561:	1 factorial = 1
562:	2 factorial = 2
563:	3 factorial = 6
564:	4 factorial = 24
565:	5 factorial = 120
566:	6 factorial = 720
567:	7 factorial = 5040
568:	8 factorial = 40320
569:	9 factorial = 362880
570:	10 factorial = 3628800
571:	11 factorial = 39916800
572:	12 factorial = 479001600
573:	13 factorial = 6227020800
574:	14 factorial = 87178291200
575:	15 factorial = 1307674368000
576:	16 factorial = 20922789888000
577:	17 factorial = 355687428096000
578:	18 factorial = 6402373705728000
579:	19 factorial = 121645100408832000
580:	20 factorial = 2432902008176640000
581:	Recursive powers................................
582:	-5 to the exponent -5 = -3.2E-4
583:	-4 to the exponent -5 = -9.765625E-4
584:	-3 to the exponent -5 = -0.00411522633744856
585:	-2 to the exponent -5 = -0.03125
586:	-1 to the exponent -5 = -1.0
587:	0 to the exponent -5 = 4.9E-324
588:	1 to the exponent -5 = 1.0
589:	2 to the exponent -5 = 0.03125
590:	3 to the exponent -5 = 0.00411522633744856
591:	4 to the exponent -5 = 9.765625E-4
592:	5 to the exponent -5 = 3.2E-4
593:	6 to the exponent -5 = 1.286008230452675E-4
594:	7 to the exponent -5 = 5.9499018266198606E-5
595:	8 to the exponent -5 = 3.0517578125E-5
596:	9 to the exponent -5 = 1.6935087808430286E-5
597:	10 to the exponent -5 = 1.0E-5
598:	-5 to the exponent -4 = 0.0016
599:	-4 to the exponent -4 = 0.00390625
600:	-3 to the exponent -4 = 0.012345679012345678
601:	-2 to the exponent -4 = 0.0625
602:	-1 to the exponent -4 = 1.0
603:	0 to the exponent -4 = 4.9E-324
604:	1 to the exponent -4 = 1.0
605:	2 to the exponent -4 = 0.0625
606:	3 to the exponent -4 = 0.012345679012345678
607:	4 to the exponent -4 = 0.00390625
608:	5 to the exponent -4 = 0.0016
609:	6 to the exponent -4 = 7.716049382716049E-4
610:	7 to the exponent -4 = 4.1649312786339027E-4
611:	8 to the exponent -4 = 2.44140625E-4
612:	9 to the exponent -4 = 1.5241579027587258E-4
613:	10 to the exponent -4 = 1.0E-4
614:	-5 to the exponent -3 = -0.008
615:	-4 to the exponent -3 = -0.015625
616:	-3 to the exponent -3 = -0.037037037037037035
617:	-2 to the exponent -3 = -0.125
618:	-1 to the exponent -3 = -1.0
619:	0 to the exponent -3 = 4.9E-324
620:	1 to the exponent -3 = 1.0
621:	2 to the exponent -3 = 0.125
622:	3 to the exponent -3 = 0.037037037037037035
623:	4 to the exponent -3 = 0.015625
624:	5 to the exponent -3 = 0.008
625:	6 to the exponent -3 = 0.004629629629629629
626:	7 to the exponent -3 = 0.0029154518950437317
627:	8 to the exponent -3 = 0.001953125
628:	9 to the exponent -3 = 0.0013717421124828531
629:	10 to the exponent -3 = 0.001
630:	-5 to the exponent -2 = 0.04
631:	-4 to the exponent -2 = 0.0625
632:	-3 to the exponent -2 = 0.1111111111111111
633:	-2 to the exponent -2 = 0.25
634:	-1 to the exponent -2 = 1.0
635:	0 to the exponent -2 = 4.9E-324
636:	1 to the exponent -2 = 1.0
637:	2 to the exponent -2 = 0.25
638:	3 to the exponent -2 = 0.1111111111111111
639:	4 to the exponent -2 = 0.0625
640:	5 to the exponent -2 = 0.04
641:	6 to the exponent -2 = 0.027777777777777776
642:	7 to the exponent -2 = 0.02040816326530612
643:	8 to the exponent -2 = 0.015625
644:	9 to the exponent -2 = 0.012345679012345678
645:	10 to the exponent -2 = 0.01
646:	-5 to the exponent -1 = -0.2
647:	-4 to the exponent -1 = -0.25
648:	-3 to the exponent -1 = -0.3333333333333333
649:	-2 to the exponent -1 = -0.5
650:	-1 to the exponent -1 = -1.0
651:	0 to the exponent -1 = 4.9E-324
652:	1 to the exponent -1 = 1.0
653:	2 to the exponent -1 = 0.5
654:	3 to the exponent -1 = 0.3333333333333333
655:	4 to the exponent -1 = 0.25
656:	5 to the exponent -1 = 0.2
657:	6 to the exponent -1 = 0.16666666666666666
658:	7 to the exponent -1 = 0.14285714285714285
659:	8 to the exponent -1 = 0.125
660:	9 to the exponent -1 = 0.1111111111111111
661:	10 to the exponent -1 = 0.1
662:	-5 to the exponent 0 = 1.0
663:	-4 to the exponent 0 = 1.0
664:	-3 to the exponent 0 = 1.0
665:	-2 to the exponent 0 = 1.0
666:	-1 to the exponent 0 = 1.0
667:	0 to the exponent 0 = 1.0
668:	1 to the exponent 0 = 1.0
669:	2 to the exponent 0 = 1.0
670:	3 to the exponent 0 = 1.0
671:	4 to the exponent 0 = 1.0
672:	5 to the exponent 0 = 1.0
673:	6 to the exponent 0 = 1.0
674:	7 to the exponent 0 = 1.0
675:	8 to the exponent 0 = 1.0
676:	9 to the exponent 0 = 1.0
677:	10 to the exponent 0 = 1.0
678:	-5 to the exponent 1 = -5.0
679:	-4 to the exponent 1 = -4.0
680:	-3 to the exponent 1 = -3.0
681:	-2 to the exponent 1 = -2.0
682:	-1 to the exponent 1 = -1.0
683:	0 to the exponent 1 = 0.0
684:	1 to the exponent 1 = 1.0
685:	2 to the exponent 1 = 2.0
686:	3 to the exponent 1 = 3.0
687:	4 to the exponent 1 = 4.0
688:	5 to the exponent 1 = 5.0
689:	6 to the exponent 1 = 6.0
690:	7 to the exponent 1 = 7.0
691:	8 to the exponent 1 = 8.0
692:	9 to the exponent 1 = 9.0
693:	10 to the exponent 1 = 10.0
694:	-5 to the exponent 2 = 25.0
695:	-4 to the exponent 2 = 16.0
696:	-3 to the exponent 2 = 9.0
697:	-2 to the exponent 2 = 4.0
698:	-1 to the exponent 2 = 1.0
699:	0 to the exponent 2 = 0.0
700:	1 to the exponent 2 = 1.0
701:	2 to the exponent 2 = 4.0
702:	3 to the exponent 2 = 9.0
703:	4 to the exponent 2 = 16.0
704:	5 to the exponent 2 = 25.0
705:	6 to the exponent 2 = 36.0
706:	7 to the exponent 2 = 49.0
707:	8 to the exponent 2 = 64.0
708:	9 to the exponent 2 = 81.0
709:	10 to the exponent 2 = 100.0
710:	-5 to the exponent 3 = -125.0
711:	-4 to the exponent 3 = -64.0
712:	-3 to the exponent 3 = -27.0
713:	-2 to the exponent 3 = -8.0
714:	-1 to the exponent 3 = -1.0
715:	0 to the exponent 3 = 0.0
716:	1 to the exponent 3 = 1.0
717:	2 to the exponent 3 = 8.0
718:	3 to the exponent 3 = 27.0
719:	4 to the exponent 3 = 64.0
720:	5 to the exponent 3 = 125.0
721:	6 to the exponent 3 = 216.0
722:	7 to the exponent 3 = 343.0
723:	8 to the exponent 3 = 512.0
724:	9 to the exponent 3 = 729.0
725:	10 to the exponent 3 = 1000.0
726:	-5 to the exponent 4 = 625.0
727:	-4 to the exponent 4 = 256.0
728:	-3 to the exponent 4 = 81.0
729:	-2 to the exponent 4 = 16.0
730:	-1 to the exponent 4 = 1.0
731:	0 to the exponent 4 = 0.0
732:	1 to the exponent 4 = 1.0
733:	2 to the exponent 4 = 16.0
734:	3 to the exponent 4 = 81.0
735:	4 to the exponent 4 = 256.0
736:	5 to the exponent 4 = 625.0
737:	6 to the exponent 4 = 1296.0
738:	7 to the exponent 4 = 2401.0
739:	8 to the exponent 4 = 4096.0
740:	9 to the exponent 4 = 6561.0
741:	10 to the exponent 4 = 10000.0
742:	-5 to the exponent 5 = -3125.0
743:	-4 to the exponent 5 = -1024.0
744:	-3 to the exponent 5 = -243.0
745:	-2 to the exponent 5 = -32.0
746:	-1 to the exponent 5 = -1.0
747:	0 to the exponent 5 = 0.0
748:	1 to the exponent 5 = 1.0
749:	2 to the exponent 5 = 32.0
750:	3 to the exponent 5 = 243.0
751:	4 to the exponent 5 = 1024.0
752:	5 to the exponent 5 = 3125.0
753:	6 to the exponent 5 = 7776.0
754:	7 to the exponent 5 = 16807.0
755:	8 to the exponent 5 = 32768.0
756:	9 to the exponent 5 = 59049.0
757:	10 to the exponent 5 = 100000.0
758:	-5 to the exponent 6 = 15625.0
759:	-4 to the exponent 6 = 4096.0
760:	-3 to the exponent 6 = 729.0
761:	-2 to the exponent 6 = 64.0
762:	-1 to the exponent 6 = 1.0
763:	0 to the exponent 6 = 0.0
764:	1 to the exponent 6 = 1.0
765:	2 to the exponent 6 = 64.0
766:	3 to the exponent 6 = 729.0
767:	4 to the exponent 6 = 4096.0
768:	5 to the exponent 6 = 15625.0
769:	6 to the exponent 6 = 46656.0
770:	7 to the exponent 6 = 117649.0
771:	8 to the exponent 6 = 262144.0
772:	9 to the exponent 6 = 531441.0
773:	10 to the exponent 6 = 1000000.0
774:	-5 to the exponent 7 = -78125.0
775:	-4 to the exponent 7 = -16384.0
776:	-3 to the exponent 7 = -2187.0
777:	-2 to the exponent 7 = -128.0
778:	-1 to the exponent 7 = -1.0
779:	0 to the exponent 7 = 0.0
780:	1 to the exponent 7 = 1.0
781:	2 to the exponent 7 = 128.0
782:	3 to the exponent 7 = 2187.0
783:	4 to the exponent 7 = 16384.0
784:	5 to the exponent 7 = 78125.0
785:	6 to the exponent 7 = 279936.0
786:	7 to the exponent 7 = 823543.0
787:	8 to the exponent 7 = 2097152.0
788:	9 to the exponent 7 = 4782969.0
789:	10 to the exponent 7 = 1.0E7
790:	-5 to the exponent 8 = 390625.0
791:	-4 to the exponent 8 = 65536.0
792:	-3 to the exponent 8 = 6561.0
793:	-2 to the exponent 8 = 256.0
794:	-1 to the exponent 8 = 1.0
795:	0 to the exponent 8 = 0.0
796:	1 to the exponent 8 = 1.0
797:	2 to the exponent 8 = 256.0
798:	3 to the exponent 8 = 6561.0
799:	4 to the exponent 8 = 65536.0
800:	5 to the exponent 8 = 390625.0
801:	6 to the exponent 8 = 1679616.0
802:	7 to the exponent 8 = 5764801.0
803:	8 to the exponent 8 = 1.6777216E7
804:	9 to the exponent 8 = 4.3046721E7
805:	10 to the exponent 8 = 1.0E8
806:	-5 to the exponent 9 = -1953125.0
807:	-4 to the exponent 9 = -262144.0
808:	-3 to the exponent 9 = -19683.0
809:	-2 to the exponent 9 = -512.0
810:	-1 to the exponent 9 = -1.0
811:	0 to the exponent 9 = 0.0
812:	1 to the exponent 9 = 1.0
813:	2 to the exponent 9 = 512.0
814:	3 to the exponent 9 = 19683.0
815:	4 to the exponent 9 = 262144.0
816:	5 to the exponent 9 = 1953125.0
817:	6 to the exponent 9 = 1.0077696E7
818:	7 to the exponent 9 = 4.0353607E7
819:	8 to the exponent 9 = 1.34217728E8
820:	9 to the exponent 9 = 3.87420489E8
821:	10 to the exponent 9 = 1.0E9
822:	-5 to the exponent 10 = 9765625.0
823:	-4 to the exponent 10 = 1048576.0
824:	-3 to the exponent 10 = 59049.0
825:	-2 to the exponent 10 = 1024.0
826:	-1 to the exponent 10 = 1.0
827:	0 to the exponent 10 = 0.0
828:	1 to the exponent 10 = 1.0
829:	2 to the exponent 10 = 1024.0
830:	3 to the exponent 10 = 59049.0
831:	4 to the exponent 10 = 1048576.0
832:	5 to the exponent 10 = 9765625.0
833:	6 to the exponent 10 = 6.0466176E7
834:	7 to the exponent 10 = 2.82475249E8
835:	8 to the exponent 10 = 1.073741824E9
836:	9 to the exponent 10 = 3.486784401E9
837:	10 to the exponent 10 = 1.0E10
838:	Recursion complete!
839:	Advanced Classes Test started...
840:	unidentified is 0 identifies as unidentified
841:	Per Soney is 0 identifies as unidentified
842:	Per Soney is 1 identifies as unidentified
843:	Booooo!
844:	unidentified is 0 identifies as unidentified
845:	I am a student
846:		 Number: 	1
847:		 GPA:    	0.0
848:	Stu Denty is 0 identifies as unidentified
849:	I am a student
850:		 Number: 	1
851:		 GPA:    	0.0
852:	Stu Denty is 0 identifies as unidentified
853:	I am a student
854:		 Number: 	1
855:		 GPA:    	0.3
856:	Stu Denty is 0 identifies as unidentified
857:	I am a student
858:		 Number: 	1
859:		 GPA:    	0.0
860:	Stu Denty is 0 identifies as unidentified
861:	I am a student
862:		 Number: 	1
863:		 GPA:    	3.0002999999999993
864:	Booooo!
865:	I am a student
866:		 Number: 	1
867:		 GPA:    	3.0002999999999993
868:	Stewie Griffin is 2 identifies as cat
869:	I am a student
870:		 Number: 	1
871:		 GPA:    	0.0
872:	Mr. Teachery is 45 identifies as teacher
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Booooo!
876:	I am a student
877:		 Number: 	1
878:		 GPA:    	3.300299999999999
879:	Stewie Griffin is 2 identifies as cat
880:	I am a student
881:		 Number: 	1
882:		 GPA:    	0.3
883:	O1 = java.lang.Object@57536d79
884:	O2 = java.lang.Object@3b0143d3
885:	O3 = java.lang.Object@3b0143d3
886:	Person  as string = Person
887:	Student as string = Student: Person
888:	Teacher as string = Teacher: Person
889:	String  as string = squirrel
890:	JOptionPane as string = utility.io.JOptionPane@5a8e6209
891:	O2==O3
892:	P1==P2
893:	P2==P3
894:	P1==P3
895:	P2==P3
896:	Person is Person
897:	Clone  is Person
898:	Clone is ==
899:	S1 total = 2
900:	S2 total = 2
901:	S3 total = 4
902:	S4 total = 4
903:	S3 total = 9
904:	S4 total = 9
905:	Boom!!!
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Doctor: Person
912:	DiskJockey: Person
913:	MrWachs: Teacher: Person
914:	Piper: HighSchool: Student: Person
915:	Husky: HighSchool: Student: Person
916:	Athlete: Husky: HighSchool: Student: Person
917:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
918:	Grill on the BBQ
919:	Mr. Lawrence Wachs is eating Protein it was Savory
920:	unidentified is eating Apple from Do not eat!
921:	Round 1...
922:	Jock has signed the form!
923:	Round 2...
924:	Jock has scored
925:	Jock has scored
926:	St. Pauls has scored
927:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
928:	Jock SLAPS St. Pauls
929:	Round 3...
930:	Jock has scored
931:	Jock has scored
932:	St. Pauls has scored
933:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
934:	Round 4...
935:	Jock has scored
936:	Jock has scored
937:	St. Pauls has scored
938:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
939:	Hard core ironing of clothes!
940:	Jock wins!
941:	Grill on the BBQ
942:	Jock is eating Protein it was Savory
943:	Class name: Boolean, Hash Code: 1231, To String: true
944:	Class name: Integer, Hash Code: 0, To String: 0
945:	Class name: Double, Hash Code: 300063655, To String: 3.14
946:	Class name: Character, Hash Code: 97, To String: a
947:	Class name: String, Hash Code: 3556498, To String: test
948:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
949:	Class name: JOptionPane, Hash Code: 1535634836, To String: utility.io.JOptionPane@5b87ed94
950:	Class name: Object, Hash Code: 1846412426, To String: java.lang.Object@6e0e048a
951:	true
952:	0
953:	3.14
954:	a
955:	test
956:	Athlete: Husky: HighSchool: Student: Person
957:	Class name: Boolean, Hash Code: 1231, To String: true
958:	Class name: Integer, Hash Code: 0, To String: 0
959:	Class name: Double, Hash Code: 300063655, To String: 3.14
960:	Class name: Character, Hash Code: 97, To String: a
961:	Class name: String, Hash Code: 3556498, To String: test
962:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
963:	Home Owner:
964:	Mr. Lawrence Wachs
965:	And the contents...
966:	testing.prerequisite.cs40s.advancedclasses.Meeting@23e028a9
967:	Mr. Lawrence Wachs is eating Apple from Do not eat!
968:	Grill on the BBQ
969:	Mr. Lawrence Wachs is eating Protein it was Savory
970:	Advanced Classes Test complete!
971:	Collections testing begins...
972:	Testing Node constructors....................
973:	Testing Node toString()......................
974:	Node a = null
975:	Node b = Sass
976:	Node c = Pros
977:	Node d = Joes
978:	Testing Node clone().........................
979:	Node e = null
980:	Node f = Sass
981:	Node g = Pros
982:	Node h = Joes
983:	Testing Node equal().........................
984:	Node a == b? -> false
985:	Node b == c? -> false
986:	Node c == d? -> false
987:	Node d == d? -> true
988:	Node e == a? -> false
989:	Node f == b? -> true
990:	Node g == c? -> true
991:	Node h == d? -> true
992:	Testing Node finalize()......................
993:	Node a = null
994:	Node b = Sass
995:	Node c = Pros
996:	Node d = Joes
997:	Node e = null
998:	Node f = Sass
999:	Node g = Pros
1000:	Node h = Joes
1001:	Node a = null
1002:	Node b = null
1003:	Node c = null
1004:	Node d = null
1005:	Node e = null
1006:	Node f = null
1007:	Node g = null
1008:	Node h = null
1009:	Testing default LinkedList constructor.......
1010:	Testing toString, empty, size methods........
1011:	L1 toString -> Empty LinkedList
1012:	L2 toString -> Empty LinkedList
1013:	L1 empty? -> true
1014:	L2 empty? -> true
1015:	L1 size -> 0
1016:	L2 size -> 0
1017:	Test add (first to the back) of the list.....
1018:	addBack -> true	Linked List 	[51]
1019:	addBack -> true	Linked List 	[51,50]
1020:	addBack -> true	Linked List 	[51,50,-50]
1021:	addBack -> true	Linked List 	[51,50,-50,55]
1022:	addBack -> false	Linked List 	[51,50,-50,55]
1023:	Test add (second to the front) of the list...
1024:	addFront -> true	Linked List 	[80,51,50,-50,55]
1025:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1026:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1028:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1029:	Re-testing empty, size methods...............
1030:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1031:	L2 empty? -> true	Empty LinkedList
1032:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1033:	L2 size -> 0	Empty LinkedList
1034:	Test get method..............................
1035:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1036:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Test set method..............................
1046:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1047:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1048:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1049:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1050:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1051:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1052:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1053:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1054:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1055:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1056:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Test equals method...........................
1058:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1059:	List 2 = Empty LinkedList
1060:	List1 == List2 -> false
1061:	Test clone method............................
1062:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1063:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1064:	Re-testing equals...
1065:	List1 == List2 -> true
1066:	Test addAfter method.........................
1067:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1068:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1069:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1070:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1071:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1072:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1073:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1074:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1075:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1076:	Test other edge case
1077:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1078:	Test addBefore method.........................
1079:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1080:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Test other edge case
1097:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1098:	Test front and back methods..................
1099:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1100:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1101:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1102:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1103:	Clear out list 2
1104:	Front of list 2 = null	Empty LinkedList
1105:	Back of list 2 = null	Empty LinkedList
1106:	Cloning list 2 from list 1
1107:	Test removeFront method......................
1108:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1109:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1110:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1111:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1112:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1113:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1114:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1115:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1116:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1117:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1118:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1119:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1120:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1121:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1122:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1123:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1124:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1125:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1126:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1127:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1128:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1129:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1130:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1131:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1132:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1133:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1134:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1135:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1136:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1137:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1138:	Linked List 	[16,17]	Removing list 1 front = 	16
1139:	Linked List 	[17]	Removing list 1 front = 	17
1140:	Empty LinkedList	Removing list 1 front = 	null
1141:	Cloning list 1 from list 2
1142:	Test removeBack method.......................
1143:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1144:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1166:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1167:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1168:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1169:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1170:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1171:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1172:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1173:	Linked List 	[100,101]	Removing list 2 back = 	101
1174:	Linked List 	[100]	Removing list 2 back = 	100
1175:	Empty LinkedList	Removing list 2 back = 	null
1176:	Cloning list 2 from list 1
1177:	Test remove method...........................
1178:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1203:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1204:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1205:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1206:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1207:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1208:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1209:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1210:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1211:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1212:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1213:	Test contains method.........................
1214:	List 1 (empty) contains 10 = false	Empty LinkedList
1215:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1216:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1217:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1249:	Test firstIndexOf and lastIndexOf methods....
1250:	First index of 5: 	0
1251:	Last  index of 5: 	7
1252:	First index of 7: 	2
1253:	Last  index of 7: 	9
1254:	First index of 8: 	3
1255:	Last  index of 8: 	3
1256:	First index of 9: 	-1
1257:	Last  index of 9: 	-1
1258:	Test numberOf method.........................
1259:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1260:	Number of 5: 	3
1261:	Number of 8: 	1
1262:	Number of 9: 	0
1263:	Test allIndices method.......................
1264:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1265:	Array -> indices 5: 	[0, 4, 7]
1266:	Array -> indices 8: 	[3]
1267:	Array -> indices 9: 	null
1268:	Cloning list 2 from list 1
1269:	Test remove method...........................
1270:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1271:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1272:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1273:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1274:	Test removeLast method.......................
1275:	Linked List 	[6,7,5,6,7,5,6,7]
1276:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1277:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1278:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1279:	Test removeAll method........................
1280:	Linked List 	[6,7,5,6,7,6,7]
1281:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1282:	Removing all 6: 	true	Linked List 	[7,7,7]
1283:	Removing all 9: 	false	Linked List 	[7,7,7]
1284:	Cloning list 1 from list 2
1285:	Test removeAll array method..................
1286:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1287:	Array: 	[5, 6, 9]
1288:	Removing all from array: Linked List 	[7,8,7,7]
1289:	Test removeAll list method..................
1290:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1291:	List 2 	Linked List 	[7,8,7,7]
1292:	Removing all list 2 from list 1...
1293:	List 1 	Linked List 	[5,6,5,6,5,6]
1294:	List 2 	Linked List 	[7,8,7,7]
1295:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1296:	Test containsAll array method................
1297:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1298:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1299:	Test containsAll list method.................
1300:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1301:	Alter list 2...
1302:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1303:	Test addAll array method.....................
1304:	Linked List 	[6,7,8,6,7,5,6,45]
1305:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1306:	Test addAll list method......................
1307:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1308:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1309:	Test subList method..........................
1310:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1311:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1312:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1313:	Pulling out sub-list from 2 to 10: 	null
1314:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1315:	Test fromArray method........................
1316:	Array is 	[5, 6, 7, 8]
1317:	List is 	Linked List 	[5,6,7,8]
1318:	Test fromLinkedList method...................
1319:	1st List is 	Linked List 	[5,6,7,8]
1320:	2nd List is 	Linked List 	[5,6,7,8]
1321:	Test toArray method..........................
1322:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1323:	Testing the imported util LinkedList.........
1324:	Imported constructor...
1325:	Imported add:	[0.0]
1326:	Imported add:	[0.0, 1.23]
1327:	Imported addFirst:	[4.56, 0.0, 1.23]
1328:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1329:	Imported size:	4
1330:	Imported isEmpty:	false
1331:	Imported get:	0.0
1332:	Imported set:	4.56
1333:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1334:	Imported equals:	true
1335:	Imported getFirst:	0.01
1336:	Imported getLast:	7.89
1337:	Imported contains:	true
1338:	Imported removeFirst:	0.01
1339:	Imported removeLast:	7.89
1340:	Imported remove:	1.23
1341:	Imported remove:	false
1342:	Testing the imported util ArrayList.........
1343:	Imported ArrayList:	[a, b, c, d, e]
1344:	Using the enhanced for loop with this object...
1345:	a b c d e Using an iterator object...
1346:	a b c d e Collections testing complete!
1347:	Computer Science 42SAP Course:.............................................................
1348:	Computer Science 42SAP curriculum content..................................................
1349:	AP curriculum - Part 1.....................................................................
1350:	AP: Unit 1 (Primitive Types)...............................................................
1351:	1.1 Why Programming? Why Java?.............................................................
1352:	System.out.print outputs text to the screen and System.out.println outputs with a line break
1353:	More specifically, the code word "System" refers to the "computer system" and the 
1354:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
1355:	methods (or "actions") that take the string literal (which is the word or words in between 
1356:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
1357:	will take the string literal and output it to the default output device - that being the 
1358:	computer screen.
1359:	1.2 Variables and Data Types...............................................................
1360:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
1361:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
1362:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
1363:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
1364:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
1365:	variable can only be one type and only store that specified type of data. However, the data 
1366:	itself can change (or "vary") after the initial declaration. Examples of this are below...
1367:	// Variables declared and assigned initial ("starting") values:
1368:	boolean a = true;
1369:	int     b = 0;
1370:	double  c = 1.0;
1371:	char    d = 'A';
1372:	// Variables content changes ("reassigned"):
1373:	a = false;
1374:	b = 1;
1375:	c = 1.1;
1376:	d = 'B';
1377:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
1378:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
1379:	given the initial value when declared (or initialized) and that value stays locked. These 
1380:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
1381:	the name. Final variables are more efficient for a number of reasons including ease of code 
1382:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
1383:	are below
1384:	// Constants (finals) declared (initialized)
1385:	final boolean FOUND  = true;
1386:	final int     VALUE  = 1;
1387:	final double  AMOUNT = 2.5;
1388:	final char    CODE   = 'X';
1389:	1.3 Expressions and Assignment Statements..................................................
1390:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
1391:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
1392:	context, the word "literal" can also mean a number (like "5"). This usually involves 
1393:	variable types int and double (the number types) used in a math expression or equation. This 
1394:	can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
1395:	evaluated in a formula, they always evaluate to an int answer (solution) and double values 
1396:	will evaluate to a double. Complex (or "compound" expressions can be formed in which 
1397:	the order of operations (or precedence order). This means multiplication and division are 
1398:	evaluated before addition and subtraction. If operations are at the same precedence level, 
1399:	then they are evaluated from left to right.When you try and divide by zero, an error 
1400:	(the "ArithmeticException" error) will occur and the program will stop running. Examples:
1401:	// Arithmetic evaluations using variables
1402:	int    v1 = 5;
1403:	int    v2 = 3;
1404:	int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
1405:	double v4 = 5.2;
1406:	double v5 = 3.3;
1407:	double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
1408:	1.4 Compound Assignment Operators..........................................................
1409:	Compound statements in this context refers to using shortcuts to quickly add or subtract one 
1410:	(increment or decrement) to a variable. You can also use more complex shorthand compound 
1411:	statements to quickly multiply, divide, even modulus a variable with itself or other 
1412:	variables. For example:
1413:	// Shorthand Compound Arithmetic expressions
1414:	int value = 5;
1415:	value++;    // is the same as "value = value + 1;"
1416:	value--;    // is the same as "value = value + 1;"
1417:	value += 5; // is the same as "value = value + 5;"
1418:	value -= 5; // is the same as "value = value - 5;"
1419:	value *= 5; // is the same as "value = value * 5;"
1420:	value /= 5; // is the same as "value = value / 5;"
1421:	value %= 5; // is the same as "value = value % 5;"
1422:	1.5 Casting and Ranges of Variables........................................................
1423:	Casting is the process of "converting" one data type into another data type. When casting 
1424:	an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
1425:	off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
1426:	A char when cast will turn into it's ASCII value. The process of casting involves putting 
1427:	variable to be cast with the type being cast into in round brackets to the left of that 
1428:	variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
1429:	constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
1430:	evaluates an int outside that range, an error will occur (overflow error). For example:
1431:	// Casting data types
1432:	int integer = Integer.MAX_VALUE;
1433:	double doub = Double.MIN_VALUE;
1434:	doub        = (int)integer;
1435:	integer     = (int)doub;
1436:	char letter = 'A';
1437:	integer     = (int)letter;
1438:	AP: Unit 3 (Boolean Expressions And If Statements).........................................
1439:	3.1 Boolean Expressions....................................................................
1440:	A Boolean (true/false) expression is a code statement most likely in a control structure 
1441:	like a conditional statement or loop control structure that evaluates to true or false to 
1442:	make decisions and control the flow of the program. The Boolean expression will require 
1443:	the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
1444:	than", "greater than", "less than or equal to", "greater than or equal to", "equal 
1445:	to", and "not equal to".
1446:	3.2 if Statements and Control Flow.........................................................
1447:	A "Conditional Statement" is also known under other names like "branching statement", "if 
1448:	statement", "one-way selection statement", and "control structure". It uses the reserved 
1449:	keyword "if" along with round brackets which contain the Boolean expression, and curly 
1450:	brackets to contain the control block of all code you wish to be controlled by the 
1451:	conditional statement. Brackets are optional if the block is only one line, and you may also 
1452:	move thos lines up to the same line as the conditional statement. For example:
1453:	// Example of if statements
1454:	int a = 10;
1455:	int b = 10;
1456:	if (a == a) {
1457:	    // "equal"
1458:	}
1459:	3.3 if-else Statements.....................................................................
1460:	The "else" statement is paired with an "if" statement to control the flow of the logic so 
1461:	that the conditional now evaluates to both true and false. This can be called a "two 
1462:	way selection" (for true/false). An "else" must always follow an "if" statement first. 
1463:	For example:
1464:	// if with "else" 
1465:	double c = 1.45, d = 1.5; 
1466:	if (c < d) {
1467:	    // "Less than"
1468:	}
1469:	else {
1470:	    // "Greater than"
1471:	}
1472:	// Shortened lines version
1473:	char e = 'A';
1474:	char f = 'a';
1475:	if (e != f) e = '!';
1476:	else        e = '=';
1477:	3.4 else if Statements.....................................................................
1478:	When making multiple decisions (more than 2), the "else if" statement is added to an 
1479:	existing "if" statement to have multiple branches of logic for the code to follow. This 
1480:	is much more efficient than seperate "if" statements. This can also be called "multi-way 
1481:	selection" (or "if-else-if"). An "else" statement is also still the final option (but 
1482:	this is not required). For example:
1483:	// Showing a "chain" of else if statements
1484:	int g = 0;
1485:	if (g == 1) {
1486:	    // The first if is true
1487:	}
1488:	else if (g == 2) {
1489:	    // The next if is true
1490:	}
1491:	else if (g == 3) {
1492:	    // The next if (in the "chain" of ifs) is true
1493:	}
1494:	else {
1495:	    // Nothing above is true, so go to this else
1496:	}
1497:	3.5 Compound Boolean Expressions...........................................................
1498:	The process of "nesting" means to place one conditional statement inside the "block" of 
1499:	another conditional statement. The logical operators: "and", "or", and "not" are 
1500:	represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
1501:	is used to combine logical boolean expressions such that ALL expressions need to be true for 
1502:	the entire statement to be true. The operator OR is used to combine logical boolean 
1503:	expressions such that ANY expression can be true for the entire statement to be true. The 
1504:	operator NOT reverses the logic so that true statements are evaluated as false (and visa 
1505:	versa). If the statement contains multiple Boolean expressions and the result of the 
1506:	evaluation of one expression has already determined the expressions result, then the 
1507:	rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
1508:	evaluation". For example:
1509:	// Logical operators and "nesting"
1510:	int    age = 17;
1511:	double iq  = 1.0;
1512:	if (age >= 18 && iq > 90) {
1513:	    // with "and" ("&&") BOTH have to be true
1514:	}
1515:	else if (age >= 18 || iq > 0) {
1516:	    // with "or" ("||") EITHER can be true
1517:	}
1518:	else {
1519:	    // Case if neither evaluates
1520:	    if (age > 0) {
1521:	        // A "nested if statement"
1522:	    }
1523:	}
1524:	3.6 Equivalent Boolean Expressions.........................................................
1525:	Boolean (true/false) expressions turned into logical statements used by control structures 
1526:	like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
1527:	Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
1528:	not necessarily applicable to this exam). This just means that complex statements need to be 
1529:	evaluated by using mathematical rules (like "order of operations") and logical operators 
1530:	(like "and, or, not") to determine the final Boolean result. This could determine if a 
1531:	control structure (like an "if" statement) runs a block of code or not.
1532:	3.7 Comparing Objects......................................................................
1533:	The use of an advanced data type like an "Object" in code means that comparison 
1534:	operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
1535:	double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
1536:	determine the equality of two objects. For example:
1537:	// Use of the built-in equals method with Objects
1538:	String word1 = "edgy";
1539:	String word2 = "edGy";
1540:	if (word1.equals(word2)) {
1541:	    // "W1=W2"
1542:	}
1543:	else if (word1.equalsIgnoreCase(word2)) {
1544:	    // "W1 kind of == W2"
1545:	}
1546:	AP: Unit 4 (Iteration).....................................................................
1547:	4.1 while Loops............................................................................
1548:	The word "Iteration" is another word for "Loop" or "Looping" which is a control 
1549:	struture to have code statements "repeat". Like conditional ("if") statements, iteration 
1550:	statements control the flow of a program's logic. Also like if statements, iteration 
1551:	statements are controlled by a Boolean expression (true or false). The result of the Boolean 
1552:	expression will result in the code executing zero or mulitple times (until the expression 
1553:	evaluates to false). The expression is evaluated each time through an iteration of the loop. 
1554:	A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
1555:	(thus the loop never stops looping - or never stops running). It is possible a loop will 
1556:	never run if it evaluates to false before the body (block) of the loop. If you use the 
1557:	keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
1558:	potentially exit any method the loop is written inside. The "while" loop is a event loop or 
1559:	non-deterministic loop, which means it is not usually used for counting but when you do 
1560:	not know how many times the loop needs to run (a certain event can cause the loop to 
1561:	end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
1562:	(traversing) arrays and lists, and searching and sorting values. For example:
1563:	// Example of a simple while loop
1564:	int counter = 0;
1565:	while (counter < 10) {
1566:	    counter++;
1567:	}
1568:	4.2 for Loops..............................................................................
1569:	The "for" loop is another looping form. The for loop is a count controlled loop that 
1570:	generally is used when a loop needs to run a specific number of times. There are three 
1571:	parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
1572:	the starting, ending, and change of the loop. In a for loop a counting variable is 
1573:	generally declared right inside the loop to a starting value, then the Boolean condition 
1574:	to end the loop, then the change value increasing (increment) or decreasing (decrement) 
1575:	that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
1576:	by one" error occurs when a loop runs one too many or one too few times. For Example:
1577:	// Example of a for loop
1578:	for (int i = 0; i < 10; i++) {
1579:	    // potential code body...
1580:	}
1581:	4.3 Developing Algorithms Using Strings....................................................
1582:	The String class allows for several "built-in" methods of the String class to manipulate 
1583:	the string and the value it stores. Several of these methods could apply to the A.P. exam 
1584:	including travelling (traversing) string characters, pulling out substrings (parts 
1585:	of the string), reversing a string, etc. For example:
1586:	// Example of string methods with a loop
1587:	String word   = "completion";
1588:	String parts1 = word.substring(3);
1589:	String parts2 = word.substring(1,7);
1590:	for (int i = 0; i < word.length(); i++) {
1591:	    char character = word.charAt(i);
1592:	}
1593:	4.4 Nested Iteration.......................................................................
1594:	Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
1595:	This means you can place a iteration statement inside the block of another iteration 
1596:	statement. The inner loop must complete all of its iterations before the outer loop 
1597:	can continue. For example:
1598:	// Example of nested loops
1599:	for (int i = 0; i < 10; i++) {
1600:	    for (int j = 0; j < 10; j++) {
1601:	        int k = 10;
1602:	        while (k < 10) {
1603:	            // potential code body...
1604:	        }
1605:	    }
1606:	}
1607:	4.5 Informal Code Analysis.................................................................
1608:	Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
1609:	loops are typical A.P. exam questions. You should practice these types of questions.
1610:	AP curriculum - Part 2.....................................................................
1611:	AP: Unit 2 (Using Objects).................................................................
1612:	2.1 Objects: Instances of Classes..........................................................
1613:	A "class" is the "blueprint" for creating an "object". In Java, the class is a way to 
1614:	use code to model "things" using properties and methods. The object is what the class 
1615:	"creates" when the class is made into a specific "object" of that class. The various 
1616:	terms used for this vary but all revolve around the same concepts. The term "object" 
1617:	can also be called a "instance" of the class. The term "properties" can also be 
1618:	called "things about the class", or "descriptors", or "adjectives", or 
1619:	"fields". The term "methods" could also be called "what the class can do", or 
1620:	"actions", or "verbs", or "functions". 
1621:	// Example of a simple class with properties and methods
1622:	class Person {
1623:	    String name;
1624:	    int age;
1625:	    void walk() {
1626:	        // code logic could go here
1627:	    }
1628:	    void talk() {
1629:	        // code logic could go here
1630:	    }
1631:	}
1632:	2.2 Creating and Storing Objects (Instantiation)...........................................
1633:	Methods are a way to break up code into logic modules and it also provides a way to avoid 
1634:	repeating code and be able to reuse sections of code logic. You can think of methods as 
1635:	analogous to "machines" that perform "actions" and you can reuse. They are also analogous to 
1636:	"functions" in math that may take a variable "input" and generate an "answer".  The term 
1637:	"parameter" (and you may have zero, one, or more than one) is the "input" (if needed) to a 
1638:	method that is passed to the method. The value(s) passed are called "argument(s)". When you 
1639:	define the method in the method "signature" line, the round brackets can contain 
1640:	parameters separated by comma (if needed). A method may also give an "output" in the form 
1641:	of its "return" value (which also might not be needed, in which case it is a "void" method).
1642:	A method is "overloaded" if you have more than one method with the exact same name but 
1643:	different parameters. Classes have "constructor" methods that are called when 
1644:	a class is instantiated into an object. Constructor methods do not have a return type 
1645:	(not even the keyword "void"). They must have the exact same name as the class (including a 
1646:	capital letter). They are used to set the properties of the class to starting (or 
1647:	"default") values. If a class has multiple constructor methods, they are said to be 
1648:	overloaded constructors. When a line of code is used to instantiate a class into an instance 
1649:	of that class, the line includes the name of the class, the identifier name of the object, 
1650:	then an equals ("="), then the keyword "new" (which allots new memory for this 
1651:	advanced data type), then a call to a constructor method. If not constructor method 
1652:	is called, then the object references a "null" value until such time it is given a value to 
1653:	reference.
1654:	// Example of a class with constructors and instantiation
1655:	class Person {
1656:	    Person() {
1657:	        // code logic
1658:	    }
1659:	    Person(int age) {
1660:	        // code logic
1661:	    }
1662:	}
1663:	Person person1 = new Person();
1664:	Person person2 = new Person(5);
1665:	2.3 Calling a Void Method..................................................................
1666:	A "non-static" method is a method (meaning a "action", "behaviour", "procedure", 
1667:	or "verb") that does not use the "static" modifier word in the method signature line. 
1668:	A method with no prameters (or "inputs") means the method is defined with empty round 
1669:	brackets "( )". The "behavior" or action the method performs is defined in the body 
1670:	block of the method (between the two curly "{ }" brackets). The A.P. term "procedural 
1671:	abstraction" refers to a programmer being able to call a method without knowing how the 
1672:	method was written (also known as "black box" programming). When methods are "called" 
1673:	the execution flow stops, jumps and runs all the method body (or until a "return" 
1674:	statement) and then returns to the next line of execution after the method call line 
1675:	(or part of a code expression line). Methods can also be called from objects (or 
1676:	"instances") of a class using the dot "." operator. Void method do not return anthing 
1677:	(no "outputs") and use the keyword modifier "void" in the method signature in place of 
1678:	the return type.
1679:	// Examples of methods, parameters, return, and calling
1680:	public void show() {
1681:	    System.out.println("*")
1682:	}
1683:	public void show(char value) {
1684:	    System.out.println(value);
1685:	}
1686:	public int double(int number) {
1687:	    return number * 2;
1688:	} 
1689:	show();
1690:	show('A');
1691:	int answer = double(5);
1692:	2.4 Calling a Void Method with Parameters..................................................
1693:	A "non-static void" methods with parameters is a method with no outputs, but has input(s). 
1694:	This means the method signature has defined parameter(s) within the round brackets "( )" 
1695:	seperated by commas (if necessary). When this type of method is called, the "arguments" 
1696:	passed to this method must be in the same order in terms of data type. A method is 
1697:	"overloaded" when you have two or more methods with the same name but different and 
1698:	distinct parameter lists.
1699:	// Examples of method overloading
1700:	public void show() {
1701:	    System.out.println("*")
1702:	}
1703:	public void show(char value) {
1704:	    System.out.println(value);
1705:	}
1706:	public void show(int value) {
1707:	    System.out.println(value);
1708:	}
1709:	2.5 Calling a Non-void Method..............................................................
1710:	A method that does return a value, defines the return "type" in the method signature and 
1711:	the keyword "return" somewhere in the method body (at least once). When calling a return 
1712:	method, the value returned must be stored (in a variable) or used as part of an expression.
1713:	2.6 String Objects: Concatenation, Literals, and More......................................
1714:	The "String" class allows you to create String variables, concatenate them (join) 
1715:	together and use "built-in" methods of the String class. String literals (contained in 
1716:	quotes "") can be assigned to String variables or concatenated with Strings. String methods 
1717:	do not change the String ("immutable") object. The "+" or the "+=" operators can be used 
1718:	to concatenate Strings (resulting in a new String object). Primitives (like int, double, 
1719:	etc.) can also be concatenated with String objects. Those are now automatically converted 
1720:	to Strings and then concatenated. Escape sequences is the character "\" followed 
1721:	by another character to make certain outputs or changes to a String object. These include: 
1722:	\" for a quote, \\ for a slash, and \n for a new line.
1723:	// Examples of Strings and escape sequences
1724:	String str1 = "cat";
1725:	String str2 = str1 + "ty";
1726:	str1 += str2;
1727:	str2 = "\n" + str1 + "\\" + "\" dog";
1728:	2.7 String Methods.........................................................................
1729:	The "API" or Application Program Interface is a "library" of code that could be imported 
1730:	into a Java project or it could automatically be part of every Java project without needing 
1731:	an import. Classes and libraries are organized into "packages" in Java (also known as 
1732:	"namespaces"). The String class is in the "java.lang" package. Strings are collections 
1733:	of "char" values index from 0 up to the length of the String minus 1 (just like arrays 
1734:	are indexed). String methods used are: the String constructor "String s = new String();", 
1735:	the "length()" method, the "substring(int)" and "substring(int,int)" methods, the 
1736:	"indexOf(String)" method, the "equals(String)" method, and the 
1737:	"compareTo(String)" method.
1738:	// Examples of String methods
1739:	String str3 = new String("chatty");
1740:	// Constructs object with same sequence of characters as str3
1741:	int length = str3.length();
1742:	// Returns the number of characters in a String object
1743:	String str4 = str3.substring(1);
1744:	// Returns substring(from) starting at index "from" to the end
1745:	String str5 = str3.substring(1,3);
1746:	// Returns substring(from, to) starting at index "from" to index "to"
1747:	int index = str3.indexOf("hat");
1748:	// Returns the index of the first occurrence (returns -1 if not found)
1749:	boolean result1 = str3.equals(str4);
1750:	// Returns true if this is equal to other (returns false otherwise)
1751:	int result2 = str3.compareTo(str5);
1752:	// Returns value < 0 if less than other, returns 0 if equal to other,
1753:	// and returns value > 0 if greater than other
1754:	2.8 Wrapper Classes: Integer and Double....................................................
1755:	A "wrapper class" is a class type that is based in a primitive data type. For example the 
1756:	primitive data type "int" has the wrapper class "Integer". Similarily, the "Double" 
1757:	wrapper class, wraps around the "double" primitive type. The wrapper classes (using a 
1758:	capital letter) are part of java.lang and have built-in methods like "parseInt()" and 
1759:	"parseDouble()". Other methods include: "Integer(int)" a constructor, 
1760:	"Double(double)" a constructor, "MIN_VALUE" a constant, "MAX_VALUE", "intValue()", and 
1761:	"doubleValue()". Boxing and unboxing can be done between the wrapper classes and the 
1762:	primitive types (known as "autoboxing"). The term "boxing" means the conversion between 
1763:	primitive types and corresponding wrapper. The term "unboxing" means the conversion 
1764:	from the wrapper class to the primitive type.
1765:	// Example of wrapper classes and methods...
1766:	int     integerPrimitive1 = Integer.parseInt("10");
1767:	double  doublePrimitive1  = Double.parseDouble("1.2");
1768:	Integer integerObject     = new Integer("10");
1769:	Double  doubleObject      = new Double("1.2");
1770:	int     integerPrimitive2 = integerObject.intValue();
1771:	double  doublePrimitive2  = doubleObject.doubleValue();
1772:	int     minInteger        = Integer.MIN_VALUE;
1773:	int     maxInteger        = Integer.MAX_VALUE;
1774:	double  minDouble         = Double.MIN_VALUE;
1775:	double  maxDouble         = Double.MAX_VALUE;
1776:	// Boxing and unboxing...
1777:	int     integerPrimitive3 = integerObject1;
1778:	double  doublePrimitive3  = doubleObject1;
1779:	Integer integerObject2    = integerPrimitive3;
1780:	Double  doubleObject2     = doublePrimitive3;
1781:	2.9 Using the Math Class...................................................................
1782:	The "Math" class is part of the java.lang package and has built-in static methods that can 
1783:	be called. Useful methods include: abs, pow, sqrt, and random. Including manipulating the 
1784:	random method in a formula to define random numbers in a range. Examples of this follow...
1785:	// Examples of the Math class methods and randoms...
1786:	int    value1 = Math.abs(-1);
1787:	double value2 = Math.abs(-1.2);
1788:	double value3 = Math.pow(2,3);
1789:	double value4 = Math.sqrt(9);
1790:	double value5 = Math.random();
1791:	final double HIGH = 10.9d;
1792:	final double LOW  = 5.5d;
1793:	double value6 = (HIGH - LOW + 1.0d) * Math.random() + LOW;
1794:	AP: Unit 5 (Writing Classes)...............................................................
1795:	5.1 Anatomy of a Class.....................................................................
1796:	The properties (attributes) and methods (actions) of a class can be defined in terms of 
1797:	visibility. This means that the keywords "public" and "private" can be used as a 
1798:	modifier in the front of a method signature or at the front of a property declaration line 
1799:	to define the encapsulation level. The public keyword means the property can be accessed (and 
1800:	modified) both inside the class and from other classes outside the class. In terms of methods 
1801:	it means the method can be called within the class (by other methods) and outside the class 
1802:	from other classes using the dot "." operator. Classes and constructor methods are 
1803:	designated public. The concept of "encapsulation" is used to make certain data and actions 
1804:	private and protect them from outside classes and perhaps only allow access through accessor 
1805:	and modifier ("getter" and "setter") methods.
1806:	// Class example private/public properties and methods
1807:	class Apple { 
1808:	    public int number;
1809:	    private double price;
1810:	    public void eat() {
1811:	        // logic here
1812:	    }
1813:	    private void spoil() {
1814:	        // logic here
1815:	    }
1816:	}
1817:	5.2 Constructors...........................................................................
1818:	A constructor method is a special method defined in a class that is called when a class is 
1819:	instantiated into an instance (or "object") of that class. The constructor method has to have 
1820:	the exact same name as the class (including letter case) and no return type (not even the 
1821:	word void). Constructors are usually used to set the initial (or "default") values for the 
1822:	class properties. This can be said to be setting the "state" of the object. If any of the 
1823:	properties (attributes) are another class level instance variable (not a primitive type), 
1824:	then this class is said to have a "has-a" relationship with that class. This can also be 
1825:	called "association" or "composition" between the classes. Constructors can have 
1826:	parameters passed to the class that can be used in setting the initial state. When no 
1827:	constructor is written, Java provides a no-argument constructor, and the instance 
1828:	variables are set to default values.
1829:	// Class example association and constructors
1830:	class Basket {
1831:	    public Apple apple;
1832:	    public Basket() {
1833:	        // logic here
1834:	    }
1835:	    public Basket(Apple apple) {
1836:	        // logic here
1837:	    }
1838:	}
1839:	5.2 Documentation with Comments............................................................
1840:	Comments are a documentation system that allows programmers to leave notes for themselves or 
1841:	other programmers. This can serve several purposes including (but not limited to) 
1842:	documenting names and dates, explaining code logic, working through problem solving logic, 
1843:	and others. In Java, the two forward slashes // allows a comment at the end of a line of code or 
1844:	on its own line. A slash and a star /* opens a comment block which will continue until a star 
1845:	and slash */ closes the comment block. The slash and two stars /** open the JavaDoc style of 
1846:	comment block which many IDEs (e.g. NetBeans) recognize and help with commenting and to create 
1847:	API documentation. Methods should be commented with the method's purpose (a brief description), 
1848:	any pre-conditions (the parameters if any), and post-conditions (the return type if any) of the 
1849:	method.
1850:	// Comments...
1851:	// a standard comment
1852:	/* opens a comment block */
1853:	/** JavaDoc comment block */
1854:	5.4 Accessor Methods.......................................................................
1855:	Accessor methods are the names given to methods in a class that "access" data. this usually 
1856:	means properties of the class that are encapsulated (private). Other names for 
1857:	accessors are "getters" or "get" methods. The method (behaviours, actions, functions, 
1858:	procedures) of a class are accessed with the dot operator (".") after the name of the 
1859:	object (instance of the class). Non-void methods that return a value can then be used as 
1860:	part of a code line expression. The return type of the method must be compatible with any 
1861:	data types (e.g. variables) being used in the expression. If the return type is a class level 
1862:	type then the method returns a reference to the actual object ("return by reference") not a 
1863:	reference to a copy ("return by value") of the actual object. If the "System.out.print" 
1864:	or "System.out.println" methods are called and an object is passed to those methods, the 
1865:	object's "toString()" method is automatically 
1866:	invoked (called) in the output.
1867:	// Examples of calling methods in a class
1868:	class Fighter {
1869:	    private int health;
1870:	    private Weapon weapon;
1871:	    public int getHealth() {
1872:	        return health;
1873:	    }
1874:	    public Weapon getWeapon() {
1875:	        return weapon;
1876:	    }
1877:	}
1878:	Fighter fighter = new Fighter();
1879:	int hp = fighter.health;
1880:	Weapon club = fighter.getWeapon();
1881:	5.5 Mutator Methods........................................................................
1882:	Mutator methods are the name given to methods that "change" a property of a class (usually 
1883:	an encapsulated property). These can be void methods (but are sometimes boolean methods to 
1884:	indicate success or not).
1885:	// Examples of calling mutator methods in a class
1886:	class Fighter {
1887:	    private int health;
1888:	    public int setHealth(int health) {
1889:	        this.health = health;
1890:	    }
1891:	}
1892:	Fighter fighter = new Fighter();
1893:	fighter.setHealth(10);
1894:	5.6 Writing Methods........................................................................
1895:	Methods are written to model an "action". Also known as functions or procedures, methods may 
1896:	or may not have zero, one, or more than one "input(s)" called "parameters" (or empty round 
1897:	brackets if no inputs are required). Methods may have zero (a "void" method) or one "output" 
1898:	known as the return type. If the parameter is a primitive data type, then a copy of the data 
1899:	from the original primitive type is passed to the method ("pass by value"). If the parameter 
1900:	is an advanced data type ("class" level data) then a reference to that object is passed. This 
1901:	means that any changes the method makes to the object will be reflected (unless the object 
1902:	was an immutable object). Because the passed reference object parameter and the original 
1903:	argument object are "linked" they can be referred to as "aliases".
1904:	5.7 Static Variables and Methods...........................................................
1905:	Although they can be called from an object of a class, "static" methods are generally called 
1906:	from the class name itself. Static methods "belong" to the class itself and therefore 
1907:	do not require you to instantiate an object to call a method from that class. The keyword 
1908:	"static" is included as a modifier word in the method signature line. Static methods 
1909:	cannot access or change the values of instance properties of a class but can change/access 
1910:	static properties. Static properties (variables) also "belong" to the class itself 
1911:	and are "shared" by all objects of the class. Static properties can be either public or 
1912:	private and are also declared using the "static" keyword as a modifier for the 
1913:	property. Static properties are used with the class name and then the dot operator and then 
1914:	the name of the property (although they can also be accessed from an object name). 
1915:	// Static properties and methods
1916:	class Fighter {
1917:	    public static int number;
1918:	    public static void attack() {
1919:	        // logic here
1920:	    }
1921:	}
1922:	Fighter.number = 10;
1923:	Fighter.attack();
1924:	5.8 Scope and Access.......................................................................
1925:	Variables can be used throughout code in classes and methods and have a "scope" defining where 
1926:	the variable can be accessed and modified. A "local" variable is one which is defined in a 
1927:	code block like a control structure (a loop or if statement) or a method. The scope of that 
1928:	variable is that internal code block and no other variables can have the same name within 
1929:	that scope. A "global" variable is one declared at the class level and its scope is 
1930:	the entire code module (class). When there is a local variable with the same name as a global 
1931:	variable, the variable name will reference the local variable over the global variable. This 
1932:	could be a potential name conflict. The keyword "this" with the dot operator can make an 
1933:	explicit reference to the global variable over the local variable. 
1934:	// Local and global variable scopes
1935:	class Fighter {
1936:	    public int number;
1937:	    public void attack(int number) {
1938:	        this.number = number;
1939:	    }
1940:	}
1941:	5.9 this Keyword...........................................................................
1942:	The keyword "this" is an explicit reference to the (eventual) object within a class. It 
1943:	refers to the name of an object that will later be instantiated by the class the word this 
1944:	is used within. The word "this" can be used to give explicit control to a global variable 
1945:	or call a class method. The keyword "this" can also be used to pass the current object 
1946:	as an actual parameter in a method call.
1947:	5.10 Ethical and Social Implications of Computing Systems..................................
1948:	The social and ethical considerations of computing and Computer Science are things as 
1949:	an A.P. student you should be aware of. These are not necessarily testable concepts on the 
1950:	A.P. exam. The general ideas of legality, impact, and reliability of computing systems 
1951:	and software should always be considered by programers and Computer Scientists.
1952:	AP: Unit 9 (Inheritance)...................................................................
1953:	9.1 Creating Superclasses and Subclasses...................................................
1954:	When working with the relationships between classes, inheritance is the relationship whereas 
1955:	one class inherits the properties and methods from another class. This means one class acts 
1956:	as the "parent" or "super" class and the other class acts as the "child" or "sub" 
1957:	class. In Java the keyword "extends" is used to initiate inheritance by putting that 
1958:	keyword in the class signature line. This is also called a "is-a" relationship between 
1959:	classes. In other words, a child (sub) class "is-a" parent (super) class. A class can 
1960:	extend only one superclass.// Example of class inheritance
1961:	class Parent {
1962:	    String name;
1963:	}
1964:	class Child extends Parent {
1965:	    int age;
1966:	}
1967:	9.2 Writing Constructors for Subclasses....................................................
1968:	Constructor methods are not inherited by subclasses from the superclass. However, you 
1969:	can call the constructor of a superclass using the keyword "super()" and round brackets. 
1970:	This is called a call to the super-constructor. This call can also include any parameters the 
1971:	constructor/super-constructor needs. This can occur over multiple "levels" of inheritance 
1972:	between classes. When a subclass’s constructor does not explicitly call a superclass’s 
1973:	constructor, Java will call the super-constructor method.
1974:	// Example class constructors and super-constructors
1975:	class Parent {
1976:	    String name;
1977:	    public Parent() {
1978:	         name = "";
1979:	    }
1980:	}
1981:	class Child extends Parent {
1982:	    int age;
1983:	    public Child() {
1984:	         super();
1985:	         age = 0;
1986:	    }
1987:	}
1988:	9.3 Overriding Methods.....................................................................
1989:	// 
1990:	9.4 super Keyword..........................................................................
1991:	// 
1992:	9.5 Creating References Using Inheritance Hierarchies......................................
1993:	// 
1994:	9.6 Polymorphism...........................................................................
1995:	// 
1996:	9.7 Object Superclass......................................................................
1997:	// 
1998:	AP curriculum - Part 3.....................................................................
1999:	AP: Unit 6 (Arrays)........................................................................
2000:	6.1 Array Creation and Access..............................................................
2001:	...
2002:	6.2 Traversing Arrays......................................................................
2003:	...
2004:	6.3 Enhanced for Loop for Arrays...........................................................
2005:	...
2006:	6.4 Developing Algorithms Using Arrays.....................................................
2007:	...
2008:	AP: Unit 8 (2D Arrays).....................................................................
2009:	8.1 2D Arrays..............................................................................
2010:	...
2011:	8.2 Traversing 2D Arrays...................................................................
2012:	...
2013:	AP curriculum - Part 4.....................................................................
2014:	AP: Unit 7 (Array List)....................................................................
2015:	7.1 Introduction to ArrayList..............................................................
2016:	...
2017:	7.2 ArrayList Methods......................................................................
2018:	...
2019:	7.3 Traversing ArrayLists..................................................................
2020:	...
2021:	7.4 Developing Algorithms Using ArrayLists.................................................
2022:	...
2023:	7.5 Searching..............................................................................
2024:	...
2025:	7.6 Sorting................................................................................
2026:	...
2027:	7.7 Ethical Issues Around Data Collection..................................................
2028:	...
2029:	AP: Unit 10 (Recursion)....................................................................
2030:	10.1 Recursion.............................................................................
2031:	...
2032:	10.2 Recursive Searching and Sorting.......................................................
2033:	...
2034:	Computer Science 42SAP practice tests......................................................
2035:	AP Practice Test 1.........................................................................
2036:	// Question 1...
2037:	Consider the following code segment.
2038:	int a = 5;
2039:	int b = 2;
2040:	double c = 3.0;
2041:	System.out.println(5 + a / b * c - 1);
2042:	What is printed when the code segment is executed?
2043:	(A) 0.666666666666667
2044:	(B) 9.0
2045:	(C) 10.0
2046:	(D) 11.5
2047:	(E) 14.0
2048:	// Answer 1...
2049:	C
2050:	// Question 2...
2051:	Which of the following statements assigns a random
2052:	integer between 25 and 60, inclusive to rn?
2053:	(A) int rnA = (int)(Math.random() * 25) + 36;
2054:	(B) int rnB = (int)(Math.random() * 25) + 60;
2055:	(C) int rnC = (int)(Math.random() * 26) + 60;
2056:	(D) int rnD = (int)(Math.random() * 36) + 25;
2057:	(E) int rnE = (int)(Math.random() * 60) + 25;
2058:	// Answer 2...
2059:	A
2060:	D
2061:	// Question 3...
2062:	Which of the following best describes the value
2063:	of the Boolean expression shown below?
2064:	a && !(b || a)
2065:	(A) The value is always true
2066:	(B) The value is always false
2067:	(C) The value is true when a has the value 
    false, and is false otherwise
2068:	(D) The value is true when b has the value 
    false, and is false otherwise
2069:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
2070:	// Answer 3...
2071:	B
2072:	// Question 4...
2073:	Consider the following code segment
2074:	int val = 48;
2075:	int div = 6;
2076:	while((val % 2 == 0) && div > 0) {
2077:	    if (val % div == 0) {
2078:	        System.out.print(val + " ");
2079:	    }
2080:	    val /= 2;
2081:	    div--;
2082:	}
2083:	What is printed when the code segment is executed?
2084:	(A) 48 12 6
2085:	(B) 48 12 6 3
2086:	(C) 48 12 6 3 1
2087:	(D) 48 24 12 6
2088:	(E) 48 24 12 6 3
2089:	// Answer 4...
2090:	A
2091:	// Question 5...
2092:	Which of the following code segments is equivalent to the code below
2093:	if (x >= 1) x = x * 3;
2094:	if (x > 3) x = 0;
2095:	(A) x = 0
2096:	(B) if (x > 1) x = 0;
2097:	(C) if (x > 3) x = 0;
2098:	(D) if (x >= 1) x = 0;
2099:	(E) none of the above
2100:	// Answer 5...
2101:	B
2102:	// Question 6...
2103:	When is the following Boolean expression true
2104:	(a and b are integers)?
2105:	(a < b) && !(b > a)
2106:	(A) Always true
2107:	(B) Never true
2108:	(C) a = b
2109:	(D) a < b
2110:	(E) a > b
2111:	// Answer 6...
2112:	B
2113:	// Question 7...
2114:	Consider the following code segment
2115:	int i = a random number such that 1 <= i <= n;
2116:	for (int a = 2; a <= i; a++)
2117:	    for (int b = 1; b < i; b++)
2118:	        System.out.println("*");
2119:	(A) 0
2120:	(B) 1
2121:	(C) 2
2122:	(D) n - 1
2123:	(E) n - 2
2124:	// Answer 7...
2125:	B
2126:	// Question 8...
2127:	Consider the following code segment
2128:	int p = 5;
2129:	int q = 2;
2130:	int sum = 0;
2131:	while (p <= 8) {
2132:	    sum += p % q;
2133:	    p++;
2134:	    q++;
2135:	}
2136:	(A) 1
2137:	(B) 0
2138:	(C) 13
2139:	(D) 7
2140:	(E) 4
2141:	// Answer 8...
2142:	D
2143:	// Question 9...
2144:	Consider the following code segment
2145:	for (int i = 0; i <= 3; i++) {
2146:	    for (int j = 1; j <= 5; j+=2) {
2147:	        System.out.println("*");
2148:	    }
2149:	}
2150:	(A) 3
2151:	(B) 6
2152:	(C) 9
2153:	(D) 12
2154:	(E) 15
2155:	// Answer 9...
2156:	D
2157:	// Question 10...
2158:	What are the values of a and b after the for loop
2159:	finishes?
2160:	int a = 10;
2161:	int b = 3;
2162:	int t = 0;
2163:	for (int i = 1; i < 4; i++) {
2164:	    t = a;
2165:	    a = i + b;
2166:	    b = t - i;
2167:	}
2168:	(A) a = 5 and b = -2
2169:	(B) a = 6 and b = 7
2170:	(C) a = 6 and b = 3
2171:	(D) a = 12 and b = 1
2172:	(E) a = 5 and b = 8
2173:	// Answer 10...
2174:	E
2175:	AP Practice Test 2.........................................................................
2176:	// Question 1...
2177:	Consider the following class definition
2178:	public class Example
2179:	{
2180:	     private int x;
2181:	     // constructor not shown
2182:	}
2183:	Which of the following is a correct header for a
2184:	method that would return the value of the private
2185:	instance variable x so that it can be used in a
2186:	class other than Example?
2187:	(A) private int getX()
2188:	(B) private void getX()
2189:	(C) public int getX()
2190:	(D) public void getX()
2191:	(E) public void getX(int x)
2192:	// Answer 1...
2193:	C
2194:	// Question 2...
2195:	Consider the following class definitions
2196:	public class Thing1 {
2197:	     public void calc(int n) {
2198:	          n *= 3;
2199:	          System.out.print(n);
2200:	     }
2201:	}
2202:	public class Thing2 extends Thing1 {
2203:	     public void calc(int n) {
2204:	          n += 2;
2205:	          super.calc(n);
2206:	          System.out.print(n);
2207:	     }
2208:	}
2209:	The following code seqment appears in a class
2210:	other than Thing1 or Thing2
2211:	Thing1 t = new Thing2();
2212:	t.calc(2);
2213:	What is printed as a result of executing the
2214:	code segment?
2215:	(A) 4
2216:	(B) 6
2217:	(C) 68
2218:	(D) 124
2219:	(E) 1212
2220:	// Answer 2...
2221:	D
2222:	// Question 3...
2223:	Consider the following class definitions.
2224:	public class Student {
2225:	    public String getFood() {
2226:	        return "Pizza";
2227:	    }
2228:	    public String getInfo() {
2229:	        return "Studying";
2230:	    }
2231:	}
2232:	public class GradStudent extends Student {
2233:	    public String getFood() {
2234:	        return "Taco";
2235:	    }
2236:	    public String getInfo() {
2237:	        super.getInfo();
2238:	        return "Eating";
2239:	    }
2240:	}
2241:	What is printed when the following code is
2242:	executed?
2243:	Student s = new GradStudent();
2244:	System.out.println(s.getInfo());
2245:	(A) Pizza
2246:	(B) Taco
2247:	(C) Studying
2248:	(D) Eating
2249:	(E) Studying
2250:	    Eating
2251:	// Answer 3...
2252:	D
2253:	// Question 4...
2254:	Given the following class declarations:
2255:	public class Car {
2256:	    private String make;
2257:	    public Car(String theMake) {
2258:	        make = theMake;
2259:	    }
2260:	    public String getMake() {
2261:	        return make;
2262:	    }
2263:	}
2264:	public class ElectricCar extends Car {
2265:	    public ElectricCar() {
2266:	        super("Ford");
2267:	    }
2268:	    public ElectricCar(String theMake) {
2269:	        super(theMake);
2270:	    } 
2271:	}
2272:	Which of the following will cause a compile
2273:	time error?
2274:	(A) Car myCar = new Car();
2275:	(B) Car myCar1 = new ElectricCar();
2276:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2277:	(D) Car myCar3 = new Car("Ford");
2278:	(E) Car myCar4 = new ElectricCar("Ford");
2279:	// Answer 4...
2280:	A
2281:	// Question 5...
2282:	Given the following declarations.
2283:	public class Vehicle {
2284:	    public void test(Car x, SportsCar y) { }
2285:	}
2286:	public class Car extends Vehicle {
2287:	}
2288:	public class SportsCar extends Car {
2289:	}
2290:	Also consider the following code that appears
2291:	in a different class.
2292:	Vehicle v = new Vehicle();
2293:	Car c = new Car();
2294:	SportsCar sporty = new SportsCar();
2295:	Which of the following is a correct call to test ?
2296:	(A) v.test(sporty, v);
2297:	(B) sporty.test(c, c);
2298:	(C) v.test(sporty, c);
2299:	(D) sporty.test(sporty, v);
2300:	(E) c.test(sporty, sporty);
2301:	// Answer 5...
2302:	E
2303:	// Question 6...
2304:	Class C extends class B, which extends class A. 
2305:	Also, all of the three classes implement a public
2306:	method test(). How can a method in an object of
2307:	class C invoke the test() method defined in class
2308:	A (without creating a new instance of class A)?
2309:	(A) test();
2310:	(B) super.super.test();
2311:	(C) super.test();
2312:	(D) this.test();
2313:	(E) There is no way to call a method in a 
2314:	    grandparent class from a grandchild class
2315:	// Answer 6...
2316:	E
2317:	// Question 7...
2318:	Given the following class declarations. Assume
2319:	that Parent p = new Child(); appears in a client
2320:	program. What is the result of the call p.m1();
2321:	public class Parent {
2322:	    public void m1() {
2323:	        System.out.print("pm1");
2324:	        m2();
2325:	    }
2326:	    public void m2() {
2327:	        System.out.print("pm2");
2328:	    }
2329:	}
2330:	public class Child extends Parent {
2331:	    public void m1() {
2332:	        super.m1();
2333:	        System.out.print("cm1");
2334:	    }
2335:	    public void m2() {
2336:	        super.m2();
2337:	        System.out.print("cm2");
2338:	    }
2339:	}
2340:	(A) pm1pm2cm2cm1
2341:	(B) pm1pm2
2342:	(C) pm1pm2cm1cm2
2343:	(D) pm1cm1
2344:	(E) pm1
2345:	// Answer 7...
2346:	pm1pm2cm2cm1// Question 8...
2347:	Given the following class declarations.
2348:	public class Animal {
2349:	    public void eat() {
2350:	        System.out.println("AE");
2351:	    }
2352:	}
2353:	public class Bear extends Animal {
2354:	    public void growl() {
2355:	        System.out.println("BG");
2356:	    }
2357:	}
2358:	Assume the following declaration is in a 
2359:	different class.
2360:	Animal b = new Bear();
2361:	Which of the following will compile without error?
2362:	I.   b.eat();
2363:	II.  b.growl();
2364:	III. ((Bear)b).growl();
2365:	(A) I only
2366:	(B) II only
2367:	(C) III only
2368:	(D) I and III only
2369:	(E) I, II, and III
2370:	// Answer 8...
2371:	B
2372:	// Question 9...
2373:	Consider the following partial class definitions.
2374:	public class C1 {
2375:	    private int num;
2376:	    private String name;
2377:	    public C1(int theNum) {
2378:	        num = theNum
2379:	    } 
2380:	    public C1(String theName) {
2381:	        name = theName;
2382:	    }
2383:	}
2384:	public class C2 extends C1 {
2385:	    // methods not shown
2386:	}
2387:	Which of the following constructors are valid for
2388:	C2?
2389:	I. public C2() { }
2390:	II. public C2(int quan) { super(quan); }
2391:	III. public C2(String label) { super(label); }
2392:	(A) All three are valid
2393:	(B) II only
2394:	(C) III only
2395:	(D) II and III
2396:	(E) None are valid
2397:	// Answer 9...
2398:	D
2399:	// Question 10...
2400:	Given the following class definition. What are 
2401:	the values of x, y, and z just before method2
2402:	returns?
2403:	public class Class1 {
2404:	    public int method1(int a, int b) {
2405:	        int temp = a;
2406:	        a = b;
2407:	        b = temp;
2408:	        return b;
2409:	    }  
2410:	    public void method2() {
2411:	        int x = 3;
2412:	        int y = 5;
2413:	        int z = method1(x, y);
2414:	    }
2415:	}
2416:	(A) x=3,y=3,z=3
2417:	(B) x=3,y=5,z=3
2418:	(C) x=5,y=3,z=5
2419:	(D) x=5,y=3,z=3
2420:	(E) x=3,y=5,z=5
2421:	// Answer 10...
2422:	B
2423:	AP Practice Test 3.........................................................................
2424:	// Section 1...
2425:	For the next two Free response questions, 
2426:	refer to the description below...
2427:	A travel agency maintains a list of information 
2428:	about airline flights. Flight information 
2429:	includes a departure time and an arrival time.
2430:	You may assume that the two times occur on the 
2431:	same day. These times are represented by 
2432:	objects of the Time class. The declaration for
2433:	the Time class is shown below. It includes a 
2434:	method which returns the difference (in minutes)
2435:	between the current Time object and another Time
2436:	object. 
2437:	public class Time {
2438:	     /** 
2439:	      * @return difference, in minutes, between this
2440:	      * time and other; difference is negative
2441:	      * if other is earlier than this time
2442:	      */
2443:	     public int minutesUntil(Time other) {
2444:	          /* implementation not shown */
2445:	     }
2446:	     // There may be instance variables, constructors,
2447:	     // and methods that are not shown.
2448:	}
2449:	For example, assume that t1 and t2 are Time 
2450:	objects where t1 represents 1:00 p.m. and t2 
2451:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
2452:	will return 75 and the call t2.minutesUntil(t1) 
2453:	will return -75. The declaration for the Flight class 
2454:	is shown below. It has methods to access the 
2455:	departure time and the arrival time of a flight. 
2456:	You may assume that the departure time of a 
2457:	flight is earlier than its arrival time.
2458:	public class Flight {
2459:	      /** @return time at which the flight departs */
2460:	      public Time getDepartureTime() {
2461:	           /* implementation not shown */ 
2462:	      }
2463:	      /** @return time at which the flight arrives */
2464:	      public Time getArrivalTime() {
2465:	           /* implementation not shown */ 
2466:	      }
2467:	      // There may be instance variables, constructors, 
2468:	      // and methods that are not shown.
2469:	}
2470:	A trip consists of a sequence of flights and is 
2471:	represented by the Trip class. The Trip class 
2472:	contains a List of Flight objects that are stored 
2473:	in chronological order. You may assume that for 
2474:	each flight after the first flight in the list, 
2475:	the departure time of the flight is later than 
2476:	the arrival time of the preceding flight in the 
2477:	list. A partial declaration of the Trip class is 
2478:	shown below. You will write two methods for the 
2479:	Trip class.
2480:	public class Trip {
2481:	     /** 
2482:	       * The list of flights (if any) that make up 
2483:	       * this trip, stored in chronological order
2484:	       */
2485:	     private List<Flight> flights;
2486:	     /** 
2487:	       * @return the number of minutes from the 
2488:	       * departure of the first flight to the arrival 
2489:	       * of the last flight if there are one or more 
2490:	       * flights in the trip; 0, if there are no 
2491:	       * flights in the trip
2492:	       */
2493:	     public int getDuration() {
2494:	          /* to be implemented in part (a) */ 
2495:	     }
2496:	     /** 
2497:	       * Precondition: the departure time for each 
2498:	       * flight is later than the arrival time of its 
2499:	       * preceding flight
2500:	       * @return the smallest number of minutes 
2501:	       * between the arrival of a flight and the 
2502:	       * departure of the flight immediately after it, 
2503:	       * if there are two or more flights in the 
2504:	       * trip; -1, if there are fewer than two flights 
2505:	       * in the trip
2506:	       */
2507:	     public int getShortestLayover() {
2508:	          /* to be implemented in part (b) */
2509:	     }
2510:	       // There may be instance variables, constructors,
2511:	       // and methods that are not shown
2512:	}
2513:	// Question 1...
2514:	Complete method getDuration below.  
2515:	// An answer could be...
2516:	public int getDuration() {
2517:	    int totalDuration = 0;
2518:	    for (Flight flight : flights) {
2519:	        Time departure = flight.getDepartureTime();
2520:	        Time arrival   = flight.getArrivalTime();
2521:	        int  duration  = departure.minutesUntil(arrival);
2522:	        totalDuration  = totalDuration + duration;
2523:	    }
2524:	    return totalDuration;
2525:	}
2526:	// Question 2...
2527:	Write the Trip method getShortestLayover. A 
2528:	layover is the number of minutes from the arrival 
2529:	of one flight in a trip to the departure of the 
2530:	flight immediately after it. If there are two or 
2531:	more flights in the trip, the method should return 
2532:	the shortest layover of the trip; otherwise, it 
2533:	should return -1. For example, assume that the 
2534:	instance variable flights of a Trip object vacation 
2535:	contains the following flight information.
2536:	          Departure   Arrival   Layover
2537:	            Time      Time     (minutes)
2538:	         +---------+----------+
2539:	Flight 0 | 11:30am |  12:15pm |
2540:	         +---------+----------+ }  60
2541:	Flight 1 |  1:15pm |   3:45pm |
2542:	         +---------+----------+ }  15
2543:	Flight 2 |  4:00pm |   6:45pm |
2544:	         +---------+----------+ }  210
2545:	Flight 3 | 10:15pm |  11:00pm |
2546:	         +---------+----------+
2547:	The call vacation.getShortestLayover() should 
2548:	return 15. Complete method getShortestLayover() 
2549:	below.
2550:	public int getShortestLayover()
2551:	// An answer could be...
2552:	public int getShortestLayover() {
2553:	    if (flights.isEmpty()) return -1;
2554:	    int shortestLayover = Integer.MAX_VALUE;
2555:	    int i = 0;
2556:	    while (i < flights.size()) {
2557:	        Flight currentFlight = flights.get(i);
2558:	        i++;
2559:	        Flight nextFlight    = flights.get(i);
2560:	        Time arrival         = currentFlight.getArrivalTime();
2561:	        Time departure       = nextFlight.getDepartureTime();
2562:	        int layover = Math.abs(arrival.minutesUntil(departure));
2563:	        if (layover < shortestLayover) {
2564:	            shortestLayover = layover;
2565:	        }
2566:	        i++;
2567:	    }
2568:	    return shortestLayover;
2569:	}
2570:	// Section 1...
2571:	For the next three Free response questions, refer 
2572:	to the description below...
2573:	Consider the hierarchy of classes shown in the 
2574:	following diagram
2575:	         +----------+ 
2576:	         |    Pet   |
2577:	         +----------+
2578:	            /    \
2579:	 +----------+    +----------+
2580:	 |    Cat   |    |    Dog   |
2581:	 +----------+    +----------+
2582:	                       \
2583:	                       +----------+
2584:	                       | Loud Dog |
2585:	                       +----------+
2586:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
2587:	a LoudDog 'is-a' Dog. The class Pet is specified 
2588:	as an abstract class as shown in the following 
2589:	declaration. Each Pet has a name that is 
2590:	specified when it is constructed.
2591:	public abstract class Pet {
2592:	    private String name;
2593:	    public Pet(String petName) {
2594:	        name = petName;
2595:	    }
2596:	    public String getName() {
2597:	        return name;
2598:	    }
2599:	    public abstract String speak();
2600:	}
2601:	The subclass Dog has the partial class 
2602:	declaration shown below.
2603:	public class Dog extends Pet {
2604:	    public Dog(String petName) {
2605:	        /* implementation not shown */
2606:	    }
2607:	    public String speak() {
2608:	        /* implementation not shown */
2609:	    }
2610:	}
2611:	// Question 3...
2612:	Given the class hierarchy shown above, write a 
2613:	complete class declaration for the class Cat, 
2614:	including implementations of its constructor 
2615:	and method(s). The Cat method speak returns 
2616:	'meow' when it is invoked.
2617:	// An answer could be...
2618:	public class Cat extends Pet {
2619:	    public Cat(String petName) {
2620:	        super(petName);
2621:	    }
2622:	    public String speak() {
2623:	        return "meow";
2624:	    }
2625:	}
2626:	// Question 4...
2627:	Assume that class Dog has been declared as shown 
2628:	at the beginning of the question. If the String 
2629:	dog-sound is returned by the Dog method speak, 
2630:	then the LoudDog method method speak returns a 
2631:	String containing dog-sound repeated two times. 
2632:	Given the class hierarchy shown previously, 
2633:	write a complete class declaration for the class 
2634:	LoudDog including implementations of its 
2635:	constructor and method(s).
2636:	// An answer could be...
2637:	public class LoudDog extends Dog {
2638:	    public LoudDog(String petName) {
2639:	        super(petName);
2640:	    }
2641:	    public String speak() {
2642:	        return super.speak() + super.speak();
2643:	    }
2644:	}
2645:	// Question 5...
2646:	Consider the following partial declaration of 
2647:	class Kennel
2648:	public class Kennel {
2649:	    private ArrayList<Pet> petList;
2650:	     /**
2651:	      * For every Pet in the kennel, prints the name 
2652:	      * followed by the result of a call to its speak 
2653:	      * method, one line per Pet
2654:	      */
2655:	     public void allSpeak() {
2656:	        /* to be implemented */
2657:	     }
2658:	     // There may be instance variables, constructors, 
2659:	     // and methods that are not shown
2660:	}
2661:	Write the Kennel method allSpeak For each Pet in 
2662:	the kennel, allSpeak prints a line with the name 
2663:	of the Pet followed by the result of a call to 
2664:	its speak method. In writing allSpeak you may use 
2665:	any of the methods defined for any of the classes 
2666:	specified for this problem. Assume that these 
2667:	methods work as specified, regardless of what 
2668:	you wrote in previous questions. Complete method
2669:	allSpeak below
2670:	public void allSpeak()
2671:	// An answer could be...
2672:	public void allSpeak() {
2673:	    for (Pet pet : petList) {
2674:	        System.out.println(pet.getName() + pet.speak());
2675:	    }
2676:	}
2677:	AP Practice Test 4 not running.............................................................
2678:	Computer Science 42SAP Post Secondary Content:.............................................
2679:	Fun Friday (and Thursday) Content:.........................................................
2680:	// Learn about 'error traps'
2681:	Caught ArrayIndexOutOfBoundsException
2682:	// Learn about reading and writing to files
2683:	Defenestration
2684:	~~~ SIMULATED {GUI Frame} DIALOG: Virus ~~~ 
2685:	// Learn about searching
2686:	List/Array is: [Adam, Chylsy, Colton, Foxx, James, Lanze, Manskrit, Miles, Samantha, Scott, Tyler, Wachs]
2687:	Found Wachs
2688:	Linear Search array: Wachs was at 11
2689:	Linear Search list: Wachs was at 11
2690:	Binary Search array: Wachs was at 11
2691:	Binary Search list: Wachs was at 11
2692:	// Learn about sorting
2693:	Sort by Name...............................
2694:	Here are the first 5 people in the list...
2695:	0: 	Aaliyah Bayer	30	0.8704159161139841
2696:	1: 	Aaliyah Bayer	60	1.2568911408577348
2697:	2: 	Aaliyah Bayer	8	3.5124428377689076
2698:	3: 	Aaliyah Bayer	9	2.6363935444171176
2699:	4: 	Aaliyah Bayer	21	0.3524599968441927
2700:	Here are the last 5 people in the list...
2701:	38249995: 	Zoie Stanfield	61	4.197660943863948
2702:	38249996: 	Zoie Stanfield	4	0.5211042072436589
2703:	38249997: 	Zoie Stanfield	101	1.3680101335678863
2704:	38249998: 	Zoie Stanfield	39	2.9612901128856146
2705:	38249999: 	Zoie Stanfield	90	4.054541612683552
2706:	Sort by Age...............................
2707:	Here are the first 5 people in the list...
2708:	0: 	Brodie Ivey	1	3.915649395471514
2709:	1: 	Brodie Ivey	1	0.32192045670543623
2710:	2: 	Katheryn Montez	1	1.3472714357006677
2711:	3: 	Katheryn Montez	1	3.46307197156022
2712:	4: 	Katheryn Montez	1	4.626756329760984
2713:	Here are the last 5 people in the list...
2714:	38249995: 	Raelynn Vickers	120	4.186789050447582
2715:	38249996: 	Angeles Rupp	120	0.1618020244316476
2716:	38249997: 	Raelynn Vickers	120	4.917884787820946
2717:	38249998: 	Angeles Rupp	120	0.7494141488738082
2718:	38249999: 	Raelynn Vickers	120	4.302700431631304
2719:	Sort by IQ...............................
2720:	Here are the first 5 people in the list...
2721:	0: 	Deshaun Leavitt	120	1.1813927836001881E-7
2722:	1: 	Ervin Cullen	10	2.0259460165039656E-7
2723:	2: 	Dana Penn	90	3.948708438006321E-7
2724:	3: 	Alannah Orozco	10	5.70943473610086E-7
2725:	4: 	Maliyah Zeller	64	5.955653409328576E-7
2726:	Here are the last 5 people in the list...
2727:	38249995: 	Paris Adam	56	4.999999778916185
2728:	38249996: 	Guadalupe Breeden	107	4.999999815111625
2729:	38249997: 	Lincoln Thurston	12	4.999999885574306
2730:	38249998: 	Kade Lumpkin	80	4.9999999721270685
2731:	38249999: 	Johnathan Nunez	77	4.999999984919366
2732:	// Student requested exam review topics
2733:	// Start Learning about ArrayList...
2734:	.................................................
2735:	Create (declare) an ArrayList by importing the 
2736:	ArrayList class from the core 'java.util' API
2737:	.................................................
2738:	Method to get the size of the ArrayList...
2739:	(note: with arrays, they use '.length' instead)

2740:	size = 0
2741:	.................................................
2742:	Method to add values dynamically into the
2743:	ArrayList. Note that it will always append the 
2744:	item to the end of the ArrayList

2745:	Operation add() success was true
2746:	ArrayList is now [20]
2747:	.................................................
2748:	Repeating the add operation...

2749:	Add(30): true ArrayList: [20, 30]
2750:	Add(40): true ArrayList: [20, 30, 40]
2751:	Add(50): true ArrayList: [20, 30, 40, 50]
2752:	Add(60): true ArrayList: [20, 30, 40, 50, 60]
2753:	Add(70): true ArrayList: [20, 30, 40, 50, 60, 70]
2754:	.................................................
2755:	Variation on add() with another parameter to 
2756:	indicate an index value (which will add the value 
2757:	and shift all the preceeding values after the 
2758:	index over)

2759:	Add(3,99): ArrayList: [20, 30, 40, 99, 50, 60, 70]
2760:	Add(0,99): ArrayList: [99, 20, 30, 40, 99, 50, 60, 70]
2761:	Add(list.size(),99): ArrayList: [99, 20, 30, 40, 99, 50, 60, 70, 99]
2762:	.................................................
2763:	The get(index) accessor method like  
2764:	int value = array[index]; which retrieves the value
2765:	at the passed index

2766:	get(3) = 40
2767:	get(0) = 99
2768:	get(list.size()-1) = 99
2769:	.................................................
2770:	The set(index,value) mutator method like 
2771:	array[index] = value; mutates (changes) the value 
2772:	at the passed index and returns the previous value 
2773:	at that index

2774:	set(3,1) previously was 40 list is now [99, 20, 30, 1, 99, 50, 60, 70, 99]
2775:	set(0,1) previously was 99 list is now [1, 20, 30, 1, 99, 50, 60, 70, 99]
2776:	set(list.size()-1,1) previously was 99 list is now [1, 20, 30, 1, 99, 50, 60, 70, 1]
2777:	.................................................
2778:	The remove(index) method removes the index value 
2779:	from the ArrayList and adjusts the list to now 
2780:	have one less element. It also returns the item 
2781:	it removes

2782:	list.remove(2) removed 30 list is now [1, 20, 1, 99, 50, 60, 70, 1]
2783:	list.remove(0) removed 1 list is now [20, 1, 99, 50, 60, 70, 1]
2784:	list.remove(list.size()-1) removed 1 list is now [20, 1, 99, 50, 60, 70]
2785:	.................................................
2786:	Traversing an ArrayList with a standard for loop 
2787:	and an enhanced for loop

2788:	for ArrayList = 20
2789:	for ArrayList = 1
2790:	for ArrayList = 99
2791:	for ArrayList = 50
2792:	for ArrayList = 60
2793:	for ArrayList = 70
2794:	enhanced for ArrayList = 20
2795:	enhanced for ArrayList = 1
2796:	enhanced for ArrayList = 99
2797:	enhanced for ArrayList = 50
2798:	enhanced for ArrayList = 60
2799:	enhanced for ArrayList = 70
2800:	.................................................
2801:	All array operations: 

2802:	 - declaring:  int a[] = new int[5];
2803:	 - mutating:   a[2] = 5;
2804:	 - accessing:  int x = a[2];
2805:	 - traversing: for (int i = 0; i < a.length; i++)
2806:	
Can also be performed with ArrayList but as a 
2807:	dynamic data structure:

2808:	 - declaring:  ArrayList<Integer> a = new ArrayList<>();
2809:	 - mutating:   a.set(2,5);
2810:	 - accessing:  int x = a.get(2);
2811:	 - traversing: for (int i = 0; i < a.size(); i++)
2812:	           or: for (Integer integer : list)
2813:	// Completed Learning about ArrayList!
2814:	// Learn about advanced data structures
2815:	// Learn about advanced stacks and queues
2816:	Stack push values: 	55,20,50,13,59,85,54,66,43,48,
.....................
2817:	Top
48
43
66
54
85
59
13
50
20
55
Bottom
2818:	.....................
2819:	pop 48
2820:	pop 43
2821:	pop 66
2822:	pop 54
2823:	pop 85
2824:	pop 59
2825:	pop 13
2826:	pop 50
2827:	pop 20
2828:	.....................
2829:	Top
55
Bottom
2830:	.....................
2831:	Queue enqueue values: 	57,97,20,58,34,92,71,37,65,61,
.....................
2832:	Back 61,65,37,71,92,34,58,20,97,57, Front
2833:	.....................
2834:	dequeue 57
2835:	dequeue 97
2836:	dequeue 20
2837:	dequeue 58
2838:	dequeue 34
2839:	dequeue 92
2840:	dequeue 71
2841:	dequeue 37
2842:	dequeue 65
2843:	.....................
2844:	Back 61, Front
2845:	A version of a list structure
2846:	// Learn about binary trees
2847:	Tree Insert values: 	
Search: 49  = true
2848:	Search: 100 = false
2849:	Pre-order Traversal: 	13,77,44,24,26,68,48,49,87,
Post-order Traversal: 	26,24,49,48,68,44,87,77,13,
In-order Traversal: 	13,24,26,44,48,49,68,77,87,Non-linear data structure
2850:	// Learn about more advanced data structures
2851:	Hash tables, Dictionaries, Graphs, etc.
2852:	More post secondary content:...............................................................
2853:	Permanent Storage Post Secondary Content:..................................................
2854:	// Learn about 'error traps'
2855:	Divide by zero -> java.lang.ArithmeticException: / by zero
2856:	// Create sample data to use
2857:	// Save ONE piece of data to that permanent file
2858:	// Now involve the user to get a file name
2859:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2860:	File already exists!
2861:	// Open file with one line (no user involvment)
2862:	line read was Defenestration
2863:	// Open file with multiple lines (user picks file)
2864:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2865:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
2866:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
2867:	This line read was q ~ pq ~ �
2868:	// Class to save/open one line (no user)
2869:	Before: Defenestration
2870:	After : Defenestration
2871:	// Class to save/open multiple lines (with user)
2872:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2873:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2874:	// Now save/open on a complex data type
2875:	Before: Athlete: Husky: HighSchool: Student: Person
2876:	After:  Athlete: Husky: HighSchool: Student: Person
2877:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2878:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2879:	Stacks and Queues Post Secondary Content:..................................................
2880:	// Create objects for testing...
2881:	// Create and Test a stack object...
2882:	// Test toString, size, isEmpty, and push methods...
2883:	Empty = true	Size = 0	Empty Stack
2884:	// Loop through adding random values
2885:	Empty = false	Size = 1	Stack top -> [henge] <- bottom
2886:	Empty = false	Size = 2	Stack top -> [scour,henge] <- bottom
2887:	Empty = false	Size = 3	Stack top -> [Qatar,scour,henge] <- bottom
2888:	Empty = false	Size = 4	Stack top -> [scoop,Qatar,scour,henge] <- bottom
2889:	Empty = false	Size = 5	Stack top -> [Warde,scoop,Qatar,scour,henge] <- bottom
2890:	Empty = false	Size = 6	Stack top -> [Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2891:	Empty = false	Size = 7	Stack top -> [gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2892:	Empty = false	Size = 8	Stack top -> [pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2893:	Empty = false	Size = 9	Stack top -> [waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2894:	Empty = false	Size = 10	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2895:	// Test clone method...
2896:	Clone stack: Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2897:	// Test equals method...
2898:	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
==
Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2899:	// Now change the copy
2900:	// Now check again
2901:	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
!=
Stack top -> [quint] <- bottom
2902:	// Re-clone the stack, and output
2903:	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2904:	// Text the pop method...
2905:	Clone stack:	Empty = false	Size = 10	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2906:	// Loop through removing values
2907:	Popped -> fines	Empty = false	Size = 9	Stack top -> [waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2908:	Popped -> waker	Empty = false	Size = 8	Stack top -> [pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2909:	Popped -> pages	Empty = false	Size = 7	Stack top -> [gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2910:	Popped -> gravy	Empty = false	Size = 6	Stack top -> [Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2911:	Popped -> Amery	Empty = false	Size = 5	Stack top -> [Warde,scoop,Qatar,scour,henge] <- bottom
2912:	Popped -> Warde	Empty = false	Size = 4	Stack top -> [scoop,Qatar,scour,henge] <- bottom
2913:	Popped -> scoop	Empty = false	Size = 3	Stack top -> [Qatar,scour,henge] <- bottom
2914:	Popped -> Qatar	Empty = false	Size = 2	Stack top -> [scour,henge] <- bottom
2915:	Popped -> scour	Empty = false	Size = 1	Stack top -> [henge] <- bottom
2916:	Popped -> henge	Empty = true	Size = 0	Empty Stack
2917:	Popped -> null	Empty = true	Size = 0	Empty Stack
2918:	// Test peek (top is wrapper no testing needed)...
2919:	Clone Top = null
2920:	Stack Top = fines
2921:	// Test to array and to linked list...
2922:	Linked List 	[fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge]
2923:	Array   	[fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge]
2924:	// Test our constructors...
2925:	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2926:	Stack top -> [fines,waker,pages,gravy,Amery,Warde,scoop,Qatar,scour,henge] <- bottom
2927:	// Test the Queue object...
2928:	// Test toString,size,isEmpty, and enqueue methods...
2929:	Empty = true	Size = 0	Empty Queue
2930:	// Loop through adding random values
2931:	Empty = false	Size = 1	Queue back -> [trove] <- front
2932:	Empty = false	Size = 2	Queue back -> [hurts,trove] <- front
2933:	Empty = false	Size = 3	Queue back -> [holds,hurts,trove] <- front
2934:	Empty = false	Size = 4	Queue back -> [Brana,holds,hurts,trove] <- front
2935:	Empty = false	Size = 5	Queue back -> [Elias,Brana,holds,hurts,trove] <- front
2936:	Empty = false	Size = 6	Queue back -> [ofter,Elias,Brana,holds,hurts,trove] <- front
2937:	Empty = false	Size = 7	Queue back -> [brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2938:	Empty = false	Size = 8	Queue back -> [Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2939:	Empty = false	Size = 9	Queue back -> [rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2940:	Empty = false	Size = 10	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2941:	// Test clone method...
2942:	Clone Queue 			Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2943:	// Test equals method...
2944:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
==
Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2945:	// Now change the duplicate
2946:	// Now check again
2947:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
==
Queue back -> [abaft] <- front
2948:	// Re-clone the queue, and output
2949:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2950:	// Test the dequeue method...
2951:	Clone queue:	Empty = false	Size = 10	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2952:	// Loop through removing values
2953:	Dequeued -> trove	Empty = false	Size = 9	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts] <- front
2954:	Dequeued -> hurts	Empty = false	Size = 8	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds] <- front
2955:	Dequeued -> holds	Empty = false	Size = 7	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana] <- front
2956:	Dequeued -> Brana	Empty = false	Size = 6	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias] <- front
2957:	Dequeued -> Elias	Empty = false	Size = 5	Queue back -> [moses,rangy,Nevin,brews,ofter] <- front
2958:	Dequeued -> ofter	Empty = false	Size = 4	Queue back -> [moses,rangy,Nevin,brews] <- front
2959:	Dequeued -> brews	Empty = false	Size = 3	Queue back -> [moses,rangy,Nevin] <- front
2960:	Dequeued -> Nevin	Empty = false	Size = 2	Queue back -> [moses,rangy] <- front
2961:	Dequeued -> rangy	Empty = false	Size = 1	Queue back -> [moses] <- front
2962:	Dequeued -> moses	Empty = true	Size = 0	Empty Queue
2963:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
2964:	// Test front and back...
2965:	Clone Front = null
2966:	Queue Front = trove
2967:	Clone Back  = null
2968:	Queue Back  = moses
2969:	// Test to array and to linked list...
2970:	Linked List 	[moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove]
2971:	Array   	[moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove]
2972:	// Test our constructors...
2973:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2974:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2975:	// Constructors from stack to queue (and back)...
2976:	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front	 into 	Stack top -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- bottom
2977:	Stack top -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- bottom	 into 	Queue back -> [moses,rangy,Nevin,brews,ofter,Elias,Brana,holds,hurts,trove] <- front
2978:	Searching and Sorting Post Secondary Content:..............................................
2979:	// For the I.B. Exam, you only need to know:
2980:	// Search: linear search and binary search
2981:	// Sort: bubble sort and the selection sort
2982:	// Create some constants (edges) for the data
2983:	// Create some random data to search through and sort
2984:	// Including edge cases to test
2985:	// Create data to store the results...
2986:	// The simpliest of searches
2987:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2988:	// Now the linear search on all test data
2989:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2990:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2991:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2992:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2993:	Array [19,3,41,98,34,74,13,96,94,99,51,74,61,22,53,10,54,55,26,54,58,55,42,24,71,72,10,63,47,67,78,97,77,96,25,80,67,97,37,73,22,52,3,7,14,10,48,69,2,100,4,62,19,9,80,73,87,37,5,19,93,78,62,8,1,28,74, ... (line shortened) ...
2994:	// Simple sort...
2995:	Sorted Array: 	[1,1,2,3,3,4,5,6,7,8,9,10,10,10,12,13,14,14,19,19,19,22,22,22,24,25,26,28,30,32,32,34,34,36,37,37,38,41,41,42,42,42,47,48,49,49,51,52,52,53,54,54,54,55,55,56,58,60,61,62,62,63,67,67,69, ... (line shortened) ...
2996:	// We will re-scramble array for further testing
2997:	Sorted Array: 	[69,1,88,52,14,59,42,95,79,89,89,19,89,66,97,96,22,18,43,18,64,27,19,59,43,39,51,29,42,77,31,71,99,7,57,40,70,70,93,13,83,69,5,23,47,91,69,42,28,79,0,71,14,4,35,90,63,24,38,54,94,23,74, ... (line shortened) ...
2998:	// Now bubble sort (from bubbles rising from water)
2999:	Original Array 	[69,1,88,52,14,59,42,95,79,89,89,19,89,66,97,96,22,18,43,18,64,27,19,59,43,39,51,29,42,77,31,71,99,7,57,40,70,70,93,13,83,69,5,23,47,91,69,42,28,79,0,71,14,4,35,90,63,24,38,54,94,23,74 ... (line shortened) ...
3000:	// Now selection sort (from selecting the smallest)
3001:	Original Array 	[69,1,88,52,14,59,42,95,79,89,89,19,89,66,97,96,22,18,43,18,64,27,19,59,43,39,51,29,42,77,31,71,99,7,57,40,70,70,93,13,83,69,5,23,47,91,69,42,28,79,0,71,14,4,35,90,63,24,38,54,94,23,74 ... (line shortened) ...
3002:	// Now binary search (named after two or dividing)
3003:	// NOTE: binary search can only happen on sorted list
3004:	// Redo some of the test data...
3005:	Array [0,1,4,5,6,7,10,13,14,14,15,18,18,19,19,21,22,23,23,23,24,27,28,28,29,29,31,31,32,35,36,38,39,40,40,41,42,42,42,43,43,46,47,48,50,51,51,52,54,54,54,57,57,58,59,59,60,61,63,64,65,66,68,68,69,69,6 ... (line shortened) ...
3006:	Array [0,1,4,5,6,7,10,13,14,14,15,18,18,19,19,21,22,23,23,23,24,27,28,28,29,29,31,31,32,35,36,38,39,40,40,41,42,42,42,43,43,46,47,48,50,51,51,52,54,54,54,57,57,58,59,59,60,61,63,64,65,66,68,68,69,69,6 ... (line shortened) ...
3007:	Array [0,1,4,5,6,7,10,13,14,14,15,18,18,19,19,21,22,23,23,23,24,27,28,28,29,29,31,31,32,35,36,38,39,40,40,41,42,42,42,43,43,46,47,48,50,51,51,52,54,54,54,57,57,58,59,59,60,61,63,64,65,66,68,68,69,69,6 ... (line shortened) ...
3008:	Array [0,1,4,5,6,7,10,13,14,14,15,18,18,19,19,21,22,23,23,23,24,27,28,28,29,29,31,31,32,35,36,38,39,40,40,41,42,42,42,43,43,46,47,48,50,51,51,52,54,54,54,57,57,58,59,59,60,61,63,64,65,66,68,68,69,69,6 ... (line shortened) ...
3009:	Array [0,1,4,5,6,7,10,13,14,14,15,18,18,19,19,21,22,23,23,23,24,27,28,28,29,29,31,31,32,35,36,38,39,40,40,41,42,42,42,43,43,46,47,48,50,51,51,52,54,54,54,57,57,58,59,59,60,61,63,64,65,66,68,68,69,69,6 ... (line shortened) ...
3010:	// Use class for searching and sorting
3011:	// Create random linked list data
3012:	// Create random array data
3013:	// Place all test cases into another linked list
3014:	// Execute the linear search on all list test data...
3015:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3016:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3017:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3018:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3019:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3020:	// Execute the linear search on all array test data...
3021:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3022:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3023:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3024:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3025:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3026:	// Execute all the sorts on all test data...
3027:	// Bubble sort LinkedList data...
3028:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3029:	// Bubble sort array data...
3030:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3031:	// Selection sort LinkedList data...
3032:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3033:	// Selection sort array data...
3034:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3035:	// Shell sort LinkedList data...
3036:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3037:	// Shell sort array data...
3038:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3039:	// Insertion sort LinkedList data...
3040:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3041:	// Insertion sort array data...
3042:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3043:	// Quick sort LinkedList data...
3044:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3045:	// Quick sort array data...
3046:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3047:	// Merge sort LinkedList data...
3048:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3049:	// Merge sort array data...
3050:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3051:	// Heap sort LinkedList data...
3052:	Before: 	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,li ... (line shortened) ...
3053:	// Heap sort array data...
3054:	Before: 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd, ... (line shortened) ...
3055:	// Execute the binary search on all List test data...
3056:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3057:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3058:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3059:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3060:	Linked List 	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,c ... (line shortened) ...
3061:	// Execute the binary search on all Array test data...
3062:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3063:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3064:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3065:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3066:	[Vick,Vera,kcal,ahas,hull,dang,nabs,Anet,tole,Susi,meat,pays,wait,veto,mike,gobs,arid,Burg,Dori,heck,ludo,etas,wino,wonk,cuff,jinx,jilt,pugs,vivo,gist,Kara,encl,Byrd,jigs,cine,lisp,gnus,curd,ency,goad ... (line shortened) ...
3067:	Binary Trees Post Secondary Content:.......................................................
3068:	// Constants/variables for creating random values...
3069:	// Creating some TreeNode objects...
3070:	// Linking the TreeNodes...
3071:	// Testing TreeNode equals...
3072:	// Testing TreeNode toString...
3073:	59
3074:	65
3075:	21
3076:	// Creating a Tree object...
3077:	// Test the insert method...
3078:	// Insert one more...
3079:	// Test the search of the tree...
3080:	Should be found     = true
3081:	Should NOT be found = false
3082:	// Test toString() and pre, post, in order traversals
3083:	Binary Tree:
Order: Linked List 	[16,23,90,65,49,31]
Pre:   Linked List 	[16,23,90,65,49,31]
Post:  Linked List 	[31,49,65,90,23,16]
In:    Linked List 	[16,23,31,49,65,90]
3084:	// Building second tree (test clone) and test equals
3085:	1st tree -> Linked List 	[16,23,31,49,65,90]
3086:	2nd tree -> Linked List 	[28,52,64,81,89,99]
3087:	1st!=2nd
3088:	// Building a third tree (test clone) and test equals
3089:	1st tree -> Linked List 	[16,23,31,49,65,90]
3090:	3rd tree -> Linked List 	[16,23,31,49,65,90]
3091:	1st==3rd
3092:	// Build all our data structures from each other...
3093:	// Create variable objects...
3094:	// Create array from variables...
3095:	// Create LinkedList from array...
3096:	// Create Stack from LinkedList...
3097:	// Create Queue from Stack...
3098:	// Create Tree from Queue...
3099:	// Output variables,array,list,stack,queue,tree...
3100:	occam
3101:	brads
3102:	other
3103:	lepta
3104:	olsen
3105:	[occam,brads,other,lepta,olsen]
3106:	Linked List 	[occam,brads,other,lepta,olsen]
3107:	Stack top -> [occam,brads,other,lepta,olsen] <- bottom
3108:	Queue back -> [occam,brads,other,lepta,olsen] <- front
3109:	Binary Tree:
Order: Linked List 	[occam,brads,other,lepta,olsen]
Pre:   Linked List 	[occam,brads,lepta,other,olsen]
Post:  Linked List 	[lepta,brads,olsen,other,occam]
In:    Linked List 	[brads,lept ... (line shortened) ...
3110:	// Now re-building queue from tree
3111:	// Now re-building stack from queue
3112:	// Now re-building LinkedList from stack...
3113:	// Now re-building array from LinkedList...
3114:	// Output array,list,stack,queue,tree again...
3115:	[brads,lepta,occam,olsen,other]
3116:	Linked List 	[brads,lepta,occam,olsen,other]
3117:	Stack top -> [brads,lepta,occam,olsen,other] <- bottom
3118:	Queue back -> [brads,lepta,occam,olsen,other] <- front
3119:	Binary Tree:
Order: Linked List 	[occam,brads,other,lepta,olsen]
Pre:   Linked List 	[occam,brads,lepta,other,olsen]
Post:  Linked List 	[lepta,brads,olsen,other,occam]
In:    Linked List 	[brads,lept ... (line shortened) ...
