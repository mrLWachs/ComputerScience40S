1:	Mr. Wachs Computer Science testing started......................................................
2:	Computer Science 42SAP starting......................................................
3:	Computer Science 42SAP curriculum content starting......................................................
4:	AP curriculum - Part 1 Test started......................................................
5:	AP: Unit 1 (Primitive Types) started......................................................
6:	// 1.1 Why Programming? Why Java?
7:	...
8:	System.out.print outputs text to the screen and System.out.println outputs with a line break
9:	...
10:	More specifically, the code word "System" refers to the "computer system" and the 
11:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
12:	methods (or "actions") that take the string literal (which is the word or words in between 
13:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
14:	will take the string literal and output it to the default output device - that being the 
15:	computer screen.
16:	...
17:	// 1.2 Variables and Data Types
18:	...
19:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
20:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
21:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
22:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
23:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
24:	variable can only be one type and only store that specified type of data. However, the data 
25:	itself can change (or "vary") after the initial declaration. Examples of this are below...
26:	...
27:	// Variables declared and assigned initial ("starting") values:
28:	boolean a = true;
29:	int     b = 0;
30:	double  c = 1.0;
31:	char    d = 'A';
32:	// Variables content changes ("reassigned"):
33:	a = false;
34:	b = 1;
35:	c = 1.1;
36:	d = 'B';
37:	...
38:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
39:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
40:	given the initial value when declared (or initialized) and that value stays locked. These 
41:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
42:	the name. Final variables are more efficient for a number of reasons including ease of code 
43:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
44:	are below...
45:	// Constants (finals) declared (initialized)
46:	final boolean FOUND  = true;
47:	final int     VALUE  = 1;
48:	final double  AMOUNT = 2.5;
49:	final char    CODE   = 'X';
50:	...
51:	// 1.3 Expressions and Assignment Statements
52:	...
53:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
54:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
55:	context, the word "literal" can also mean a number (like "5"). This usually involves 
56:	variable types int and double (the number types) // 1.4 Compound Assignment Operators
57:	// 1.5 Casting and Ranges of Variables
58:	AP: Unit 1 (Primitive Types) completed!...................................................
59:	AP: Unit 3 (Boolean Expressions And If Statements) started......................................................
60:	// 3.1 Boolean Expressions
61:	// 3.2 if Statements and Control Flow
62:	// 3.3 if-else Statements
63:	// 3.4 else if Statements
64:	// 3.5 Compound Boolean Expressions
65:	// 3.6 Equivalent Boolean Expressions
66:	// 3.7 Comparing Objects
67:	AP: Unit 3 (Boolean Expressions And If Statements) completed!...................................................
68:	AP: Unit 4 (Iteration) started......................................................
69:	// 4.1 while Loops
70:	// 4.2 for Loops
71:	// 4.3 Developing Algorithms Using Strings
72:	// 4.4 Nested Iteration
73:	// 4.5 Informal Code Analysis
74:	AP: Unit 4 (Iteration) completed!...................................................
75:	AP curriculum - Part 1 Test completed!...................................................
76:	AP curriculum - Part 2 Test started......................................................
77:	AP: Unit 2 (Using Objects) started......................................................
78:	// 2.1 Objects: Instances of Classes
79:	// 2.2 Creating and Storing Objects (Instantiation)
80:	// 2.3 Calling a Void Method
81:	// 2.4 Calling a Void Method with Parameters
82:	// 2.5 Calling a Non-void Method
83:	// 2.6 String Objects: Concatenation, Literals, and More
84:	// 2.7 String Methods
85:	// 2.8 Wrapper Classes: Integer and Double
86:	// 2.9 Using the Math Class
87:	AP: Unit 2 (Using Objects) completed!...................................................
88:	AP: Unit 5 (Writing Classes) started......................................................
89:	// 5.1 Anatomy of a Class
90:	// 5.2 Constructors
91:	// 5.2 Documentation with Comments
92:	// 5.4 Accessor Methods
93:	// 5.5 Mutator Methods
94:	// 5.6 Writing Methods
95:	// 5.7 Static Variables and Methods
96:	// 5.8 Scope and Access
97:	// 5.9 this Keyword
98:	// 5.10 Ethical and Social Implications of Computing Systems
99:	AP: Unit 5 (Writing Classes) completed!...................................................
100:	AP: Unit 9 (Inheritance) started......................................................
101:	// 9.1 Creating Superclasses and Subclasses
102:	// 9.2 Writing Constructors for Subclasses
103:	// 9.3 Overriding Methods
104:	// 9.4 super Keyword
105:	// 9.5 Creating References Using Inheritance Hierarchies
106:	// 9.6 Polymorphism
107:	// 9.7 Object Superclass
108:	AP: Unit 9 (Inheritance) completed!...................................................
109:	AP curriculum - Part 2 Test completed!...................................................
110:	AP curriculum - Part 3 Test started......................................................
111:	AP: Unit 6 (Arrays) started......................................................
112:	// 6.1 Array Creation and Access
113:	// 6.2 Traversing Arrays
114:	// 6.3 Enhanced for Loop for Arrays
115:	// 6.4 Developing Algorithms Using Arrays
116:	AP: Unit 6 (Arrays) completed!...................................................
117:	AP: Unit 8 (2D Arrays) started......................................................
118:	// 8.1 2D Arrays
119:	// 8.2 Traversing 2D Arrays
120:	AP: Unit 8 (2D Arrays) completed!...................................................
121:	AP curriculum - Part 3 Test completed!...................................................
122:	AP curriculum - Part 4 Test started......................................................
123:	AP: Unit 7 (Array List) started......................................................
124:	// 7.1 Introduction to ArrayList
125:	// 7.2 ArrayList Methods
126:	// 7.3 Traversing ArrayLists
127:	// 7.4 Developing Algorithms Using ArrayLists
128:	// 7.5 Searching
129:	// 7.6 Sorting
130:	// 7.7 Ethical Issues Around Data Collection
131:	AP: Unit 7 (Array List) completed!...................................................
132:	AP: Unit 10 (Recursion ) started......................................................
133:	// 10.1 Recursion
134:	// 10.2 Recursive Searching and Sorting
135:	AP: Unit 10 (Recursion ) completed!...................................................
136:	AP curriculum - Part 4 Test completed!...................................................
137:	Computer Science 42SAP curriculum content complete!...................................................
138:	Computer Science 42SAP complete!...................................................
