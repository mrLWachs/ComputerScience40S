1:	Mr. Wachs Computer Science testing started......................................................
2:	Computer Science 30S starting......................................................
3:	~~~ SIMULATED {Input} DIALOG: Select the unit to view examples of... ~~~ 
4:	Hello World
5:	I'm in
6:	 the world
7:	Good-bye world!
8:	Make a quote " 
9:	Make a slash \ 
10:	Make a 	 tab 
11:	Make a new line 
 break 
12:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
13:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
14:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
15:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
16:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
17:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
18:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
19:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
20:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
21:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
22:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
23:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
24:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
25:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
26:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
27:	a = false
28:	b = 1
29:	c = 1.2
30:	d = A
31:	e = apple
32:	x = 10
33:	x = 20
34:	y = 30
35:	y = 30
36:	x = 28
37:	y = 5
38:	z = 3
39:	3.141592658389, 99, Y, true, Wachs
40:	f = 25
41:	g = 25.0
42:	g = 25.999999999999
43:	h = 25
44:	k = 2.99999999
45:	l = 2
46:	m = 2.0
47:	n = A
48:	o = 65
49:	p = F
50:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
51:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
52:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
53:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
54:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
55:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
56:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
57:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
58:	Word hippopotomonsprosesquippedaiophobia is length 35
59:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
60:	answer1 = 3.141592653589793
61:	answer2 = 0.8775825618903728
62:	answer3 = 1.0
63:	answer4 = 125.0
64:	answer5 = 3.0
65:	answer6 = -0.6931471805599453
66:	seed = 0.851999702409893
67:	low    = 1.0
68:	high   = 10.0
69:	number = 9.51999702409893
70:	value = 9
71:	card is 22
72:	equal
73:	The example is 
74:	less than
75:	!=
76:	W1 kind of == W2
77:	Keep trying
78:	counter = 0
79:	counter = 1
80:	counter = 2
81:	counter = 3
82:	counter = 4
83:	counter = 5
84:	counter = 6
85:	counter = 7
86:	counter = 8
87:	counter = 9
88:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
89:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
90:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
91:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
92:	i = 0
93:	i = 1
94:	i = 2
95:	i = 3
96:	i = 4
97:	i = 5
98:	i = 6
99:	i = 7
100:	i = 8
101:	i = 9
102:	counting = 100
103:	counting = 90
104:	counting = 80
105:	counting = 70
106:	counting = 60
107:	counting = 50
108:	counting = 40
109:	counting = 30
110:	counting = 20
111:	counting = 10
112:	counting = 0
113:	i = 99.789
114:	i = 19.007428571428573
115:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
116:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
117:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
118:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
119:	Starting to Learn methods...
120:	*
121:	*
122:	Phenakistoscope
123:	Volleywood
124:	pancakes
125:	Spider-man
126:	Batman
127:	Dalmations
128:	Dalmations
129:	Dalmations
130:	Dalmations
131:	Dalmations
132:	Dalmations
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Problems
229:	Problems
230:	Problems
231:	Problems
232:	Problems
233:	Problems
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Number is 7
328:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
329:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
330:	Completed Learning Methods!
331:	Start learning arrays...
332:	333
333:	666
334:	666
335:	0
336:	0
337:	0
338:	0
339:	0
340:	0
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	333
434:	0 = 666
435:	1 = 0
436:	2 = 0
437:	3 = 0
438:	4 = 0
439:	5 = 0
440:	6 = 0
441:	7 = 0
442:	8 = 0
443:	9 = 0
444:	10 = 0
445:	11 = 0
446:	12 = 0
447:	13 = 0
448:	14 = 0
449:	15 = 0
450:	16 = 0
451:	17 = 0
452:	18 = 0
453:	19 = 0
454:	20 = 0
455:	21 = 0
456:	22 = 0
457:	23 = 0
458:	24 = 0
459:	25 = 0
460:	26 = 0
461:	27 = 0
462:	28 = 0
463:	29 = 0
464:	30 = 0
465:	31 = 0
466:	32 = 0
467:	33 = 0
468:	34 = 0
469:	35 = 0
470:	36 = 0
471:	37 = 0
472:	38 = 0
473:	39 = 0
474:	40 = 0
475:	41 = 0
476:	42 = 0
477:	43 = 0
478:	44 = 0
479:	45 = 0
480:	46 = 0
481:	47 = 0
482:	48 = 0
483:	49 = 0
484:	50 = 0
485:	51 = 0
486:	52 = 0
487:	53 = 0
488:	54 = 0
489:	55 = 0
490:	56 = 0
491:	57 = 0
492:	58 = 0
493:	59 = 0
494:	60 = 0
495:	61 = 0
496:	62 = 0
497:	63 = 0
498:	64 = 0
499:	65 = 0
500:	66 = 0
501:	67 = 0
502:	68 = 0
503:	69 = 0
504:	70 = 0
505:	71 = 0
506:	72 = 0
507:	73 = 0
508:	74 = 0
509:	75 = 0
510:	76 = 0
511:	77 = 0
512:	78 = 0
513:	79 = 0
514:	80 = 0
515:	81 = 0
516:	82 = 0
517:	83 = 0
518:	84 = 0
519:	85 = 0
520:	86 = 0
521:	87 = 0
522:	88 = 0
523:	89 = 0
524:	90 = 0
525:	91 = 0
526:	92 = 0
527:	93 = 0
528:	94 = 0
529:	95 = 0
530:	96 = 0
531:	97 = 0
532:	98 = 0
533:	99 = 333
534:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
535:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
536:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
537:	~~~ SIMULATED {Message} DIALOG: [10,8,10,7,7,9,10,6,1,3,7,9,3,8,4,1,4,5,5,10,8,4,10,2,1,5,3,7,8,5,9,10,10,6,2,4,5,7,7,9,1,2,1,6,10,5,2,3,6,10,] ~~~ 
538:	Random character was S
539:	c h 6 $ y \ - Y * , t V 7 y ; G E 2 o Q [ " $ % K V m w D + 
_ q K | I / f b { S m ? / $ w g C ( 7 d A X | / \ @ l W | Q 
4 0 \ O Q B W V l & ; A x ) L & ' 6 R J { ~ | n P i # : P 2 
c } o L y f s = J ... (line shortened) ...
540:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
541:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
542:	X O X 
O X O 
X O X 

543:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
544:	Completed learning arrays!
545:	Start Learning classes...
546:	Complete Learning classes
547:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
548:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
549:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
550:	Computer Science 30S complete!...................................................
551:	Computer Science 40S starting......................................................
552:	
Recursion test started...

553:	Recursive factorials............................
554:	-1 factorial = 1
555:	0 factorial = 1
556:	1 factorial = 1
557:	2 factorial = 2
558:	3 factorial = 6
559:	4 factorial = 24
560:	5 factorial = 120
561:	6 factorial = 720
562:	7 factorial = 5040
563:	8 factorial = 40320
564:	9 factorial = 362880
565:	10 factorial = 3628800
566:	11 factorial = 39916800
567:	12 factorial = 479001600
568:	13 factorial = 6227020800
569:	14 factorial = 87178291200
570:	15 factorial = 1307674368000
571:	16 factorial = 20922789888000
572:	17 factorial = 355687428096000
573:	18 factorial = 6402373705728000
574:	19 factorial = 121645100408832000
575:	20 factorial = 2432902008176640000
576:	Recursive powers................................
577:	-5 to the exponent -5 = -3.2E-4
578:	-4 to the exponent -5 = -9.765625E-4
579:	-3 to the exponent -5 = -0.00411522633744856
580:	-2 to the exponent -5 = -0.03125
581:	-1 to the exponent -5 = -1.0
582:	0 to the exponent -5 = 4.9E-324
583:	1 to the exponent -5 = 1.0
584:	2 to the exponent -5 = 0.03125
585:	3 to the exponent -5 = 0.00411522633744856
586:	4 to the exponent -5 = 9.765625E-4
587:	5 to the exponent -5 = 3.2E-4
588:	6 to the exponent -5 = 1.286008230452675E-4
589:	7 to the exponent -5 = 5.9499018266198606E-5
590:	8 to the exponent -5 = 3.0517578125E-5
591:	9 to the exponent -5 = 1.6935087808430286E-5
592:	10 to the exponent -5 = 1.0E-5
593:	-5 to the exponent -4 = 0.0016
594:	-4 to the exponent -4 = 0.00390625
595:	-3 to the exponent -4 = 0.012345679012345678
596:	-2 to the exponent -4 = 0.0625
597:	-1 to the exponent -4 = 1.0
598:	0 to the exponent -4 = 4.9E-324
599:	1 to the exponent -4 = 1.0
600:	2 to the exponent -4 = 0.0625
601:	3 to the exponent -4 = 0.012345679012345678
602:	4 to the exponent -4 = 0.00390625
603:	5 to the exponent -4 = 0.0016
604:	6 to the exponent -4 = 7.716049382716049E-4
605:	7 to the exponent -4 = 4.1649312786339027E-4
606:	8 to the exponent -4 = 2.44140625E-4
607:	9 to the exponent -4 = 1.5241579027587258E-4
608:	10 to the exponent -4 = 1.0E-4
609:	-5 to the exponent -3 = -0.008
610:	-4 to the exponent -3 = -0.015625
611:	-3 to the exponent -3 = -0.037037037037037035
612:	-2 to the exponent -3 = -0.125
613:	-1 to the exponent -3 = -1.0
614:	0 to the exponent -3 = 4.9E-324
615:	1 to the exponent -3 = 1.0
616:	2 to the exponent -3 = 0.125
617:	3 to the exponent -3 = 0.037037037037037035
618:	4 to the exponent -3 = 0.015625
619:	5 to the exponent -3 = 0.008
620:	6 to the exponent -3 = 0.004629629629629629
621:	7 to the exponent -3 = 0.0029154518950437317
622:	8 to the exponent -3 = 0.001953125
623:	9 to the exponent -3 = 0.0013717421124828531
624:	10 to the exponent -3 = 0.001
625:	-5 to the exponent -2 = 0.04
626:	-4 to the exponent -2 = 0.0625
627:	-3 to the exponent -2 = 0.1111111111111111
628:	-2 to the exponent -2 = 0.25
629:	-1 to the exponent -2 = 1.0
630:	0 to the exponent -2 = 4.9E-324
631:	1 to the exponent -2 = 1.0
632:	2 to the exponent -2 = 0.25
633:	3 to the exponent -2 = 0.1111111111111111
634:	4 to the exponent -2 = 0.0625
635:	5 to the exponent -2 = 0.04
636:	6 to the exponent -2 = 0.027777777777777776
637:	7 to the exponent -2 = 0.02040816326530612
638:	8 to the exponent -2 = 0.015625
639:	9 to the exponent -2 = 0.012345679012345678
640:	10 to the exponent -2 = 0.01
641:	-5 to the exponent -1 = -0.2
642:	-4 to the exponent -1 = -0.25
643:	-3 to the exponent -1 = -0.3333333333333333
644:	-2 to the exponent -1 = -0.5
645:	-1 to the exponent -1 = -1.0
646:	0 to the exponent -1 = 4.9E-324
647:	1 to the exponent -1 = 1.0
648:	2 to the exponent -1 = 0.5
649:	3 to the exponent -1 = 0.3333333333333333
650:	4 to the exponent -1 = 0.25
651:	5 to the exponent -1 = 0.2
652:	6 to the exponent -1 = 0.16666666666666666
653:	7 to the exponent -1 = 0.14285714285714285
654:	8 to the exponent -1 = 0.125
655:	9 to the exponent -1 = 0.1111111111111111
656:	10 to the exponent -1 = 0.1
657:	-5 to the exponent 0 = 1.0
658:	-4 to the exponent 0 = 1.0
659:	-3 to the exponent 0 = 1.0
660:	-2 to the exponent 0 = 1.0
661:	-1 to the exponent 0 = 1.0
662:	0 to the exponent 0 = 1.0
663:	1 to the exponent 0 = 1.0
664:	2 to the exponent 0 = 1.0
665:	3 to the exponent 0 = 1.0
666:	4 to the exponent 0 = 1.0
667:	5 to the exponent 0 = 1.0
668:	6 to the exponent 0 = 1.0
669:	7 to the exponent 0 = 1.0
670:	8 to the exponent 0 = 1.0
671:	9 to the exponent 0 = 1.0
672:	10 to the exponent 0 = 1.0
673:	-5 to the exponent 1 = -5.0
674:	-4 to the exponent 1 = -4.0
675:	-3 to the exponent 1 = -3.0
676:	-2 to the exponent 1 = -2.0
677:	-1 to the exponent 1 = -1.0
678:	0 to the exponent 1 = 0.0
679:	1 to the exponent 1 = 1.0
680:	2 to the exponent 1 = 2.0
681:	3 to the exponent 1 = 3.0
682:	4 to the exponent 1 = 4.0
683:	5 to the exponent 1 = 5.0
684:	6 to the exponent 1 = 6.0
685:	7 to the exponent 1 = 7.0
686:	8 to the exponent 1 = 8.0
687:	9 to the exponent 1 = 9.0
688:	10 to the exponent 1 = 10.0
689:	-5 to the exponent 2 = 25.0
690:	-4 to the exponent 2 = 16.0
691:	-3 to the exponent 2 = 9.0
692:	-2 to the exponent 2 = 4.0
693:	-1 to the exponent 2 = 1.0
694:	0 to the exponent 2 = 0.0
695:	1 to the exponent 2 = 1.0
696:	2 to the exponent 2 = 4.0
697:	3 to the exponent 2 = 9.0
698:	4 to the exponent 2 = 16.0
699:	5 to the exponent 2 = 25.0
700:	6 to the exponent 2 = 36.0
701:	7 to the exponent 2 = 49.0
702:	8 to the exponent 2 = 64.0
703:	9 to the exponent 2 = 81.0
704:	10 to the exponent 2 = 100.0
705:	-5 to the exponent 3 = -125.0
706:	-4 to the exponent 3 = -64.0
707:	-3 to the exponent 3 = -27.0
708:	-2 to the exponent 3 = -8.0
709:	-1 to the exponent 3 = -1.0
710:	0 to the exponent 3 = 0.0
711:	1 to the exponent 3 = 1.0
712:	2 to the exponent 3 = 8.0
713:	3 to the exponent 3 = 27.0
714:	4 to the exponent 3 = 64.0
715:	5 to the exponent 3 = 125.0
716:	6 to the exponent 3 = 216.0
717:	7 to the exponent 3 = 343.0
718:	8 to the exponent 3 = 512.0
719:	9 to the exponent 3 = 729.0
720:	10 to the exponent 3 = 1000.0
721:	-5 to the exponent 4 = 625.0
722:	-4 to the exponent 4 = 256.0
723:	-3 to the exponent 4 = 81.0
724:	-2 to the exponent 4 = 16.0
725:	-1 to the exponent 4 = 1.0
726:	0 to the exponent 4 = 0.0
727:	1 to the exponent 4 = 1.0
728:	2 to the exponent 4 = 16.0
729:	3 to the exponent 4 = 81.0
730:	4 to the exponent 4 = 256.0
731:	5 to the exponent 4 = 625.0
732:	6 to the exponent 4 = 1296.0
733:	7 to the exponent 4 = 2401.0
734:	8 to the exponent 4 = 4096.0
735:	9 to the exponent 4 = 6561.0
736:	10 to the exponent 4 = 10000.0
737:	-5 to the exponent 5 = -3125.0
738:	-4 to the exponent 5 = -1024.0
739:	-3 to the exponent 5 = -243.0
740:	-2 to the exponent 5 = -32.0
741:	-1 to the exponent 5 = -1.0
742:	0 to the exponent 5 = 0.0
743:	1 to the exponent 5 = 1.0
744:	2 to the exponent 5 = 32.0
745:	3 to the exponent 5 = 243.0
746:	4 to the exponent 5 = 1024.0
747:	5 to the exponent 5 = 3125.0
748:	6 to the exponent 5 = 7776.0
749:	7 to the exponent 5 = 16807.0
750:	8 to the exponent 5 = 32768.0
751:	9 to the exponent 5 = 59049.0
752:	10 to the exponent 5 = 100000.0
753:	-5 to the exponent 6 = 15625.0
754:	-4 to the exponent 6 = 4096.0
755:	-3 to the exponent 6 = 729.0
756:	-2 to the exponent 6 = 64.0
757:	-1 to the exponent 6 = 1.0
758:	0 to the exponent 6 = 0.0
759:	1 to the exponent 6 = 1.0
760:	2 to the exponent 6 = 64.0
761:	3 to the exponent 6 = 729.0
762:	4 to the exponent 6 = 4096.0
763:	5 to the exponent 6 = 15625.0
764:	6 to the exponent 6 = 46656.0
765:	7 to the exponent 6 = 117649.0
766:	8 to the exponent 6 = 262144.0
767:	9 to the exponent 6 = 531441.0
768:	10 to the exponent 6 = 1000000.0
769:	-5 to the exponent 7 = -78125.0
770:	-4 to the exponent 7 = -16384.0
771:	-3 to the exponent 7 = -2187.0
772:	-2 to the exponent 7 = -128.0
773:	-1 to the exponent 7 = -1.0
774:	0 to the exponent 7 = 0.0
775:	1 to the exponent 7 = 1.0
776:	2 to the exponent 7 = 128.0
777:	3 to the exponent 7 = 2187.0
778:	4 to the exponent 7 = 16384.0
779:	5 to the exponent 7 = 78125.0
780:	6 to the exponent 7 = 279936.0
781:	7 to the exponent 7 = 823543.0
782:	8 to the exponent 7 = 2097152.0
783:	9 to the exponent 7 = 4782969.0
784:	10 to the exponent 7 = 1.0E7
785:	-5 to the exponent 8 = 390625.0
786:	-4 to the exponent 8 = 65536.0
787:	-3 to the exponent 8 = 6561.0
788:	-2 to the exponent 8 = 256.0
789:	-1 to the exponent 8 = 1.0
790:	0 to the exponent 8 = 0.0
791:	1 to the exponent 8 = 1.0
792:	2 to the exponent 8 = 256.0
793:	3 to the exponent 8 = 6561.0
794:	4 to the exponent 8 = 65536.0
795:	5 to the exponent 8 = 390625.0
796:	6 to the exponent 8 = 1679616.0
797:	7 to the exponent 8 = 5764801.0
798:	8 to the exponent 8 = 1.6777216E7
799:	9 to the exponent 8 = 4.3046721E7
800:	10 to the exponent 8 = 1.0E8
801:	-5 to the exponent 9 = -1953125.0
802:	-4 to the exponent 9 = -262144.0
803:	-3 to the exponent 9 = -19683.0
804:	-2 to the exponent 9 = -512.0
805:	-1 to the exponent 9 = -1.0
806:	0 to the exponent 9 = 0.0
807:	1 to the exponent 9 = 1.0
808:	2 to the exponent 9 = 512.0
809:	3 to the exponent 9 = 19683.0
810:	4 to the exponent 9 = 262144.0
811:	5 to the exponent 9 = 1953125.0
812:	6 to the exponent 9 = 1.0077696E7
813:	7 to the exponent 9 = 4.0353607E7
814:	8 to the exponent 9 = 1.34217728E8
815:	9 to the exponent 9 = 3.87420489E8
816:	10 to the exponent 9 = 1.0E9
817:	-5 to the exponent 10 = 9765625.0
818:	-4 to the exponent 10 = 1048576.0
819:	-3 to the exponent 10 = 59049.0
820:	-2 to the exponent 10 = 1024.0
821:	-1 to the exponent 10 = 1.0
822:	0 to the exponent 10 = 0.0
823:	1 to the exponent 10 = 1.0
824:	2 to the exponent 10 = 1024.0
825:	3 to the exponent 10 = 59049.0
826:	4 to the exponent 10 = 1048576.0
827:	5 to the exponent 10 = 9765625.0
828:	6 to the exponent 10 = 6.0466176E7
829:	7 to the exponent 10 = 2.82475249E8
830:	8 to the exponent 10 = 1.073741824E9
831:	9 to the exponent 10 = 3.486784401E9
832:	10 to the exponent 10 = 1.0E10
833:	
Recursion complete!

834:	
Advanced Classes Test started...

835:	unidentified is 0 identifies as unidentified
836:	Per Soney is 0 identifies as unidentified
837:	Per Soney is 1 identifies as unidentified
838:	Booooo!
839:	unidentified is 0 identifies as unidentified
840:	I am a student
841:		 Number: 	1
842:		 GPA:    	0.0
843:	Stu Denty is 0 identifies as unidentified
844:	I am a student
845:		 Number: 	1
846:		 GPA:    	0.0
847:	Stu Denty is 0 identifies as unidentified
848:	I am a student
849:		 Number: 	1
850:		 GPA:    	0.3
851:	Stu Denty is 0 identifies as unidentified
852:	I am a student
853:		 Number: 	1
854:		 GPA:    	0.0
855:	Stu Denty is 0 identifies as unidentified
856:	I am a student
857:		 Number: 	1
858:		 GPA:    	3.0002999999999993
859:	Booooo!
860:	I am a student
861:		 Number: 	1
862:		 GPA:    	3.0002999999999993
863:	Stewie Griffin is 2 identifies as cat
864:	I am a student
865:		 Number: 	1
866:		 GPA:    	0.0
867:	Mr. Teachery is 45 identifies as teacher
868:	Mr. Teachery is 45 identifies as teacher
869:	Mr. Teachery is 45 identifies as teacher
870:	Booooo!
871:	I am a student
872:		 Number: 	1
873:		 GPA:    	3.300299999999999
874:	Stewie Griffin is 2 identifies as cat
875:	I am a student
876:		 Number: 	1
877:		 GPA:    	0.3
878:	O1 = java.lang.Object@31cefde0
879:	O2 = java.lang.Object@439f5b3d
880:	O3 = java.lang.Object@439f5b3d
881:	Person  as string = Person
882:	Student as string = Student: Person
883:	Teacher as string = Teacher: Person
884:	String  as string = squirrel
885:	JOptionPane as string = io.JOptionPane@1d56ce6a
886:	O2==O3
887:	P1==P2
888:	P2==P3
889:	P1==P3
890:	P2==P3
891:	Person is Person
892:	Clone  is Person
893:	Clone is ==
894:	S1 total = 2
895:	S2 total = 2
896:	S3 total = 4
897:	S4 total = 4
898:	S3 total = 9
899:	S4 total = 9
900:	Boom!!!
901:	Boom!!!
902:	Boom!!!
903:	Boom!!!
904:	Boom!!!
905:	Boom!!!
906:	Doctor: Person
907:	DiskJockey: Person
908:	MrWachs: Teacher: Person
909:	Piper: HighSchool: Student: Person
910:	Husky: HighSchool: Student: Person
911:	Athlete: Husky: HighSchool: Student: Person
912:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
913:	Grill on the BBQ
914:	Mr. Lawrence Wachs is eating Protein it was Savory
915:	unidentified is eating Apple from Do not eat!
916:	Round 1...
917:	Jock has signed the form!
918:	Round 2...
919:	Jock has scored
920:	Jock has scored
921:	St. Pauls has scored
922:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
923:	Jock SLAPS St. Pauls
924:	Round 3...
925:	Jock has scored
926:	Jock has scored
927:	St. Pauls has scored
928:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
929:	Round 4...
930:	Jock has scored
931:	Jock has scored
932:	St. Pauls has scored
933:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
934:	Hard core ironing of clothes!
935:	Jock wins!
936:	Grill on the BBQ
937:	Jock is eating Protein it was Savory
938:	Class name: Boolean, Hash Code: 1231, To String: true
939:	Class name: Integer, Hash Code: 0, To String: 0
940:	Class name: Double, Hash Code: 300063655, To String: 3.14
941:	Class name: Character, Hash Code: 97, To String: a
942:	Class name: String, Hash Code: 3556498, To String: test
943:	Class name: Athlete, Hash Code: 1368884364, To String: Athlete: Husky: HighSchool: Student: Person
944:	Class name: JOptionPane, Hash Code: 401625763, To String: io.JOptionPane@17f052a3
945:	Class name: Object, Hash Code: 772777427, To String: java.lang.Object@2e0fa5d3
946:	true
947:	0
948:	3.14
949:	a
950:	test
951:	Athlete: Husky: HighSchool: Student: Person
952:	Class name: Boolean, Hash Code: 1231, To String: true
953:	Class name: Integer, Hash Code: 0, To String: 0
954:	Class name: Double, Hash Code: 300063655, To String: 3.14
955:	Class name: Character, Hash Code: 97, To String: a
956:	Class name: String, Hash Code: 3556498, To String: test
957:	Class name: Athlete, Hash Code: 1368884364, To String: Athlete: Husky: HighSchool: Student: Person
958:	Home Owner:
959:	Mr. Lawrence Wachs
960:	And the contents...
961:	testing.cs40s.advancedclasses.Meeting@5010be6
962:	Mr. Lawrence Wachs is eating Apple from Do not eat!
963:	Grill on the BBQ
964:	Mr. Lawrence Wachs is eating Protein it was Savory
965:	
Advanced Classes Test complete!

966:	
Collections testing begins...

967:	
Testing Node constructors....................

968:	
Testing Node toString()......................

969:	Node a = null
970:	Node b = Sass
971:	Node c = Pros
972:	Node d = Joes
973:	
Testing Node clone().........................

974:	Node e = null
975:	Node f = Sass
976:	Node g = Pros
977:	Node h = Joes
978:	
Testing Node equal().........................

979:	Node a == b? -> false
980:	Node b == c? -> false
981:	Node c == d? -> false
982:	Node d == d? -> true
983:	Node e == a? -> false
984:	Node f == b? -> true
985:	Node g == c? -> true
986:	Node h == d? -> true
987:	
Testing Node finalize()......................

988:	Node a = null
989:	Node b = Sass
990:	Node c = Pros
991:	Node d = Joes
992:	Node e = null
993:	Node f = Sass
994:	Node g = Pros
995:	Node h = Joes
996:	Node a = null
997:	Node b = null
998:	Node c = null
999:	Node d = null
1000:	Node e = null
1001:	Node f = null
1002:	Node g = null
1003:	Node h = null
1004:	
Testing default LinkedList constructor.......

1005:	
Testing toString, empty, size methods........

1006:	L1 toString -> Empty LinkedList
1007:	L2 toString -> Empty LinkedList
1008:	L1 empty? -> true
1009:	L2 empty? -> true
1010:	L1 size -> 0
1011:	L2 size -> 0
1012:	
Test add (first to the back) of the list.....

1013:	addBack -> true	Linked List 	[51]
1014:	addBack -> true	Linked List 	[51,50]
1015:	addBack -> true	Linked List 	[51,50,-50]
1016:	addBack -> true	Linked List 	[51,50,-50,55]
1017:	addBack -> false	Linked List 	[51,50,-50,55]
1018:	
Test add (second to the front) of the list...

1019:	addFront -> true	Linked List 	[80,51,50,-50,55]
1020:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1021:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1022:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1023:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1024:	
Re-testing empty, size methods...............

1025:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1026:	L2 empty? -> true	Empty LinkedList
1027:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1028:	L2 size -> 0	Empty LinkedList
1029:	
Test get method..............................

1030:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1031:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1032:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1033:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1034:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1035:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1036:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	
Test set method..............................

1041:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1043:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1044:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1045:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1046:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1047:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1048:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1049:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1050:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1051:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1052:	
Test equals method...........................

1053:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1054:	List 2 = Empty LinkedList
1055:	List1 == List2 -> false
1056:	
Test clone method............................

1057:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1058:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1059:	Re-testing equals...
1060:	List1 == List2 -> true
1061:	
Test addAfter method.........................

1062:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1063:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1064:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1065:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1066:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1067:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1068:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1069:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1070:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1071:	Test other edge case
1072:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1073:	
Test addBefore method.........................

1074:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1075:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1076:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1077:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1078:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1079:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1080:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Test other edge case
1092:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	
Test front and back methods..................

1094:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1096:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1097:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1098:	Clear out list 2
1099:	Front of list 2 = null	Empty LinkedList
1100:	Back of list 2 = null	Empty LinkedList
1101:	
Cloning list 2 from list 1
1102:	
Test removeFront method......................

1103:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1104:	Removing list 1 front = 	100
1105:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1106:	Removing list 1 front = 	101
1107:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1108:	Removing list 1 front = 	102
1109:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1110:	Removing list 1 front = 	103
1111:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1112:	Removing list 1 front = 	104
1113:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1114:	Removing list 1 front = 	105
1115:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1116:	Removing list 1 front = 	106
1117:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1118:	Removing list 1 front = 	107
1119:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1120:	Removing list 1 front = 	108
1121:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1122:	Removing list 1 front = 	109
1123:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1124:	Removing list 1 front = 	110
1125:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1126:	Removing list 1 front = 	111
1127:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1128:	Removing list 1 front = 	112
1129:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1130:	Removing list 1 front = 	113
1131:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1132:	Removing list 1 front = 	114
1133:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1134:	Removing list 1 front = 	115
1135:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1136:	Removing list 1 front = 	10
1137:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1138:	Removing list 1 front = 	100
1139:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1140:	Removing list 1 front = 	101
1141:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	
1142:	Removing list 1 front = 	102
1143:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	
1144:	Removing list 1 front = 	103
1145:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	
1146:	Removing list 1 front = 	104
1147:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	
1148:	Removing list 1 front = 	105
1149:	Linked List 	[106,107,11,12,13,14,15,16,17]	
1150:	Removing list 1 front = 	106
1151:	Linked List 	[107,11,12,13,14,15,16,17]	
1152:	Removing list 1 front = 	107
1153:	Linked List 	[11,12,13,14,15,16,17]	
1154:	Removing list 1 front = 	11
1155:	Linked List 	[12,13,14,15,16,17]	
1156:	Removing list 1 front = 	12
1157:	Linked List 	[13,14,15,16,17]	
1158:	Removing list 1 front = 	13
1159:	Linked List 	[14,15,16,17]	
1160:	Removing list 1 front = 	14
1161:	Linked List 	[15,16,17]	
1162:	Removing list 1 front = 	15
1163:	Linked List 	[16,17]	
1164:	Removing list 1 front = 	16
1165:	Linked List 	[17]	
1166:	Removing list 1 front = 	17
1167:	Empty LinkedList	
1168:	Removing list 1 front = 	null
1169:	
Cloning list 1 from list 2
1170:	
Test removeBack method.......................

1171:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1172:	Removing list 2 back = 	17
1173:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	
1174:	Removing list 2 back = 	16
1175:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	
1176:	Removing list 2 back = 	15
1177:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	
1178:	Removing list 2 back = 	14
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	
1180:	Removing list 2 back = 	13
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	
1182:	Removing list 2 back = 	12
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	
1184:	Removing list 2 back = 	11
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	
1186:	Removing list 2 back = 	107
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	
1188:	Removing list 2 back = 	106
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	
1190:	Removing list 2 back = 	105
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	
1192:	Removing list 2 back = 	104
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	
1194:	Removing list 2 back = 	103
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	
1196:	Removing list 2 back = 	102
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	
1198:	Removing list 2 back = 	101
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	
1200:	Removing list 2 back = 	100
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	
1202:	Removing list 2 back = 	10
1203:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	
1204:	Removing list 2 back = 	115
1205:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	
1206:	Removing list 2 back = 	114
1207:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	
1208:	Removing list 2 back = 	113
1209:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	
1210:	Removing list 2 back = 	112
1211:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	
1212:	Removing list 2 back = 	111
1213:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	
1214:	Removing list 2 back = 	110
1215:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	
1216:	Removing list 2 back = 	109
1217:	Linked List 	[100,101,102,103,104,105,106,107,108]	
1218:	Removing list 2 back = 	108
1219:	Linked List 	[100,101,102,103,104,105,106,107]	
1220:	Removing list 2 back = 	107
1221:	Linked List 	[100,101,102,103,104,105,106]	
1222:	Removing list 2 back = 	106
1223:	Linked List 	[100,101,102,103,104,105]	
1224:	Removing list 2 back = 	105
1225:	Linked List 	[100,101,102,103,104]	
1226:	Removing list 2 back = 	104
1227:	Linked List 	[100,101,102,103]	
1228:	Removing list 2 back = 	103
1229:	Linked List 	[100,101,102]	
1230:	Removing list 2 back = 	102
1231:	Linked List 	[100,101]	
1232:	Removing list 2 back = 	101
1233:	Linked List 	[100]	
1234:	Removing list 2 back = 	100
1235:	Empty LinkedList	
1236:	Removing list 2 back = 	null
1237:	
Cloning list 2 from list 1
1238:	
Test remove method...........................

1239:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1240:	Removing from list 1 from index: 	33	 removed: 	null
1241:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1242:	Removing from list 1 from index: 	32	 removed: 	null
1243:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	
1244:	Removing from list 1 from index: 	31	 removed: 	17
1245:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	
1246:	Removing from list 1 from index: 	30	 removed: 	16
1247:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	
1248:	Removing from list 1 from index: 	29	 removed: 	15
1249:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	
1250:	Removing from list 1 from index: 	28	 removed: 	14
1251:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	
1252:	Removing from list 1 from index: 	27	 removed: 	13
1253:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	
1254:	Removing from list 1 from index: 	26	 removed: 	12
1255:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	
1256:	Removing from list 1 from index: 	25	 removed: 	11
1257:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	
1258:	Removing from list 1 from index: 	24	 removed: 	107
1259:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	
1260:	Removing from list 1 from index: 	23	 removed: 	106
1261:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	
1262:	Removing from list 1 from index: 	22	 removed: 	105
1263:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	
1264:	Removing from list 1 from index: 	21	 removed: 	104
1265:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	
1266:	Removing from list 1 from index: 	20	 removed: 	103
1267:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	
1268:	Removing from list 1 from index: 	19	 removed: 	102
1269:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	
1270:	Removing from list 1 from index: 	18	 removed: 	101
1271:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	
1272:	Removing from list 1 from index: 	17	 removed: 	100
1273:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	
1274:	Removing from list 1 from index: 	16	 removed: 	10
1275:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	
1276:	Removing from list 1 from index: 	15	 removed: 	115
1277:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	
1278:	Removing from list 1 from index: 	14	 removed: 	114
1279:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	
1280:	Removing from list 1 from index: 	13	 removed: 	113
1281:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	
1282:	Removing from list 1 from index: 	12	 removed: 	112
1283:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	
1284:	Removing from list 1 from index: 	11	 removed: 	111
1285:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	
1286:	Removing from list 1 from index: 	10	 removed: 	110
1287:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	
1288:	Removing from list 1 from index: 	9	 removed: 	109
1289:	Linked List 	[100,101,102,103,104,105,106,107,108]	
1290:	Removing from list 1 from index: 	8	 removed: 	108
1291:	Linked List 	[100,101,102,103,104,105,106,107]	
1292:	Removing from list 1 from index: 	7	 removed: 	107
1293:	Linked List 	[100,101,102,103,104,105,106]	
1294:	Removing from list 1 from index: 	6	 removed: 	106
1295:	Linked List 	[100,101,102,103,104,105]	
1296:	Removing from list 1 from index: 	5	 removed: 	105
1297:	Linked List 	[100,101,102,103,104]	
1298:	Removing from list 1 from index: 	4	 removed: 	104
1299:	Linked List 	[100,101,102,103]	
1300:	Removing from list 1 from index: 	3	 removed: 	103
1301:	Linked List 	[100,101,102]	
1302:	Removing from list 1 from index: 	2	 removed: 	102
1303:	Linked List 	[100,101]	
1304:	Removing from list 1 from index: 	1	 removed: 	101
1305:	Linked List 	[100]	
1306:	Removing from list 1 from index: 	0	 removed: 	100
1307:	Empty LinkedList	
1308:	Removing from list 1 from index: 	-1	 removed: 	null
1309:	
Test contains method.........................

1310:	List 1 (empty) contains 10 = false	Empty LinkedList
1311:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1312:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1313:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1314:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1315:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1316:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1317:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1318:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1319:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1320:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1321:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1322:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1323:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1324:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1325:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1326:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1327:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1328:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1329:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1330:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1331:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1332:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1333:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1334:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1335:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1336:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1337:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1338:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1339:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1340:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1341:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1342:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1343:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1344:	
Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1345:	
Test firstIndexOf and lastIndexOf methods....

1346:	First index of 5: 	0
1347:	Last  index of 5: 	7
1348:	First index of 7: 	2
1349:	Last  index of 7: 	9
1350:	First index of 8: 	3
1351:	Last  index of 8: 	3
1352:	First index of 9: 	-1
1353:	Last  index of 9: 	-1
1354:	
Test numberOf method.........................

1355:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1356:	Number of 5: 	3
1357:	Number of 8: 	1
1358:	Number of 9: 	0
1359:	
Test allIndices method.......................

1360:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1361:	Array -> indices 5: 	[0, 4, 7]
1362:	Array -> indices 8: 	[3]
1363:	Array -> indices 9: 	null
1364:	
Cloning list 2 from list 1
1365:	
Test remove method...........................

1366:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1367:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1368:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1369:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1370:	
Test removeLast method.......................

1371:	Linked List 	[6,7,5,6,7,5,6,7]
1372:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1373:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1374:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1375:	
Test removeAll method........................

1376:	Linked List 	[6,7,5,6,7,6,7]
1377:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1378:	Removing all 6: 	true	Linked List 	[7,7,7]
1379:	Removing all 9: 	false	Linked List 	[7,7,7]
1380:	
Cloning list 1 from list 2
1381:	
Test removeAll array method..................

1382:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1383:	Array: 	[5, 6, 9]
1384:	Removing all from array: Linked List 	[7,8,7,7]
1385:	
Test removeAll list method..................

1386:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1387:	List 2 	Linked List 	[7,8,7,7]
1388:	Removing all list 2 from list 1...
1389:	List 1 	Linked List 	[5,6,5,6,5,6]
1390:	List 2 	Linked List 	[7,8,7,7]
1391:	
Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1392:	
Test containsAll array method................

1393:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1394:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1395:	
Test containsAll list method.................

1396:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1397:	Alter list 2...
1398:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1399:	
Test addAll array method.....................

1400:	Linked List 	[6,7,8,6,7,5,6,45]
1401:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1402:	
Test addAll list method......................

1403:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1404:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1405:	
Test subList method..........................

1406:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1407:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1408:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1409:	Pulling out sub-list from 2 to 10: 	null
1410:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1411:	
Test fromArray method........................

1412:	Array is 	[5, 6, 7, 8]
1413:	List is 	Linked List 	[5,6,7,8]
1414:	
Test fromLinkedList method...................

1415:	1st List is 	Linked List 	[5,6,7,8]
1416:	2nd List is 	Linked List 	[5,6,7,8]
1417:	
Test toArray method..........................

1418:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1419:	
Testing the imported util LinkedList.........

1420:	Imported constructor...
1421:	Imported add:	[0.0]
1422:	Imported add:	[0.0, 1.23]
1423:	Imported addFirst:	[4.56, 0.0, 1.23]
1424:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1425:	Imported size:	4
1426:	Imported isEmpty:	false
1427:	Imported get:	0.0
1428:	Imported set:	4.56
1429:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1430:	Imported equals:	true
1431:	Imported getFirst:	0.01
1432:	Imported getLast:	7.89
1433:	Imported contains:	true
1434:	Imported removeFirst:	0.01
1435:	Imported removeLast:	7.89
1436:	Imported remove:	1.23
1437:	Imported remove:	false
1438:	
Testing the imported util ArrayList.........

1439:	Imported ArrayList:	[a, b, c, d, e]
1440:	Using the enhanced for loop with this object...
1441:	a 
1442:	b 
1443:	c 
1444:	d 
1445:	e 
1446:	Using an iterator object...
1447:	a 
1448:	b 
1449:	c 
1450:	d 
1451:	e 
1452:	
Collections testing complete!

1453:	Computer Science 40S complete!...................................................
1454:	Computer Science 42SAP starting......................................................
1455:	Computer Science 42SAP curriculum content starting......................................................
1456:	AP curriculum - Part 1 Test started......................................................
1457:	AP: Unit 1 (Primitive Types) started......................................................
1458:	// 1.1 Why Programming? Why Java?
1459:	// 1.2 Variables and Data Types
1460:	// 1.3 Expressions and Assignment Statements
1461:	// 1.4 Compound Assignment Operators
1462:	// 1.5 Casting and Ranges of Variables
1463:	AP: Unit 1 (Primitive Types) completed!...................................................
1464:	AP: Unit 3 (Boolean Expressions And If Statements) started......................................................
1465:	AP: Unit 3 (Boolean Expressions And If Statements) completed!...................................................
1466:	AP: Unit 4 (Iteration) started......................................................
1467:	AP: Unit 4 (Iteration) completed!...................................................
1468:	AP curriculum - Part 1 Test completed!...................................................
1469:	AP curriculum - Part 2 Test started......................................................
1470:	AP: Unit 2 (Using Objects) started......................................................
1471:	AP: Unit 2 (Using Objects) completed!...................................................
1472:	AP: Unit 5 (Writing Classes) started......................................................
1473:	AP: Unit 5 (Writing Classes) completed!...................................................
1474:	AP: Unit 9 (Inheritance) started......................................................
1475:	AP: Unit 9 (Inheritance) completed!...................................................
1476:	AP curriculum - Part 2 Test completed!...................................................
1477:	AP curriculum - Part 3 Test started......................................................
1478:	AP: Unit 6 (Arrays) started......................................................
1479:	AP: Unit 6 (Arrays) completed!...................................................
1480:	AP: Unit 8 (2D Arrays) started......................................................
1481:	AP: Unit 8 (2D Arrays) completed!...................................................
1482:	AP curriculum - Part 3 Test completed!...................................................
1483:	AP curriculum - Part 4 Test started......................................................
1484:	AP: Unit 7 (Array List) started......................................................
1485:	AP: Unit 7 (Array List) completed!...................................................
1486:	AP: Unit 10 (Recursion ) started......................................................
1487:	AP: Unit 10 (Recursion ) completed!...................................................
1488:	AP curriculum - Part 4 Test completed!...................................................
1489:	Computer Science 42SAP curriculum content complete!...................................................
1490:	Computer Science 42SAP bonus content starting......................................................
1491:	Permanent Storage Test started......................................................
1492:	// Learn about 'error traps'
1493:	Divide by zero -> java.lang.ArithmeticException: / by zero
1494:	// Create sample data to use
1495:	// Save ONE piece of data to that permanent file
1496:	// Now involve the user to get a file name
1497:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
1498:	File already exists!
1499:	// Open file with one line (no user involvment)
1500:	line read was Defenestration
1501:	// Open file with multiple lines (user picks file)
1502:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
1503:	This line read was �� sr collections.LinkedList�c������ I 	NOT_FOUNDI lengthI longestWordL headt Lcollections/Node;L tailq ~ xp����   d   +sr collections.Node3�bdAA�Z L datat Ljava/lang ... (line shortened) ...
1504:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
1505:	This line read was q ~ pq ~ �
1506:	// Class to save/open one line (no user)
1507:	Before: Defenestration
1508:	After : Defenestration
1509:	// Class to save/open multiple lines (with user)
1510:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
1511:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
1512:	// Now save/open on a complex data type
1513:	Before: Athlete: Husky: HighSchool: Student: Person
1514:	After:  Athlete: Husky: HighSchool: Student: Person
1515:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
1516:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
1517:	Permanent Storage Test completed!...................................................
1518:	Stacks and Queues Test started......................................................
1519:	// Create objects for testing...
1520:	// Create and Test a stack object...
1521:	// Test toString, size, isEmpty, and push methods...
1522:	Empty = true	Size = 0	Empty Stack
1523:	// Loop through adding random values
1524:	Empty = false	Size = 1	Stack top -> [Julee] <- bottom
1525:	Empty = false	Size = 2	Stack top -> [empty,Julee] <- bottom
1526:	Empty = false	Size = 3	Stack top -> [toyer,empty,Julee] <- bottom
1527:	Empty = false	Size = 4	Stack top -> [house,toyer,empty,Julee] <- bottom
1528:	Empty = false	Size = 5	Stack top -> [truer,house,toyer,empty,Julee] <- bottom
1529:	Empty = false	Size = 6	Stack top -> [mater,truer,house,toyer,empty,Julee] <- bottom
1530:	Empty = false	Size = 7	Stack top -> [ports,mater,truer,house,toyer,empty,Julee] <- bottom
1531:	Empty = false	Size = 8	Stack top -> [laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1532:	Empty = false	Size = 9	Stack top -> [Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1533:	Empty = false	Size = 10	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1534:	// Test clone method...
1535:	Clone stack: Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1536:	// Test equals method...
1537:	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
==
Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1538:	// Now change the copy
1539:	// Now check again
1540:	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
!=
Stack top -> [Egypt] <- bottom
1541:	// Re-clone the stack, and output
1542:	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1543:	// Text the pop method...
1544:	Clone stack:	Empty = false	Size = 10	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1545:	// Loop through removing values
1546:	Popped -> Kimmi	Empty = false	Size = 9	Stack top -> [Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1547:	Popped -> Corey	Empty = false	Size = 8	Stack top -> [laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1548:	Popped -> laity	Empty = false	Size = 7	Stack top -> [ports,mater,truer,house,toyer,empty,Julee] <- bottom
1549:	Popped -> ports	Empty = false	Size = 6	Stack top -> [mater,truer,house,toyer,empty,Julee] <- bottom
1550:	Popped -> mater	Empty = false	Size = 5	Stack top -> [truer,house,toyer,empty,Julee] <- bottom
1551:	Popped -> truer	Empty = false	Size = 4	Stack top -> [house,toyer,empty,Julee] <- bottom
1552:	Popped -> house	Empty = false	Size = 3	Stack top -> [toyer,empty,Julee] <- bottom
1553:	Popped -> toyer	Empty = false	Size = 2	Stack top -> [empty,Julee] <- bottom
1554:	Popped -> empty	Empty = false	Size = 1	Stack top -> [Julee] <- bottom
1555:	Popped -> Julee	Empty = true	Size = 0	Empty Stack
1556:	Popped -> null	Empty = true	Size = 0	Empty Stack
1557:	// Test peek (top is wrapper no testing needed)...
1558:	Clone Top = null
1559:	Stack Top = Kimmi
1560:	// Test to array and to linked list...
1561:	Linked List 	[Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee]
1562:	Array   	[Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee]
1563:	// Test our constructors...
1564:	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1565:	Stack top -> [Kimmi,Corey,laity,ports,mater,truer,house,toyer,empty,Julee] <- bottom
1566:	// Test the Queue object...
1567:	// Test toString,size,isEmpty, and enqueue methods...
1568:	Empty = true	Size = 0	Empty Queue
1569:	// Loop through adding random values
1570:	Empty = false	Size = 1	Queue back -> [campy] <- front
1571:	Empty = false	Size = 2	Queue back -> [Ouija,campy] <- front
1572:	Empty = false	Size = 3	Queue back -> [slyly,Ouija,campy] <- front
1573:	Empty = false	Size = 4	Queue back -> [coled,slyly,Ouija,campy] <- front
1574:	Empty = false	Size = 5	Queue back -> [solid,coled,slyly,Ouija,campy] <- front
1575:	Empty = false	Size = 6	Queue back -> [natch,solid,coled,slyly,Ouija,campy] <- front
1576:	Empty = false	Size = 7	Queue back -> [Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1577:	Empty = false	Size = 8	Queue back -> [Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1578:	Empty = false	Size = 9	Queue back -> [oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1579:	Empty = false	Size = 10	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1580:	// Test clone method...
1581:	Clone Queue 			Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1582:	// Test equals method...
1583:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
==
Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1584:	// Now change the duplicate
1585:	// Now check again
1586:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
==
Queue back -> [Emili] <- front
1587:	// Re-clone the queue, and output
1588:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1589:	// Test the dequeue method...
1590:	Clone queue:	Empty = false	Size = 10	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1591:	// Loop through removing values
1592:	Dequeued -> campy	Empty = false	Size = 9	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija] <- front
1593:	Dequeued -> Ouija	Empty = false	Size = 8	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly] <- front
1594:	Dequeued -> slyly	Empty = false	Size = 7	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled] <- front
1595:	Dequeued -> coled	Empty = false	Size = 6	Queue back -> [anded,oozed,Janos,Twyla,natch,solid] <- front
1596:	Dequeued -> solid	Empty = false	Size = 5	Queue back -> [anded,oozed,Janos,Twyla,natch] <- front
1597:	Dequeued -> natch	Empty = false	Size = 4	Queue back -> [anded,oozed,Janos,Twyla] <- front
1598:	Dequeued -> Twyla	Empty = false	Size = 3	Queue back -> [anded,oozed,Janos] <- front
1599:	Dequeued -> Janos	Empty = false	Size = 2	Queue back -> [anded,oozed] <- front
1600:	Dequeued -> oozed	Empty = false	Size = 1	Queue back -> [anded] <- front
1601:	Dequeued -> anded	Empty = true	Size = 0	Empty Queue
1602:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
1603:	// Test front and back...
1604:	Clone Front = null
1605:	Queue Front = campy
1606:	Clone Back  = null
1607:	Queue Back  = anded
1608:	// Test to array and to linked list...
1609:	Linked List 	[anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy]
1610:	Array   	[anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy]
1611:	// Test our constructors...
1612:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1613:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1614:	// Constructors from stack to queue (and back)...
1615:	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front	 into 	Stack top -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- bottom
1616:	Stack top -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- bottom	 into 	Queue back -> [anded,oozed,Janos,Twyla,natch,solid,coled,slyly,Ouija,campy] <- front
1617:	Stacks and Queues Test completed!...................................................
1618:	Searching and Sorting Test started......................................................
1619:	// For the I.B. Exam, you only need to know:
1620:	// Search: linear search and binary search
1621:	// Sort: bubble sort and the selection sort
1622:	// Create some constants (edges) for the data
1623:	// Create some random data to search through and sort
1624:	// Including edge cases to test
1625:	// Create data to store the results...
1626:	// The simpliest of searches
1627:	// Now the linear search on all test data
1628:	// Simple sort...
1629:	// We will re-scramble array for further testing
1630:	// Now bubble sort (from bubbles rising from water)
1631:	// Now selection sort (from selecting the smallest)
1632:	// Now binary search (named after two or dividing)
1633:	// NOTE: binary search can only happen on sorted list
1634:	// Redo some of the test data...
1635:	// Use class for searching and sorting
1636:	// Create random linked list data
1637:	// Place all test cases into another linked list
1638:	// Execute the linear search on all test data...
1639:	// Execute all the sorts on all test data...
1640:	// Bubble sort LinkedList data...
1641:	// Selection sort LinkedList data...
1642:	// Shell sort LinkedList data...
1643:	// Insertion sort LinkedList data...
1644:	// Quick sort LinkedList data...
1645:	// Merge sort LinkedList data...
1646:	// Execute the binary search on all test data...
1647:	Searching and Sorting Test completed!...................................................
1648:	Binary Trees Test started......................................................
1649:	// Constants/variables for creating random values...
1650:	// Creating some TreeNode objects...
1651:	// Linking the TreeNodes...
1652:	// Testing TreeNode equals...
1653:	TreeNode1=TreeNode2
1654:	// Testing TreeNode toString...
1655:	79
1656:	79
1657:	63
1658:	// Creating a Tree object...
1659:	// Test the insert method...
1660:	// Insert one more...
1661:	// Test the search of the tree...
1662:	Should be found     = true
1663:	Should NOT be found = false
1664:	// Test toString() and pre, post, in order traversals
1665:	Binary Tree:
Order: Linked List 	[98,79,98,36,37,69]
Pre:   Linked List 	[98,79,36,37,69,98]
Post:  Linked List 	[69,37,36,79,98,98]
In:    Linked List 	[36,37,69,79,98,98]
1666:	// Building second tree (test clone) and test equals
1667:	1st tree -> Linked List 	[36,37,69,79,98,98]
1668:	2nd tree -> Linked List 	[15,22,25,68,70,96]
1669:	1st!=2nd
1670:	// Building a third tree (test clone) and test equals
1671:	1st tree -> Linked List 	[36,37,69,79,98,98]
1672:	3rd tree -> Linked List 	[36,37,69,79,98,98]
1673:	1st==3rd
1674:	// Build all our data structures from each other...
1675:	// Create variable objects...
1676:	// Create array from variables...
1677:	// Create LinkedList from array...
1678:	// Create Stack from LinkedList...
1679:	// Create Queue from Stack...
1680:	// Create Tree from Queue...
1681:	// Output variables,array,list,stack,queue,tree...
1682:	riped
1683:	lemke
1684:	alter
1685:	lists
1686:	fleck
1687:	[riped,lemke,alter,lists,fleck]
1688:	Linked List 	[riped,lemke,alter,lists,fleck]
1689:	Stack top -> [riped,lemke,alter,lists,fleck] <- bottom
1690:	Queue back -> [riped,lemke,alter,lists,fleck] <- front
1691:	Binary Tree:
Order: Linked List 	[riped,lemke,alter,lists,fleck]
Pre:   Linked List 	[riped,lemke,alter,fleck,lists]
Post:  Linked List 	[fleck,alter,lists,lemke,riped]
In:    Linked List 	[alter,flec ... (line shortened) ...
1692:	// Now re-building queue from tree
1693:	// Now re-building stack from queue
1694:	// Now re-building LinkedList from stack...
1695:	// Now re-building array from LinkedList...
1696:	// Output array,list,stack,queue,tree again...
1697:	[alter,fleck,lemke,lists,riped]
1698:	Linked List 	[alter,fleck,lemke,lists,riped]
1699:	Stack top -> [alter,fleck,lemke,lists,riped] <- bottom
1700:	Queue back -> [alter,fleck,lemke,lists,riped] <- front
1701:	Binary Tree:
Order: Linked List 	[riped,lemke,alter,lists,fleck]
Pre:   Linked List 	[riped,lemke,alter,fleck,lists]
Post:  Linked List 	[fleck,alter,lists,lemke,riped]
In:    Linked List 	[alter,flec ... (line shortened) ...
1702:	Binary Trees Test completed!...................................................
1703:	Computer Science 42SAP bonus content complete!...................................................
1704:	Computer Science 42SAP complete!...................................................
