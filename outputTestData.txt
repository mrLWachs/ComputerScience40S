1:	Mr. Wachs Computer Science.................................................................
2:	Computer Science 42SAP starting............................................................
3:	Computer Science 42SAP curriculum content..................................................
4:	AP curriculum - Part 1.....................................................................
5:	AP: Unit 1 (Primitive Types)...............................................................
6:	1.1 Why Programming? Why Java?.............................................................
7:	System.out.print outputs text to the screen and System.out.println outputs with a line break
8:	More specifically, the code word "System" refers to the "computer system" and the 
9:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
10:	methods (or "actions") that take the string literal (which is the word or words in between 
11:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
12:	will take the string literal and output it to the default output device - that being the 
13:	computer screen.
14:	1.2 Variables and Data Types...............................................................
15:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
16:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
17:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
18:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
19:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
20:	variable can only be one type and only store that specified type of data. However, the data 
21:	itself can change (or "vary") after the initial declaration. Examples of this are below...
22:	// Variables declared and assigned initial ("starting") values:
23:	boolean a = true;
24:	int     b = 0;
25:	double  c = 1.0;
26:	char    d = 'A';
27:	// Variables content changes ("reassigned"):
28:	a = false;
29:	b = 1;
30:	c = 1.1;
31:	d = 'B';
32:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
33:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
34:	given the initial value when declared (or initialized) and that value stays locked. These 
35:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
36:	the name. Final variables are more efficient for a number of reasons including ease of code 
37:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
38:	are below
39:	// Constants (finals) declared (initialized)
40:	final boolean FOUND  = true;
41:	final int     VALUE  = 1;
42:	final double  AMOUNT = 2.5;
43:	final char    CODE   = 'X';
44:	1.3 Expressions and Assignment Statements..................................................
45:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
46:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
47:	context, the word "literal" can also mean a number (like "5"). This usually involves 
48:	variable types int and double (the number types) used in a math expression or equation. This 
49:	can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
50:	evaluated in a formula, they always evaluate to an int answer (solution) and double values 
51:	will evaluate to a double. Complex (or "compound" expressions can be formed in which 
52:	the order of operations (or precedence order). This means multiplication and division are 
53:	evaluated before addition and subtraction. If operations are at the same precedence level, 
54:	then they are evaluated from left to right.When you try and divide by zero, an error 
55:	(the "ArithmeticException" error) will occur and the program will stop running. Examples:
56:	// Arithmetic evaluations using variables
57:	int    v1 = 5;
58:	int    v2 = 3;
59:	int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
60:	double v4 = 5.2;
61:	double v5 = 3.3;
62:	double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
63:	1.4 Compound Assignment Operators..........................................................
64:	Compound statements in this context refers to using shortcuts to quickly add or subtract one 
65:	(increment or decrement) to a variable. You can also use more complex shorthand compound 
66:	statements to quickly multiply, divide, even modulus a variable with itself or other 
67:	variables. For example:
68:	// Shorthand Compound Arithmetic expressions
69:	int value = 5;
70:	value++;    // is the same as "value = value + 1;"
71:	value--;    // is the same as "value = value + 1;"
72:	value += 5; // is the same as "value = value + 5;"
73:	value -= 5; // is the same as "value = value - 5;"
74:	value *= 5; // is the same as "value = value * 5;"
75:	value /= 5; // is the same as "value = value / 5;"
76:	value %= 5; // is the same as "value = value % 5;"
77:	1.5 Casting and Ranges of Variables........................................................
78:	Casting is the process of "converting" one data type into another data type. When casting 
79:	an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
80:	off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
81:	A char when cast will turn into it's ASCII value. The process of casting involves putting 
82:	variable to be cast with the type being cast into in round brackets to the left of that 
83:	variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
84:	constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
85:	evaluates an int outside that range, an error will occur (overflow error). For example:
86:	// Casting data types
87:	int integer = Integer.MAX_VALUE;
88:	double doub = Double.MIN_VALUE;
89:	doub        = (int)integer;
90:	integer     = (int)doub;
91:	char letter = 'A';
92:	integer     = (int)letter;
93:	AP: Unit 3 (Boolean Expressions And If Statements).........................................
94:	3.1 Boolean Expressions....................................................................
95:	A Boolean (true/false) expression is a code statement most likely in a control structure 
96:	like a conditional statement or loop control structure that evaluates to true or false to 
97:	make decisions and control the flow of the program. The Boolean expression will require 
98:	the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
99:	than", "greater than", "less than or equal to", "greater than or equal to", "equal 
100:	to", and "not equal to".
101:	3.2 if Statements and Control Flow.........................................................
102:	A "Conditional Statement" is also known under other names like "branching statement", "if 
103:	statement", "one-way selection statement", and "control structure". It uses the reserved 
104:	keyword "if" along with round brackets which contain the Boolean expression, and curly 
105:	brackets to contain the control block of all code you wish to be controlled by the 
106:	conditional statement. Brackets are optional if the block is only one line, and you may also 
107:	move thos lines up to the same line as the conditional statement. For example:
108:	// Example of if statements
109:	int a = 10;
110:	int b = 10;
111:	if (a == a) {
112:	    // "equal"
113:	}
114:	3.3 if-else Statements.....................................................................
115:	The "else" statement is paired with an "if" statement to control the flow of the logic so 
116:	that the conditional now evaluates to both true and false. This can be called a "two 
117:	way selection" (for true/false). An "else" must always follow an "if" statement first. 
118:	For example:
119:	// if with "else" 
120:	double c = 1.45, d = 1.5; 
121:	if (c < d) {
122:	    // "Less than"
123:	}
124:	else {
125:	    // "Greater than"
126:	}
127:	// Shortened lines version
128:	char e = 'A';
129:	char f = 'a';
130:	if (e != f) e = '!';
131:	else        e = '=';
132:	3.4 else if Statements.....................................................................
133:	When making multiple decisions (more than 2), the "else if" statement is added to an 
134:	existing "if" statement to have multiple branches of logic for the code to follow. This 
135:	is much more efficient than seperate "if" statements. This can also be called "multi-way 
136:	selection" (or "if-else-if"). An "else" statement is also still the final option (but 
137:	this is not required). For example:
138:	// Showing a "chain" of else if statements
139:	int g = 0;
140:	if (g == 1) {
141:	    // The first if is true
142:	}
143:	else if (g == 2) {
144:	    // The next if is true
145:	}
146:	else if (g == 3) {
147:	    // The next if (in the "chain" of ifs) is true
148:	}
149:	else {
150:	    // Nothing above is true, so go to this else
151:	}
152:	3.5 Compound Boolean Expressions...........................................................
153:	The process of "nesting" means to place one conditional statement inside the "block" of 
154:	another conditional statement. The logical operators: "and", "or", and "not" are 
155:	represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
156:	is used to combine logical boolean expressions such that ALL expressions need to be true for 
157:	the entire statement to be true. The operator OR is used to combine logical boolean 
158:	expressions such that ANY expression can be true for the entire statement to be true. The 
159:	operator NOT reverses the logic so that true statements are evaluated as false (and visa 
160:	versa). If the statement contains multiple Boolean expressions and the result of the 
161:	evaluation of one expression has already determined the expressions result, then the 
162:	rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
163:	evaluation". For example:
164:	// Logical operators and "nesting"
165:	int    age = 17;
166:	double iq  = 1.0;
167:	if (age >= 18 && iq > 90) {
168:	    // with "and" ("&&") BOTH have to be true
169:	}
170:	else if (age >= 18 || iq > 0) {
171:	    // with "or" ("||") EITHER can be true
172:	}
173:	else {
174:	    // Case if neither evaluates
175:	    if (age > 0) {
176:	        // A "nested if statement"
177:	    }
178:	}
179:	3.6 Equivalent Boolean Expressions.........................................................
180:	Boolean (true/false) expressions turned into logical statements used by control structures 
181:	like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
182:	Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
183:	not necessarily applicable to this exam). This just means that complex statements need to be 
184:	evaluated by using mathematical rules (like "order of operations") and logical operators 
185:	(like "and, or, not") to determine the final Boolean result. This could determine if a 
186:	control structure (like an "if" statement) runs a block of code or not.
187:	3.7 Comparing Objects......................................................................
188:	The use of an advanced data type like an "Object" in code means that comparison 
189:	operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
190:	double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
191:	determine the equality of two objects. For example:
192:	// Use of the built-in equals method with Objects
193:	String word1 = "edgy";
194:	String word2 = "edGy";
195:	if (word1.equals(word2)) {
196:	    // "W1=W2"
197:	}
198:	else if (word1.equalsIgnoreCase(word2)) {
199:	    // "W1 kind of == W2"
200:	}
201:	AP: Unit 4 (Iteration).....................................................................
202:	4.1 while Loops............................................................................
203:	The word "Iteration" is another word for "Loop" or "Looping" which is a control 
204:	struture to have code statements "repeat". Like conditional ("if") statements, iteration 
205:	statements control the flow of a program's logic. Also like if statements, iteration 
206:	statements are controlled by a Boolean expression (true or false). The result of the Boolean 
207:	expression will result in the code executing zero or mulitple times (until the expression 
208:	evaluates to false). The expression is evaluated each time through an iteration of the loop. 
209:	A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
210:	(thus the loop never stops looping - or never stops running). It is possible a loop will 
211:	never run if it evaluates to false before the body (block) of the loop. If you use the 
212:	keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
213:	potentially exit any method the loop is written inside. The "while" loop is a event loop or 
214:	non-deterministic loop, which means it is not usually used for counting but when you do 
215:	not know how many times the loop needs to run (a certain event can cause the loop to 
216:	end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
217:	(traversing) arrays and lists, and searching and sorting values. For example:
218:	// Example of a simple while loop
219:	int counter = 0;
220:	while (counter < 10) {
221:	    counter++;
222:	}
223:	4.2 for Loops..............................................................................
224:	The "for" loop is another looping form. The for loop is a count controlled loop that 
225:	generally is used when a loop needs to run a specific number of times. There are three 
226:	parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
227:	the starting, ending, and change of the loop. In a for loop a counting variable is 
228:	generally declared right inside the loop to a starting value, then the Boolean condition 
229:	to end the loop, then the change value increasing (increment) or decreasing (decrement) 
230:	that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
231:	by one" error occurs when a loop runs one too many or one too few times. For Example:
232:	// Example of a for loop
233:	for (int i = 0; i < 10; i++) {
234:	    // potential code body...
235:	}
236:	4.3 Developing Algorithms Using Strings....................................................
237:	The String class allows for several "built-in" methods of the String class to manipulate 
238:	the string and the value it stores. Several of these methods could apply to the A.P. exam 
239:	including travelling (traversing) string characters, pulling out substrings (parts 
240:	of the string), reversing a string, etc. For example:
241:	// Example of string methods with a loop
242:	String word   = "completion";
243:	String parts1 = word.substring(3);
244:	String parts2 = word.substring(1,7);
245:	for (int i = 0; i < word.length(); i++) {
246:	    char character = word.charAt(i);
247:	}
248:	4.4 Nested Iteration.......................................................................
249:	Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
250:	This means you can place a iteration statement inside the block of another iteration 
251:	statement. The inner loop must complete all of its iterations before the outer loop 
252:	can continue. For example:
253:	// Example of nested loops
254:	for (int i = 0; i < 10; i++) {
255:	    for (int j = 0; j < 10; j++) {
256:	        int k = 10;
257:	        while (k < 10) {
258:	            // potential code body...
259:	        }
260:	    }
261:	}
262:	4.5 Informal Code Analysis.................................................................
263:	Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
264:	loops are typical A.P. exam questions. You should practice these types of questions.
265:	AP curriculum - Part 2.....................................................................
266:	AP: Unit 2 (Using Objects) started.........................................................
267:	// 2.1 Objects: Instances of Classes
268:	A "class" is the "blueprint" for creating an "object". In Java, the class is a way to 
269:	use code to model "things" using properties and methods. The object is what the class 
270:	"creates" when the class is made into a specific "oject" of that class. The various 
271:	terms used for this vary but all revolve around the same concepts. The term "object" can 
272:	also be called a "instance" of the class. The term "properties" can also be called  
273:	"things about the class", or "descriptors", or "adjectives", or "fields". 
274:	// 2.2 Creating and Storing Objects (Instantiation)
275:	// 2.3 Calling a Void Method
276:	// 2.4 Calling a Void Method with Parameters
277:	// 2.5 Calling a Non-void Method
278:	// 2.6 String Objects: Concatenation, Literals, and More
279:	// 2.7 String Methods
280:	// 2.8 Wrapper Classes: Integer and Double
281:	// 2.9 Using the Math Class
282:	AP: Unit 2 (Using Objects) completed!......................................................
