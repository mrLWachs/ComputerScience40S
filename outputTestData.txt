1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	~~~ SIMULATED {Input} DIALOG: Select the unit to view examples of... ~~~ 
13:	Hello World
14:	I'm in the world
15:	Good-bye world!
16:	Make a quote " 
17:	Make a slash \ 
18:	Make a 	 tab 
19:	Make a new line 
 break 
20:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
21:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
22:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
23:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
24:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
25:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
29:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
34:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
35:	a = false
36:	b = 1
37:	c = 1.2
38:	d = A
39:	e = apple
40:	x = 10
41:	x = 20
42:	y = 30
43:	y = 30
44:	x = 28
45:	y = 5
46:	z = 3
47:	3.141592658389, 99, Y, true, Wachs
48:	f = 25
49:	g = 25.0
50:	g = 25.999999999999
51:	h = 25
52:	k = 2.99999999
53:	l = 2
54:	m = 2.0
55:	n = A
56:	o = 65
57:	p = F
58:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
59:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
60:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
61:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
62:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
63:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
64:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
65:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
66:	Word hippopotomonsprosesquippedaiophobia is length 35
67:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
68:	answer1 = 3.141592653589793
69:	answer2 = 0.8775825618903728
70:	answer3 = 1.0
71:	answer4 = 125.0
72:	answer5 = 3.0
73:	answer6 = -0.6931471805599453
74:	seed = 0.7510074410358484
75:	low    = 1.0
76:	high   = 10.0
77:	number = 8.510074410358484
78:	value = 8
79:	card is 52
80:	equal
81:	The example is less than
82:	!=
83:	W1 kind of == W2
84:	Keep trying
85:	counter = 0
86:	counter = 1
87:	counter = 2
88:	counter = 3
89:	counter = 4
90:	counter = 5
91:	counter = 6
92:	counter = 7
93:	counter = 8
94:	counter = 9
95:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
96:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
97:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
98:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
99:	i = 0
100:	i = 1
101:	i = 2
102:	i = 3
103:	i = 4
104:	i = 5
105:	i = 6
106:	i = 7
107:	i = 8
108:	i = 9
109:	counting = 100
110:	counting = 90
111:	counting = 80
112:	counting = 70
113:	counting = 60
114:	counting = 50
115:	counting = 40
116:	counting = 30
117:	counting = 20
118:	counting = 10
119:	counting = 0
120:	i = 99.789
121:	i = 19.007428571428573
122:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
123:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
125:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
126:	Starting to Learn methods...
127:	*
128:	*
129:	Phenakistoscope
130:	Volleywood
131:	pancakes
132:	Spider-man
133:	Batman
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Dalmations
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Problems
334:	Number is 9
335:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
336:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
337:	Completed Learning Methods!
338:	Start learning arrays...
339:	333
340:	666
341:	666
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	0
440:	333
441:	0 = 666
442:	1 = 0
443:	2 = 0
444:	3 = 0
445:	4 = 0
446:	5 = 0
447:	6 = 0
448:	7 = 0
449:	8 = 0
450:	9 = 0
451:	10 = 0
452:	11 = 0
453:	12 = 0
454:	13 = 0
455:	14 = 0
456:	15 = 0
457:	16 = 0
458:	17 = 0
459:	18 = 0
460:	19 = 0
461:	20 = 0
462:	21 = 0
463:	22 = 0
464:	23 = 0
465:	24 = 0
466:	25 = 0
467:	26 = 0
468:	27 = 0
469:	28 = 0
470:	29 = 0
471:	30 = 0
472:	31 = 0
473:	32 = 0
474:	33 = 0
475:	34 = 0
476:	35 = 0
477:	36 = 0
478:	37 = 0
479:	38 = 0
480:	39 = 0
481:	40 = 0
482:	41 = 0
483:	42 = 0
484:	43 = 0
485:	44 = 0
486:	45 = 0
487:	46 = 0
488:	47 = 0
489:	48 = 0
490:	49 = 0
491:	50 = 0
492:	51 = 0
493:	52 = 0
494:	53 = 0
495:	54 = 0
496:	55 = 0
497:	56 = 0
498:	57 = 0
499:	58 = 0
500:	59 = 0
501:	60 = 0
502:	61 = 0
503:	62 = 0
504:	63 = 0
505:	64 = 0
506:	65 = 0
507:	66 = 0
508:	67 = 0
509:	68 = 0
510:	69 = 0
511:	70 = 0
512:	71 = 0
513:	72 = 0
514:	73 = 0
515:	74 = 0
516:	75 = 0
517:	76 = 0
518:	77 = 0
519:	78 = 0
520:	79 = 0
521:	80 = 0
522:	81 = 0
523:	82 = 0
524:	83 = 0
525:	84 = 0
526:	85 = 0
527:	86 = 0
528:	87 = 0
529:	88 = 0
530:	89 = 0
531:	90 = 0
532:	91 = 0
533:	92 = 0
534:	93 = 0
535:	94 = 0
536:	95 = 0
537:	96 = 0
538:	97 = 0
539:	98 = 0
540:	99 = 333
541:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
542:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
543:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
544:	~~~ SIMULATED {Message} DIALOG: [6,5,8,9,9,5,3,5,8,4,10,1,5,7,7,3,1,9,3,7,10,6,10,7,2,7,5,8,1,3,10,7,8,6,7,7,3,1,2,7,4,2,8,4,6,6,7,6,5,7,] ~~~ 
545:	Random character was n
546:	$ * / g 8 @ < 3 ' _ < } t [ ! O ) Z a [ B h = d - x 7 h I * 
I u 4 ? J 2 n { ? k l _ N g b 1 H # 1 d e ] - 6 O * 3 u n ~ 
k q { . B 8 d a I @ ) S e & 7 ` W Z 2 Q * @ ; j b ^ _ a i E 
? c P K { 2 T ' y ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
549:	X O X 
O X O 
X O X 

550:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
551:	Completed learning arrays!
552:	Start Learning classes...
553:	Complete Learning classes
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
556:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
557:	Computer Science 40S Course:...............................................................
558:	Recursion test started...
559:	Recursive factorials............................
560:	-1 factorial = 1
561:	0 factorial = 1
562:	1 factorial = 1
563:	2 factorial = 2
564:	3 factorial = 6
565:	4 factorial = 24
566:	5 factorial = 120
567:	6 factorial = 720
568:	7 factorial = 5040
569:	8 factorial = 40320
570:	9 factorial = 362880
571:	10 factorial = 3628800
572:	11 factorial = 39916800
573:	12 factorial = 479001600
574:	13 factorial = 6227020800
575:	14 factorial = 87178291200
576:	15 factorial = 1307674368000
577:	16 factorial = 20922789888000
578:	17 factorial = 355687428096000
579:	18 factorial = 6402373705728000
580:	19 factorial = 121645100408832000
581:	20 factorial = 2432902008176640000
582:	Recursive powers................................
583:	-5 to the exponent -5 = -3.2E-4
584:	-4 to the exponent -5 = -9.765625E-4
585:	-3 to the exponent -5 = -0.00411522633744856
586:	-2 to the exponent -5 = -0.03125
587:	-1 to the exponent -5 = -1.0
588:	0 to the exponent -5 = 4.9E-324
589:	1 to the exponent -5 = 1.0
590:	2 to the exponent -5 = 0.03125
591:	3 to the exponent -5 = 0.00411522633744856
592:	4 to the exponent -5 = 9.765625E-4
593:	5 to the exponent -5 = 3.2E-4
594:	6 to the exponent -5 = 1.286008230452675E-4
595:	7 to the exponent -5 = 5.9499018266198606E-5
596:	8 to the exponent -5 = 3.0517578125E-5
597:	9 to the exponent -5 = 1.6935087808430286E-5
598:	10 to the exponent -5 = 1.0E-5
599:	-5 to the exponent -4 = 0.0016
600:	-4 to the exponent -4 = 0.00390625
601:	-3 to the exponent -4 = 0.012345679012345678
602:	-2 to the exponent -4 = 0.0625
603:	-1 to the exponent -4 = 1.0
604:	0 to the exponent -4 = 4.9E-324
605:	1 to the exponent -4 = 1.0
606:	2 to the exponent -4 = 0.0625
607:	3 to the exponent -4 = 0.012345679012345678
608:	4 to the exponent -4 = 0.00390625
609:	5 to the exponent -4 = 0.0016
610:	6 to the exponent -4 = 7.716049382716049E-4
611:	7 to the exponent -4 = 4.1649312786339027E-4
612:	8 to the exponent -4 = 2.44140625E-4
613:	9 to the exponent -4 = 1.5241579027587258E-4
614:	10 to the exponent -4 = 1.0E-4
615:	-5 to the exponent -3 = -0.008
616:	-4 to the exponent -3 = -0.015625
617:	-3 to the exponent -3 = -0.037037037037037035
618:	-2 to the exponent -3 = -0.125
619:	-1 to the exponent -3 = -1.0
620:	0 to the exponent -3 = 4.9E-324
621:	1 to the exponent -3 = 1.0
622:	2 to the exponent -3 = 0.125
623:	3 to the exponent -3 = 0.037037037037037035
624:	4 to the exponent -3 = 0.015625
625:	5 to the exponent -3 = 0.008
626:	6 to the exponent -3 = 0.004629629629629629
627:	7 to the exponent -3 = 0.0029154518950437317
628:	8 to the exponent -3 = 0.001953125
629:	9 to the exponent -3 = 0.0013717421124828531
630:	10 to the exponent -3 = 0.001
631:	-5 to the exponent -2 = 0.04
632:	-4 to the exponent -2 = 0.0625
633:	-3 to the exponent -2 = 0.1111111111111111
634:	-2 to the exponent -2 = 0.25
635:	-1 to the exponent -2 = 1.0
636:	0 to the exponent -2 = 4.9E-324
637:	1 to the exponent -2 = 1.0
638:	2 to the exponent -2 = 0.25
639:	3 to the exponent -2 = 0.1111111111111111
640:	4 to the exponent -2 = 0.0625
641:	5 to the exponent -2 = 0.04
642:	6 to the exponent -2 = 0.027777777777777776
643:	7 to the exponent -2 = 0.02040816326530612
644:	8 to the exponent -2 = 0.015625
645:	9 to the exponent -2 = 0.012345679012345678
646:	10 to the exponent -2 = 0.01
647:	-5 to the exponent -1 = -0.2
648:	-4 to the exponent -1 = -0.25
649:	-3 to the exponent -1 = -0.3333333333333333
650:	-2 to the exponent -1 = -0.5
651:	-1 to the exponent -1 = -1.0
652:	0 to the exponent -1 = 4.9E-324
653:	1 to the exponent -1 = 1.0
654:	2 to the exponent -1 = 0.5
655:	3 to the exponent -1 = 0.3333333333333333
656:	4 to the exponent -1 = 0.25
657:	5 to the exponent -1 = 0.2
658:	6 to the exponent -1 = 0.16666666666666666
659:	7 to the exponent -1 = 0.14285714285714285
660:	8 to the exponent -1 = 0.125
661:	9 to the exponent -1 = 0.1111111111111111
662:	10 to the exponent -1 = 0.1
663:	-5 to the exponent 0 = 1.0
664:	-4 to the exponent 0 = 1.0
665:	-3 to the exponent 0 = 1.0
666:	-2 to the exponent 0 = 1.0
667:	-1 to the exponent 0 = 1.0
668:	0 to the exponent 0 = 1.0
669:	1 to the exponent 0 = 1.0
670:	2 to the exponent 0 = 1.0
671:	3 to the exponent 0 = 1.0
672:	4 to the exponent 0 = 1.0
673:	5 to the exponent 0 = 1.0
674:	6 to the exponent 0 = 1.0
675:	7 to the exponent 0 = 1.0
676:	8 to the exponent 0 = 1.0
677:	9 to the exponent 0 = 1.0
678:	10 to the exponent 0 = 1.0
679:	-5 to the exponent 1 = -5.0
680:	-4 to the exponent 1 = -4.0
681:	-3 to the exponent 1 = -3.0
682:	-2 to the exponent 1 = -2.0
683:	-1 to the exponent 1 = -1.0
684:	0 to the exponent 1 = 0.0
685:	1 to the exponent 1 = 1.0
686:	2 to the exponent 1 = 2.0
687:	3 to the exponent 1 = 3.0
688:	4 to the exponent 1 = 4.0
689:	5 to the exponent 1 = 5.0
690:	6 to the exponent 1 = 6.0
691:	7 to the exponent 1 = 7.0
692:	8 to the exponent 1 = 8.0
693:	9 to the exponent 1 = 9.0
694:	10 to the exponent 1 = 10.0
695:	-5 to the exponent 2 = 25.0
696:	-4 to the exponent 2 = 16.0
697:	-3 to the exponent 2 = 9.0
698:	-2 to the exponent 2 = 4.0
699:	-1 to the exponent 2 = 1.0
700:	0 to the exponent 2 = 0.0
701:	1 to the exponent 2 = 1.0
702:	2 to the exponent 2 = 4.0
703:	3 to the exponent 2 = 9.0
704:	4 to the exponent 2 = 16.0
705:	5 to the exponent 2 = 25.0
706:	6 to the exponent 2 = 36.0
707:	7 to the exponent 2 = 49.0
708:	8 to the exponent 2 = 64.0
709:	9 to the exponent 2 = 81.0
710:	10 to the exponent 2 = 100.0
711:	-5 to the exponent 3 = -125.0
712:	-4 to the exponent 3 = -64.0
713:	-3 to the exponent 3 = -27.0
714:	-2 to the exponent 3 = -8.0
715:	-1 to the exponent 3 = -1.0
716:	0 to the exponent 3 = 0.0
717:	1 to the exponent 3 = 1.0
718:	2 to the exponent 3 = 8.0
719:	3 to the exponent 3 = 27.0
720:	4 to the exponent 3 = 64.0
721:	5 to the exponent 3 = 125.0
722:	6 to the exponent 3 = 216.0
723:	7 to the exponent 3 = 343.0
724:	8 to the exponent 3 = 512.0
725:	9 to the exponent 3 = 729.0
726:	10 to the exponent 3 = 1000.0
727:	-5 to the exponent 4 = 625.0
728:	-4 to the exponent 4 = 256.0
729:	-3 to the exponent 4 = 81.0
730:	-2 to the exponent 4 = 16.0
731:	-1 to the exponent 4 = 1.0
732:	0 to the exponent 4 = 0.0
733:	1 to the exponent 4 = 1.0
734:	2 to the exponent 4 = 16.0
735:	3 to the exponent 4 = 81.0
736:	4 to the exponent 4 = 256.0
737:	5 to the exponent 4 = 625.0
738:	6 to the exponent 4 = 1296.0
739:	7 to the exponent 4 = 2401.0
740:	8 to the exponent 4 = 4096.0
741:	9 to the exponent 4 = 6561.0
742:	10 to the exponent 4 = 10000.0
743:	-5 to the exponent 5 = -3125.0
744:	-4 to the exponent 5 = -1024.0
745:	-3 to the exponent 5 = -243.0
746:	-2 to the exponent 5 = -32.0
747:	-1 to the exponent 5 = -1.0
748:	0 to the exponent 5 = 0.0
749:	1 to the exponent 5 = 1.0
750:	2 to the exponent 5 = 32.0
751:	3 to the exponent 5 = 243.0
752:	4 to the exponent 5 = 1024.0
753:	5 to the exponent 5 = 3125.0
754:	6 to the exponent 5 = 7776.0
755:	7 to the exponent 5 = 16807.0
756:	8 to the exponent 5 = 32768.0
757:	9 to the exponent 5 = 59049.0
758:	10 to the exponent 5 = 100000.0
759:	-5 to the exponent 6 = 15625.0
760:	-4 to the exponent 6 = 4096.0
761:	-3 to the exponent 6 = 729.0
762:	-2 to the exponent 6 = 64.0
763:	-1 to the exponent 6 = 1.0
764:	0 to the exponent 6 = 0.0
765:	1 to the exponent 6 = 1.0
766:	2 to the exponent 6 = 64.0
767:	3 to the exponent 6 = 729.0
768:	4 to the exponent 6 = 4096.0
769:	5 to the exponent 6 = 15625.0
770:	6 to the exponent 6 = 46656.0
771:	7 to the exponent 6 = 117649.0
772:	8 to the exponent 6 = 262144.0
773:	9 to the exponent 6 = 531441.0
774:	10 to the exponent 6 = 1000000.0
775:	-5 to the exponent 7 = -78125.0
776:	-4 to the exponent 7 = -16384.0
777:	-3 to the exponent 7 = -2187.0
778:	-2 to the exponent 7 = -128.0
779:	-1 to the exponent 7 = -1.0
780:	0 to the exponent 7 = 0.0
781:	1 to the exponent 7 = 1.0
782:	2 to the exponent 7 = 128.0
783:	3 to the exponent 7 = 2187.0
784:	4 to the exponent 7 = 16384.0
785:	5 to the exponent 7 = 78125.0
786:	6 to the exponent 7 = 279936.0
787:	7 to the exponent 7 = 823543.0
788:	8 to the exponent 7 = 2097152.0
789:	9 to the exponent 7 = 4782969.0
790:	10 to the exponent 7 = 1.0E7
791:	-5 to the exponent 8 = 390625.0
792:	-4 to the exponent 8 = 65536.0
793:	-3 to the exponent 8 = 6561.0
794:	-2 to the exponent 8 = 256.0
795:	-1 to the exponent 8 = 1.0
796:	0 to the exponent 8 = 0.0
797:	1 to the exponent 8 = 1.0
798:	2 to the exponent 8 = 256.0
799:	3 to the exponent 8 = 6561.0
800:	4 to the exponent 8 = 65536.0
801:	5 to the exponent 8 = 390625.0
802:	6 to the exponent 8 = 1679616.0
803:	7 to the exponent 8 = 5764801.0
804:	8 to the exponent 8 = 1.6777216E7
805:	9 to the exponent 8 = 4.3046721E7
806:	10 to the exponent 8 = 1.0E8
807:	-5 to the exponent 9 = -1953125.0
808:	-4 to the exponent 9 = -262144.0
809:	-3 to the exponent 9 = -19683.0
810:	-2 to the exponent 9 = -512.0
811:	-1 to the exponent 9 = -1.0
812:	0 to the exponent 9 = 0.0
813:	1 to the exponent 9 = 1.0
814:	2 to the exponent 9 = 512.0
815:	3 to the exponent 9 = 19683.0
816:	4 to the exponent 9 = 262144.0
817:	5 to the exponent 9 = 1953125.0
818:	6 to the exponent 9 = 1.0077696E7
819:	7 to the exponent 9 = 4.0353607E7
820:	8 to the exponent 9 = 1.34217728E8
821:	9 to the exponent 9 = 3.87420489E8
822:	10 to the exponent 9 = 1.0E9
823:	-5 to the exponent 10 = 9765625.0
824:	-4 to the exponent 10 = 1048576.0
825:	-3 to the exponent 10 = 59049.0
826:	-2 to the exponent 10 = 1024.0
827:	-1 to the exponent 10 = 1.0
828:	0 to the exponent 10 = 0.0
829:	1 to the exponent 10 = 1.0
830:	2 to the exponent 10 = 1024.0
831:	3 to the exponent 10 = 59049.0
832:	4 to the exponent 10 = 1048576.0
833:	5 to the exponent 10 = 9765625.0
834:	6 to the exponent 10 = 6.0466176E7
835:	7 to the exponent 10 = 2.82475249E8
836:	8 to the exponent 10 = 1.073741824E9
837:	9 to the exponent 10 = 3.486784401E9
838:	10 to the exponent 10 = 1.0E10
839:	Recursion complete!
840:	Advanced Classes Test started...
841:	unidentified is 0 identifies as unidentified
842:	Per Soney is 0 identifies as unidentified
843:	Per Soney is 1 identifies as unidentified
844:	Booooo!
845:	unidentified is 0 identifies as unidentified
846:	I am a student
847:		 Number: 	1
848:		 GPA:    	0.0
849:	Stu Denty is 0 identifies as unidentified
850:	I am a student
851:		 Number: 	1
852:		 GPA:    	0.0
853:	Stu Denty is 0 identifies as unidentified
854:	I am a student
855:		 Number: 	1
856:		 GPA:    	0.3
857:	Stu Denty is 0 identifies as unidentified
858:	I am a student
859:		 Number: 	1
860:		 GPA:    	0.0
861:	Stu Denty is 0 identifies as unidentified
862:	I am a student
863:		 Number: 	1
864:		 GPA:    	3.0002999999999993
865:	Booooo!
866:	I am a student
867:		 Number: 	1
868:		 GPA:    	3.0002999999999993
869:	Stewie Griffin is 2 identifies as cat
870:	I am a student
871:		 Number: 	1
872:		 GPA:    	0.0
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Mr. Teachery is 45 identifies as teacher
876:	Booooo!
877:	I am a student
878:		 Number: 	1
879:		 GPA:    	3.300299999999999
880:	Stewie Griffin is 2 identifies as cat
881:	I am a student
882:		 Number: 	1
883:		 GPA:    	0.3
884:	O1 = java.lang.Object@57536d79
885:	O2 = java.lang.Object@3b0143d3
886:	O3 = java.lang.Object@3b0143d3
887:	Person  as string = Person
888:	Student as string = Student: Person
889:	Teacher as string = Teacher: Person
890:	String  as string = squirrel
891:	JOptionPane as string = utility.io.JOptionPane@5a8e6209
892:	O2==O3
893:	P1==P2
894:	P2==P3
895:	P1==P3
896:	P2==P3
897:	Person is Person
898:	Clone  is Person
899:	Clone is ==
900:	S1 total = 2
901:	S2 total = 2
902:	S3 total = 4
903:	S4 total = 4
904:	S3 total = 9
905:	S4 total = 9
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Boom!!!
912:	Doctor: Person
913:	DiskJockey: Person
914:	MrWachs: Teacher: Person
915:	Piper: HighSchool: Student: Person
916:	Husky: HighSchool: Student: Person
917:	Athlete: Husky: HighSchool: Student: Person
918:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
919:	Grill on the BBQ
920:	Mr. Lawrence Wachs is eating Protein it was Savory
921:	unidentified is eating Apple from Do not eat!
922:	Round 1...
923:	Jock has signed the form!
924:	Round 2...
925:	Jock has scored
926:	Jock has scored
927:	St. Pauls has scored
928:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
929:	Jock SLAPS St. Pauls
930:	KO
931:	Round 3...
932:	Jock has scored
933:	Jock has scored
934:	St. Pauls has scored
935:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
936:	Round 4...
937:	Jock has scored
938:	Jock has scored
939:	St. Pauls has scored
940:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
941:	Hard core ironing of clothes!
942:	Jock wins!
943:	Grill on the BBQ
944:	Jock is eating Protein it was Savory
945:	Class name: Boolean, Hash Code: 1231, To String: true
946:	Class name: Integer, Hash Code: 0, To String: 0
947:	Class name: Double, Hash Code: 300063655, To String: 3.14
948:	Class name: Character, Hash Code: 97, To String: a
949:	Class name: String, Hash Code: 3556498, To String: test
950:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
951:	Class name: JOptionPane, Hash Code: 1535634836, To String: utility.io.JOptionPane@5b87ed94
952:	Class name: Object, Hash Code: 1846412426, To String: java.lang.Object@6e0e048a
953:	true
954:	0
955:	3.14
956:	a
957:	test
958:	Athlete: Husky: HighSchool: Student: Person
959:	Class name: Boolean, Hash Code: 1231, To String: true
960:	Class name: Integer, Hash Code: 0, To String: 0
961:	Class name: Double, Hash Code: 300063655, To String: 3.14
962:	Class name: Character, Hash Code: 97, To String: a
963:	Class name: String, Hash Code: 3556498, To String: test
964:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
965:	Home Owner:
966:	Mr. Lawrence Wachs
967:	And the contents...
968:	testing.prerequisite.cs40s.advancedclasses.Meeting@23e028a9
969:	Mr. Lawrence Wachs is eating Apple from Do not eat!
970:	Grill on the BBQ
971:	Mr. Lawrence Wachs is eating Protein it was Savory
972:	Advanced Classes Test complete!
973:	Collections testing begins...
974:	Testing Node constructors....................
975:	Testing Node toString()......................
976:	Node a = null
977:	Node b = Sass
978:	Node c = Pros
979:	Node d = Joes
980:	Testing Node clone().........................
981:	Node e = null
982:	Node f = Sass
983:	Node g = Pros
984:	Node h = Joes
985:	Testing Node equal().........................
986:	Node a == b? -> false
987:	Node b == c? -> false
988:	Node c == d? -> false
989:	Node d == d? -> true
990:	Node e == a? -> false
991:	Node f == b? -> true
992:	Node g == c? -> true
993:	Node h == d? -> true
994:	Testing Node finalize()......................
995:	Node a = null
996:	Node b = Sass
997:	Node c = Pros
998:	Node d = Joes
999:	Node e = null
1000:	Node f = Sass
1001:	Node g = Pros
1002:	Node h = Joes
1003:	Node a = null
1004:	Node b = null
1005:	Node c = null
1006:	Node d = null
1007:	Node e = null
1008:	Node f = null
1009:	Node g = null
1010:	Node h = null
1011:	Testing default LinkedList constructor.......
1012:	Testing toString, empty, size methods........
1013:	L1 toString -> Empty LinkedList
1014:	L2 toString -> Empty LinkedList
1015:	L1 empty? -> true
1016:	L2 empty? -> true
1017:	L1 size -> 0
1018:	L2 size -> 0
1019:	Test add (first to the back) of the list.....
1020:	addBack -> true	Linked List 	[51]
1021:	addBack -> true	Linked List 	[51,50]
1022:	addBack -> true	Linked List 	[51,50,-50]
1023:	addBack -> true	Linked List 	[51,50,-50,55]
1024:	addBack -> false	Linked List 	[51,50,-50,55]
1025:	Test add (second to the front) of the list...
1026:	addFront -> true	Linked List 	[80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1028:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1029:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1030:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1031:	Re-testing empty, size methods...............
1032:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1033:	L2 empty? -> true	Empty LinkedList
1034:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1035:	L2 size -> 0	Empty LinkedList
1036:	Test get method..............................
1037:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1046:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1047:	Test set method..............................
1048:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1049:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1050:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1051:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1052:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1053:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1054:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1055:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1056:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1058:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1059:	Test equals method...........................
1060:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1061:	List 2 = Empty LinkedList
1062:	List1 == List2 -> false
1063:	Test clone method............................
1064:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1065:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1066:	Re-testing equals...
1067:	List1 == List2 -> true
1068:	Test addAfter method.........................
1069:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1070:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1071:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1072:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1073:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1074:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1075:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1076:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1077:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1078:	Test other edge case
1079:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1080:	Test addBefore method.........................
1081:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1097:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1098:	Test other edge case
1099:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1100:	Test front and back methods..................
1101:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1102:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1103:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1104:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1105:	Clear out list 2
1106:	Front of list 2 = null	Empty LinkedList
1107:	Back of list 2 = null	Empty LinkedList
1108:	Cloning list 2 from list 1
1109:	Test removeFront method......................
1110:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1111:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1112:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1113:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1114:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1115:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1116:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1117:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1118:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1119:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1120:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1121:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1122:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1123:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1124:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1125:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1126:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1127:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1128:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1129:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1130:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1131:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1132:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1133:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1134:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1135:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1136:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1137:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1138:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1139:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1140:	Linked List 	[16,17]	Removing list 1 front = 	16
1141:	Linked List 	[17]	Removing list 1 front = 	17
1142:	Empty LinkedList	Removing list 1 front = 	null
1143:	Cloning list 1 from list 2
1144:	Test removeBack method.......................
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1166:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1167:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1168:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1169:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1170:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1171:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1172:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1173:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1174:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1175:	Linked List 	[100,101]	Removing list 2 back = 	101
1176:	Linked List 	[100]	Removing list 2 back = 	100
1177:	Empty LinkedList	Removing list 2 back = 	null
1178:	Cloning list 2 from list 1
1179:	Test remove method...........................
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1203:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1204:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1205:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1206:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1207:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1208:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1209:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1210:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1211:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1212:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1213:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1214:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1215:	Test contains method.........................
1216:	List 1 (empty) contains 10 = false	Empty LinkedList
1217:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1249:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1250:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1251:	Test firstIndexOf and lastIndexOf methods....
1252:	First index of 5: 	0
1253:	Last  index of 5: 	7
1254:	First index of 7: 	2
1255:	Last  index of 7: 	9
1256:	First index of 8: 	3
1257:	Last  index of 8: 	3
1258:	First index of 9: 	-1
1259:	Last  index of 9: 	-1
1260:	Test numberOf method.........................
1261:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1262:	Number of 5: 	3
1263:	Number of 8: 	1
1264:	Number of 9: 	0
1265:	Test allIndices method.......................
1266:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1267:	Array -> indices 5: 	[0, 4, 7]
1268:	Array -> indices 8: 	[3]
1269:	Array -> indices 9: 	null
1270:	Cloning list 2 from list 1
1271:	Test remove method...........................
1272:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1273:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1274:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1275:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1276:	Test removeLast method.......................
1277:	Linked List 	[6,7,5,6,7,5,6,7]
1278:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1279:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1280:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1281:	Test removeAll method........................
1282:	Linked List 	[6,7,5,6,7,6,7]
1283:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1284:	Removing all 6: 	true	Linked List 	[7,7,7]
1285:	Removing all 9: 	false	Linked List 	[7,7,7]
1286:	Cloning list 1 from list 2
1287:	Test removeAll array method..................
1288:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1289:	Array: 	[5, 6, 9]
1290:	Removing all from array: Linked List 	[7,8,7,7]
1291:	Test removeAll list method..................
1292:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1293:	List 2 	Linked List 	[7,8,7,7]
1294:	Removing all list 2 from list 1...
1295:	List 1 	Linked List 	[5,6,5,6,5,6]
1296:	List 2 	Linked List 	[7,8,7,7]
1297:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1298:	Test containsAll array method................
1299:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1300:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1301:	Test containsAll list method.................
1302:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1303:	Alter list 2...
1304:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1305:	Test addAll array method.....................
1306:	Linked List 	[6,7,8,6,7,5,6,45]
1307:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1308:	Test addAll list method......................
1309:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1310:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1311:	Test subList method..........................
1312:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1313:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1314:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1315:	Pulling out sub-list from 2 to 10: 	null
1316:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1317:	Test fromArray method........................
1318:	Array is 	[5, 6, 7, 8]
1319:	List is 	Linked List 	[5,6,7,8]
1320:	Test fromLinkedList method...................
1321:	1st List is 	Linked List 	[5,6,7,8]
1322:	2nd List is 	Linked List 	[5,6,7,8]
1323:	Test toArray method..........................
1324:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1325:	Testing the imported util LinkedList.........
1326:	Imported constructor...
1327:	Imported add:	[0.0]
1328:	Imported add:	[0.0, 1.23]
1329:	Imported addFirst:	[4.56, 0.0, 1.23]
1330:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1331:	Imported size:	4
1332:	Imported isEmpty:	false
1333:	Imported get:	0.0
1334:	Imported set:	4.56
1335:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1336:	Imported equals:	true
1337:	Imported getFirst:	0.01
1338:	Imported getLast:	7.89
1339:	Imported contains:	true
1340:	Imported removeFirst:	0.01
1341:	Imported removeLast:	7.89
1342:	Imported remove:	1.23
1343:	Imported remove:	false
1344:	Testing the imported util ArrayList.........
1345:	Imported ArrayList:	[a, b, c, d, e]
1346:	Using the enhanced for loop with this object...
1347:	a b c d e Using an iterator object...
1348:	a b c d e Collections testing complete!
1349:	Computer Science 42SAP Course:.............................................................
1350:	Computer Science 42SAP curriculum content..................................................
1351:	AP curriculum - Part 1.....................................................................
1352:	AP: Unit 1 (Primitive Types)...............................................................
1353:	1.1 Why Programming? Why Java?.............................................................
1354:	System.out.print outputs text to the screen and System.out.println outputs with a line break
1355:	More specifically, the code word "System" refers to the "computer system" and the 
1356:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
1357:	methods (or "actions") that take the string literal (which is the word or words in between 
1358:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
1359:	will take the string literal and output it to the default output device - that being the 
1360:	computer screen.
1361:	1.2 Variables and Data Types...............................................................
1362:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
1363:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
1364:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
1365:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
1366:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
1367:	variable can only be one type and only store that specified type of data. However, the data 
1368:	itself can change (or "vary") after the initial declaration. Examples of this are below...
1369:	// Variables declared and assigned initial ("starting") values:
1370:	boolean a = true;
1371:	int     b = 0;
1372:	double  c = 1.0;
1373:	char    d = 'A';
1374:	// Variables content changes ("reassigned"):
1375:	a = false;
1376:	b = 1;
1377:	c = 1.1;
1378:	d = 'B';
1379:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
1380:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
1381:	given the initial value when declared (or initialized) and that value stays locked. These 
1382:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
1383:	the name. Final variables are more efficient for a number of reasons including ease of code 
1384:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
1385:	are below
1386:	// Constants (finals) declared (initialized)
1387:	final boolean FOUND  = true;
1388:	final int     VALUE  = 1;
1389:	final double  AMOUNT = 2.5;
1390:	final char    CODE   = 'X';
1391:	1.3 Expressions and Assignment Statements..................................................
1392:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
1393:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
1394:	context, the word "literal" can also mean a number (like "5"). This usually involves 
1395:	variable types int and double (the number types) used in a math expression or equation. This 
1396:	can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
1397:	evaluated in a formula, they always evaluate to an int answer (solution) and double values 
1398:	will evaluate to a double. Complex (or "compound" expressions can be formed in which 
1399:	the order of operations (or precedence order). This means multiplication and division are 
1400:	evaluated before addition and subtraction. If operations are at the same precedence level, 
1401:	then they are evaluated from left to right.When you try and divide by zero, an error 
1402:	(the "ArithmeticException" error) will occur and the program will stop running. Examples:
1403:	// Arithmetic evaluations using variables
1404:	int    v1 = 5;
1405:	int    v2 = 3;
1406:	int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
1407:	double v4 = 5.2;
1408:	double v5 = 3.3;
1409:	double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
1410:	1.4 Compound Assignment Operators..........................................................
1411:	Compound statements in this context refers to using shortcuts to quickly add or subtract one 
1412:	(increment or decrement) to a variable. You can also use more complex shorthand compound 
1413:	statements to quickly multiply, divide, even modulus a variable with itself or other 
1414:	variables. For example:
1415:	// Shorthand Compound Arithmetic expressions
1416:	int value = 5;
1417:	value++;    // is the same as "value = value + 1;"
1418:	value--;    // is the same as "value = value + 1;"
1419:	value += 5; // is the same as "value = value + 5;"
1420:	value -= 5; // is the same as "value = value - 5;"
1421:	value *= 5; // is the same as "value = value * 5;"
1422:	value /= 5; // is the same as "value = value / 5;"
1423:	value %= 5; // is the same as "value = value % 5;"
1424:	1.5 Casting and Ranges of Variables........................................................
1425:	Casting is the process of "converting" one data type into another data type. When casting 
1426:	an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
1427:	off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
1428:	A char when cast will turn into it's ASCII value. The process of casting involves putting 
1429:	variable to be cast with the type being cast into in round brackets to the left of that 
1430:	variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
1431:	constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
1432:	evaluates an int outside that range, an error will occur (overflow error). For example:
1433:	// Casting data types
1434:	int integer = Integer.MAX_VALUE;
1435:	double doub = Double.MIN_VALUE;
1436:	doub        = (int)integer;
1437:	integer     = (int)doub;
1438:	char letter = 'A';
1439:	integer     = (int)letter;
1440:	AP: Unit 3 (Boolean Expressions And If Statements).........................................
1441:	3.1 Boolean Expressions....................................................................
1442:	A Boolean (true/false) expression is a code statement most likely in a control structure 
1443:	like a conditional statement or loop control structure that evaluates to true or false to 
1444:	make decisions and control the flow of the program. The Boolean expression will require 
1445:	the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
1446:	than", "greater than", "less than or equal to", "greater than or equal to", "equal 
1447:	to", and "not equal to".
1448:	3.2 if Statements and Control Flow.........................................................
1449:	A "Conditional Statement" is also known under other names like "branching statement", "if 
1450:	statement", "one-way selection statement", and "control structure". It uses the reserved 
1451:	keyword "if" along with round brackets which contain the Boolean expression, and curly 
1452:	brackets to contain the control block of all code you wish to be controlled by the 
1453:	conditional statement. Brackets are optional if the block is only one line, and you may also 
1454:	move thos lines up to the same line as the conditional statement. For example:
1455:	// Example of if statements
1456:	int a = 10;
1457:	int b = 10;
1458:	if (a == a) {
1459:	    // "equal"
1460:	}
1461:	3.3 if-else Statements.....................................................................
1462:	The "else" statement is paired with an "if" statement to control the flow of the logic so 
1463:	that the conditional now evaluates to both true and false. This can be called a "two 
1464:	way selection" (for true/false). An "else" must always follow an "if" statement first. 
1465:	For example:
1466:	// if with "else" 
1467:	double c = 1.45, d = 1.5; 
1468:	if (c < d) {
1469:	    // "Less than"
1470:	}
1471:	else {
1472:	    // "Greater than"
1473:	}
1474:	// Shortened lines version
1475:	char e = 'A';
1476:	char f = 'a';
1477:	if (e != f) e = '!';
1478:	else        e = '=';
1479:	3.4 else if Statements.....................................................................
1480:	When making multiple decisions (more than 2), the "else if" statement is added to an 
1481:	existing "if" statement to have multiple branches of logic for the code to follow. This 
1482:	is much more efficient than seperate "if" statements. This can also be called "multi-way 
1483:	selection" (or "if-else-if"). An "else" statement is also still the final option (but 
1484:	this is not required). For example:
1485:	// Showing a "chain" of else if statements
1486:	int g = 0;
1487:	if (g == 1) {
1488:	    // The first if is true
1489:	}
1490:	else if (g == 2) {
1491:	    // The next if is true
1492:	}
1493:	else if (g == 3) {
1494:	    // The next if (in the "chain" of ifs) is true
1495:	}
1496:	else {
1497:	    // Nothing above is true, so go to this else
1498:	}
1499:	3.5 Compound Boolean Expressions...........................................................
1500:	The process of "nesting" means to place one conditional statement inside the "block" of 
1501:	another conditional statement. The logical operators: "and", "or", and "not" are 
1502:	represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
1503:	is used to combine logical boolean expressions such that ALL expressions need to be true for 
1504:	the entire statement to be true. The operator OR is used to combine logical boolean 
1505:	expressions such that ANY expression can be true for the entire statement to be true. The 
1506:	operator NOT reverses the logic so that true statements are evaluated as false (and visa 
1507:	versa). If the statement contains multiple Boolean expressions and the result of the 
1508:	evaluation of one expression has already determined the expressions result, then the 
1509:	rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
1510:	evaluation". For example:
1511:	// Logical operators and "nesting"
1512:	int    age = 17;
1513:	double iq  = 1.0;
1514:	if (age >= 18 && iq > 90) {
1515:	    // with "and" ("&&") BOTH have to be true
1516:	}
1517:	else if (age >= 18 || iq > 0) {
1518:	    // with "or" ("||") EITHER can be true
1519:	}
1520:	else {
1521:	    // Case if neither evaluates
1522:	    if (age > 0) {
1523:	        // A "nested if statement"
1524:	    }
1525:	}
1526:	3.6 Equivalent Boolean Expressions.........................................................
1527:	Boolean (true/false) expressions turned into logical statements used by control structures 
1528:	like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
1529:	Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
1530:	not necessarily applicable to this exam). This just means that complex statements need to be 
1531:	evaluated by using mathematical rules (like "order of operations") and logical operators 
1532:	(like "and, or, not") to determine the final Boolean result. This could determine if a 
1533:	control structure (like an "if" statement) runs a block of code or not.
1534:	3.7 Comparing Objects......................................................................
1535:	The use of an advanced data type like an "Object" in code means that comparison 
1536:	operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
1537:	double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
1538:	determine the equality of two objects. For example:
1539:	// Use of the built-in equals method with Objects
1540:	String word1 = "edgy";
1541:	String word2 = "edGy";
1542:	if (word1.equals(word2)) {
1543:	    // "W1=W2"
1544:	}
1545:	else if (word1.equalsIgnoreCase(word2)) {
1546:	    // "W1 kind of == W2"
1547:	}
1548:	AP: Unit 4 (Iteration).....................................................................
1549:	4.1 while Loops............................................................................
1550:	The word "Iteration" is another word for "Loop" or "Looping" which is a control 
1551:	struture to have code statements "repeat". Like conditional ("if") statements, iteration 
1552:	statements control the flow of a program's logic. Also like if statements, iteration 
1553:	statements are controlled by a Boolean expression (true or false). The result of the Boolean 
1554:	expression will result in the code executing zero or mulitple times (until the expression 
1555:	evaluates to false). The expression is evaluated each time through an iteration of the loop. 
1556:	A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
1557:	(thus the loop never stops looping - or never stops running). It is possible a loop will 
1558:	never run if it evaluates to false before the body (block) of the loop. If you use the 
1559:	keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
1560:	potentially exit any method the loop is written inside. The "while" loop is a event loop or 
1561:	non-deterministic loop, which means it is not usually used for counting but when you do 
1562:	not know how many times the loop needs to run (a certain event can cause the loop to 
1563:	end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
1564:	(traversing) arrays and lists, and searching and sorting values. For example:
1565:	// Example of a simple while loop
1566:	int counter = 0;
1567:	while (counter < 10) {
1568:	    counter++;
1569:	}
1570:	4.2 for Loops..............................................................................
1571:	The "for" loop is another looping form. The for loop is a count controlled loop that 
1572:	generally is used when a loop needs to run a specific number of times. There are three 
1573:	parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
1574:	the starting, ending, and change of the loop. In a for loop a counting variable is 
1575:	generally declared right inside the loop to a starting value, then the Boolean condition 
1576:	to end the loop, then the change value increasing (increment) or decreasing (decrement) 
1577:	that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
1578:	by one" error occurs when a loop runs one too many or one too few times. For Example:
1579:	// Example of a for loop
1580:	for (int i = 0; i < 10; i++) {
1581:	    // potential code body...
1582:	}
1583:	4.3 Developing Algorithms Using Strings....................................................
1584:	The String class allows for several "built-in" methods of the String class to manipulate 
1585:	the string and the value it stores. Several of these methods could apply to the A.P. exam 
1586:	including travelling (traversing) string characters, pulling out substrings (parts 
1587:	of the string), reversing a string, etc. For example:
1588:	// Example of string methods with a loop
1589:	String word   = "completion";
1590:	String parts1 = word.substring(3);
1591:	String parts2 = word.substring(1,7);
1592:	for (int i = 0; i < word.length(); i++) {
1593:	    char character = word.charAt(i);
1594:	}
1595:	4.4 Nested Iteration.......................................................................
1596:	Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
1597:	This means you can place a iteration statement inside the block of another iteration 
1598:	statement. The inner loop must complete all of its iterations before the outer loop 
1599:	can continue. For example:
1600:	// Example of nested loops
1601:	for (int i = 0; i < 10; i++) {
1602:	    for (int j = 0; j < 10; j++) {
1603:	        int k = 10;
1604:	        while (k < 10) {
1605:	            // potential code body...
1606:	        }
1607:	    }
1608:	}
1609:	4.5 Informal Code Analysis.................................................................
1610:	Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
1611:	loops are typical A.P. exam questions. You should practice these types of questions.
1612:	AP curriculum - Part 2.....................................................................
1613:	AP: Unit 2 (Using Objects).................................................................
1614:	2.1 Objects: Instances of Classes..........................................................
1615:	A "class" is the "blueprint" for creating an "object". In Java, the class is a way to 
1616:	use code to model "things" using properties and methods. The object is what the class 
1617:	"creates" when the class is made into a specific "object" of that class. The various 
1618:	terms used for this vary but all revolve around the same concepts. The term "object" 
1619:	can also be called a "instance" of the class. The term "properties" can also be 
1620:	called "things about the class", or "descriptors", or "adjectives", or 
1621:	"fields". The term "methods" could also be called "what the class can do", or 
1622:	"actions", or "verbs", or "functions". 
1623:	// Example of a simple class with properties and methods
1624:	class Person {
1625:	    String name;
1626:	    int age;
1627:	    void walk() {
1628:	        // code logic could go here
1629:	    }
1630:	    void talk() {
1631:	        // code logic could go here
1632:	    }
1633:	}
1634:	2.2 Creating and Storing Objects (Instantiation)...........................................
1635:	Methods are a way to break up code into logic modules and it also provides a way to avoid 
1636:	repeating code and be able to reuse sections of code logic. You can think of methods as 
1637:	analogous to "machines" that perform "actions" and you can reuse. They are also analogous to 
1638:	"functions" in math that may take a variable "input" and generate an "answer".  The term 
1639:	"parameter" (and you may have zero, one, or more than one) is the "input" (if needed) to a 
1640:	method that is passed to the method. The value(s) passed are called "argument(s)". When you 
1641:	define the method in the method "signature" line, the round brackets can contain 
1642:	parameters separated by comma (if needed). A method may also give an "output" in the form 
1643:	of its "return" value (which also might not be needed, in which case it is a "void" method).
1644:	A method is "overloaded" if you have more than one method with the exact same name but 
1645:	different parameters. Classes have "constructor" methods that are called when 
1646:	a class is instantiated into an object. Constructor methods do not have a return type 
1647:	(not even the keyword "void"). They must have the exact same name as the class (including a 
1648:	capital letter). They are used to set the properties of the class to starting (or 
1649:	"default") values. If a class has multiple constructor methods, they are said to be 
1650:	overloaded constructors. When a line of code is used to instantiate a class into an instance 
1651:	of that class, the line includes the name of the class, the identifier name of the object, 
1652:	then an equals ("="), then the keyword "new" (which allots new memory for this 
1653:	advanced data type), then a call to a constructor method. If not constructor method 
1654:	is called, then the object references a "null" value until such time it is given a value to 
1655:	reference.
1656:	// Example of a class with constructors and instantiation
1657:	class Person {
1658:	    Person() {
1659:	        // code logic
1660:	    }
1661:	    Person(int age) {
1662:	        // code logic
1663:	    }
1664:	}
1665:	Person person1 = new Person();
1666:	Person person2 = new Person(5);
1667:	2.3 Calling a Void Method..................................................................
1668:	A "non-static" method is a method (meaning a "action", "behaviour", "procedure", 
1669:	or "verb") that does not use the "static" modifier word in the method signature line. 
1670:	A method with no prameters (or "inputs") means the method is defined with empty round 
1671:	brackets "( )". The "behavior" or action the method performs is defined in the body 
1672:	block of the method (between the two curly "{ }" brackets). The A.P. term "procedural 
1673:	abstraction" refers to a programmer being able to call a method without knowing how the 
1674:	method was written (also known as "black box" programming). When methods are "called" 
1675:	the execution flow stops, jumps and runs all the method body (or until a "return" 
1676:	statement) and then returns to the next line of execution after the method call line 
1677:	(or part of a code expression line). Methods can also be called from objects (or 
1678:	"instances") of a class using the dot "." operator. Void method do not return anthing 
1679:	(no "outputs") and use the keyword modifier "void" in the method signature in place of 
1680:	the return type.
1681:	// Examples of methods, parameters, return, and calling
1682:	public void show() {
1683:	    System.out.println("*")
1684:	}
1685:	public void show(char value) {
1686:	    System.out.println(value);
1687:	}
1688:	public int double(int number) {
1689:	    return number * 2;
1690:	} 
1691:	show();
1692:	show('A');
1693:	int answer = double(5);
1694:	2.4 Calling a Void Method with Parameters..................................................
1695:	A "non-static void" methods with parameters is a method with no outputs, but has input(s). 
1696:	This means the method signature has defined parameter(s) within the round brackets "( )" 
1697:	seperated by commas (if necessary). When this type of method is called, the "arguments" 
1698:	passed to this method must be in the same order in terms of data type. A method is 
1699:	"overloaded" when you have two or more methods with the same name but different and 
1700:	distinct parameter lists.
1701:	// Examples of method overloading
1702:	public void show() {
1703:	    System.out.println("*")
1704:	}
1705:	public void show(char value) {
1706:	    System.out.println(value);
1707:	}
1708:	public void show(int value) {
1709:	    System.out.println(value);
1710:	}
1711:	2.5 Calling a Non-void Method..............................................................
1712:	A method that does return a value, defines the return "type" in the method signature and 
1713:	the keyword "return" somewhere in the method body (at least once). When calling a return 
1714:	method, the value returned must be stored (in a variable) or used as part of an expression.
1715:	2.6 String Objects: Concatenation, Literals, and More......................................
1716:	The "String" class allows you to create String variables, concatenate them (join) 
1717:	together and use "built-in" methods of the String class. String literals (contained in 
1718:	quotes "") can be assigned to String variables or concatenated with Strings. String methods 
1719:	do not change the String ("immutable") object. The "+" or the "+=" operators can be used 
1720:	to concatenate Strings (resulting in a new String object). Primitives (like int, double, 
1721:	etc.) can also be concatenated with String objects. Those are now automatically converted 
1722:	to Strings and then concatenated. Escape sequences is the character "\" followed 
1723:	by another character to make certain outputs or changes to a String object. These include: 
1724:	\" for a quote, \\ for a slash, and \n for a new line.
1725:	// Examples of Strings and escape sequences
1726:	String str1 = "cat";
1727:	String str2 = str1 + "ty";
1728:	str1 += str2;
1729:	str2 = "\n" + str1 + "\\" + "\" dog";
1730:	2.7 String Methods.........................................................................
1731:	The "API" or Application Program Interface is a "library" of code that could be imported 
1732:	into a Java project or it could automatically be part of every Java project without needing 
1733:	an import. Classes and libraries are organized into "packages" in Java (also known as 
1734:	"namespaces"). The String class is in the "java.lang" package. Strings are collections 
1735:	of "char" values index from 0 up to the length of the String minus 1 (just like arrays 
1736:	are indexed). String methods used are: the String constructor "String s = new String();", 
1737:	the "length()" method, the "substring(int)" and "substring(int,int)" methods, the 
1738:	"indexOf(String)" method, the "equals(String)" method, and the 
1739:	"compareTo(String)" method.
1740:	// Examples of String methods
1741:	String str3 = new String("chatty");
1742:	// Constructs object with same sequence of characters as str3
1743:	int length = str3.length();
1744:	// Returns the number of characters in a String object
1745:	String str4 = str3.substring(1);
1746:	// Returns substring(from) starting at index "from" to the end
1747:	String str5 = str3.substring(1,3);
1748:	// Returns substring(from, to) starting at index "from" to index "to"
1749:	int index = str3.indexOf("hat");
1750:	// Returns the index of the first occurrence (returns -1 if not found)
1751:	boolean result1 = str3.equals(str4);
1752:	// Returns true if this is equal to other (returns false otherwise)
1753:	int result2 = str3.compareTo(str5);
1754:	// Returns value < 0 if less than other, returns 0 if equal to other,
1755:	// and returns value > 0 if greater than other
1756:	2.8 Wrapper Classes: Integer and Double....................................................
1757:	A "wrapper class" is a class type that is based in a primitive data type. For example the 
1758:	primitive data type "int" has the wrapper class "Integer". Similarily, the "Double" 
1759:	wrapper class, wraps around the "double" primitive type. The wrapper classes (using a 
1760:	capital letter) are part of java.lang and have built-in methods like "parseInt()" and 
1761:	"parseDouble()". Other methods include: "Integer(int)" a constructor, 
1762:	"Double(double)" a constructor, "MIN_VALUE" a constant, "MAX_VALUE", "intValue()", and 
1763:	"doubleValue()". Boxing and unboxing can be done between the wrapper classes and the 
1764:	primitive types (known as "autoboxing"). The term "boxing" means the conversion between 
1765:	primitive types and corresponding wrapper. The term "unboxing" means the conversion 
1766:	from the wrapper class to the primitive type.
1767:	// Example of wrapper classes and methods...
1768:	int     integerPrimitive1 = Integer.parseInt("10");
1769:	double  doublePrimitive1  = Double.parseDouble("1.2");
1770:	Integer integerObject     = new Integer("10");
1771:	Double  doubleObject      = new Double("1.2");
1772:	int     integerPrimitive2 = integerObject.intValue();
1773:	double  doublePrimitive2  = doubleObject.doubleValue();
1774:	int     minInteger        = Integer.MIN_VALUE;
1775:	int     maxInteger        = Integer.MAX_VALUE;
1776:	double  minDouble         = Double.MIN_VALUE;
1777:	double  maxDouble         = Double.MAX_VALUE;
1778:	// Boxing and unboxing...
1779:	int     integerPrimitive3 = integerObject1;
1780:	double  doublePrimitive3  = doubleObject1;
1781:	Integer integerObject2    = integerPrimitive3;
1782:	Double  doubleObject2     = doublePrimitive3;
1783:	2.9 Using the Math Class...................................................................
1784:	The "Math" class is part of the java.lang package and has built-in static methods that can 
1785:	be called. Useful methods include: abs, pow, sqrt, and random. Including manipulating the 
1786:	random method in a formula to define random numbers in a range. Examples of this follow...
1787:	// Examples of the Math class methods and randoms...
1788:	int    value1 = Math.abs(-1);
1789:	double value2 = Math.abs(-1.2);
1790:	double value3 = Math.pow(2,3);
1791:	double value4 = Math.sqrt(9);
1792:	double value5 = Math.random();
1793:	final double HIGH = 10.9d;
1794:	final double LOW  = 5.5d;
1795:	double value6 = (HIGH - LOW + 1.0d) * Math.random() + LOW;
1796:	AP: Unit 5 (Writing Classes)...............................................................
1797:	5.1 Anatomy of a Class.....................................................................
1798:	The properties (attributes) and methods (actions) of a class can be defined in terms of 
1799:	visibility. This means that the keywords "public" and "private" can be used as a 
1800:	modifier in the front of a method signature or at the front of a property declaration line 
1801:	to define the encapsulation level. The public keyword means the property can be accessed (and 
1802:	modified) both inside the class and from other classes outside the class. In terms of methods 
1803:	it means the method can be called within the class (by other methods) and outside the class 
1804:	from other classes using the dot "." operator. Classes and constructor methods are 
1805:	designated public. The concept of "encapsulation" is used to make certain data and actions 
1806:	private and protect them from outside classes and perhaps only allow access through accessor 
1807:	and modifier ("getter" and "setter") methods.
1808:	// Class example private/public properties and methods
1809:	class Apple { 
1810:	    public int number;
1811:	    private double price;
1812:	    public void eat() {
1813:	        // logic here
1814:	    }
1815:	    private void spoil() {
1816:	        // logic here
1817:	    }
1818:	}
1819:	5.2 Constructors...........................................................................
1820:	A constructor method is a special method defined in a class that is called when a class is 
1821:	instantiated into an instance (or "object") of that class. The constructor method has to have 
1822:	the exact same name as the class (including letter case) and no return type (not even the 
1823:	word void). Constructors are usually used to set the initial (or "default") values for the 
1824:	class properties. This can be said to be setting the "state" of the object. If any of the 
1825:	properties (attributes) are another class level instance variable (not a primitive type), 
1826:	then this class is said to have a "has-a" relationship with that class. This can also be 
1827:	called "association" or "composition" between the classes. Constructors can have 
1828:	parameters passed to the class that can be used in setting the initial state. When no 
1829:	constructor is written, Java provides a no-argument constructor, and the instance 
1830:	variables are set to default values.
1831:	// Class example association and constructors
1832:	class Basket {
1833:	    public Apple apple;
1834:	    public Basket() {
1835:	        // logic here
1836:	    }
1837:	    public Basket(Apple apple) {
1838:	        // logic here
1839:	    }
1840:	}
1841:	5.2 Documentation with Comments............................................................
1842:	Comments are a documentation system that allows programmers to leave notes for themselves or 
1843:	other programmers. This can serve several purposes including (but not limited to) 
1844:	documenting names and dates, explaining code logic, working through problem solving logic, 
1845:	and others. In Java, the two forward slashes // allows a comment at the end of a line of code or 
1846:	on its own line. A slash and a star /* opens a comment block which will continue until a star 
1847:	and slash */ closes the comment block. The slash and two stars /** open the JavaDoc style of 
1848:	comment block which many IDEs (e.g. NetBeans) recognize and help with commenting and to create 
1849:	API documentation. Methods should be commented with the method's purpose (a brief description), 
1850:	any pre-conditions (the parameters if any), and post-conditions (the return type if any) of the 
1851:	method.
1852:	// Comments...
1853:	// a standard comment
1854:	/* opens a comment block */
1855:	/** JavaDoc comment block */
1856:	5.4 Accessor Methods.......................................................................
1857:	Accessor methods are the names given to methods in a class that "access" data. this usually 
1858:	means properties of the class that are encapsulated (private). Other names for 
1859:	accessors are "getters" or "get" methods. The method (behaviours, actions, functions, 
1860:	procedures) of a class are accessed with the dot operator (".") after the name of the 
1861:	object (instance of the class). Non-void methods that return a value can then be used as 
1862:	part of a code line expression. The return type of the method must be compatible with any 
1863:	data types (e.g. variables) being used in the expression. If the return type is a class level 
1864:	type then the method returns a reference to the actual object ("return by reference") not a 
1865:	reference to a copy ("return by value") of the actual object. If the "System.out.print" 
1866:	or "System.out.println" methods are called and an object is passed to those methods, the 
1867:	object's "toString()" method is automatically 
1868:	invoked (called) in the output.
1869:	// Examples of calling methods in a class
1870:	class Fighter {
1871:	    private int health;
1872:	    private Weapon weapon;
1873:	    public int getHealth() {
1874:	        return health;
1875:	    }
1876:	    public Weapon getWeapon() {
1877:	        return weapon;
1878:	    }
1879:	}
1880:	Fighter fighter = new Fighter();
1881:	int hp = fighter.health;
1882:	Weapon club = fighter.getWeapon();
1883:	5.5 Mutator Methods........................................................................
1884:	Mutator methods are the name given to methods that "change" a property of a class (usually 
1885:	an encapsulated property). These can be void methods (but are sometimes boolean methods to 
1886:	indicate success or not).
1887:	// Examples of calling mutator methods in a class
1888:	class Fighter {
1889:	    private int health;
1890:	    public int setHealth(int health) {
1891:	        this.health = health;
1892:	    }
1893:	}
1894:	Fighter fighter = new Fighter();
1895:	fighter.setHealth(10);
1896:	5.6 Writing Methods........................................................................
1897:	Methods are written to model an "action". Also known as functions or procedures, methods may 
1898:	or may not have zero, one, or more than one "input(s)" called "parameters" (or empty round 
1899:	brackets if no inputs are required). Methods may have zero (a "void" method) or one "output" 
1900:	known as the return type. If the parameter is a primitive data type, then a copy of the data 
1901:	from the original primitive type is passed to the method ("pass by value"). If the parameter 
1902:	is an advanced data type ("class" level data) then a reference to that object is passed. This 
1903:	means that any changes the method makes to the object will be reflected (unless the object 
1904:	was an immutable object). Because the passed reference object parameter and the original 
1905:	argument object are "linked" they can be referred to as "aliases".
1906:	5.7 Static Variables and Methods...........................................................
1907:	Although they can be called from an object of a class, "static" methods are generally called 
1908:	from the class name itself. Static methods "belong" to the class itself and therefore 
1909:	do not require you to instantiate an object to call a method from that class. The keyword 
1910:	"static" is included as a modifier word in the method signature line. Static methods 
1911:	cannot access or change the values of instance properties of a class but can change/access 
1912:	static properties. Static properties (variables) also "belong" to the class itself 
1913:	and are "shared" by all objects of the class. Static properties can be either public or 
1914:	private and are also declared using the "static" keyword as a modifier for the 
1915:	property. Static properties are used with the class name and then the dot operator and then 
1916:	the name of the property (although they can also be accessed from an object name). 
1917:	// Static properties and methods
1918:	class Fighter {
1919:	    public static int number;
1920:	    public static void attack() {
1921:	        // logic here
1922:	    }
1923:	}
1924:	Fighter.number = 10;
1925:	Fighter.attack();
1926:	5.8 Scope and Access.......................................................................
1927:	Variables can be used throughout code in classes and methods and have a "scope" defining where 
1928:	the variable can be accessed and modified. A "local" variable is one which is defined in a 
1929:	code block like a control structure (a loop or if statement) or a method. The scope of that 
1930:	variable is that internal code block and no other variables can have the same name within 
1931:	that scope. A "global" variable is one declared at the class level and its scope is 
1932:	the entire code module (class). When there is a local variable with the same name as a global 
1933:	variable, the variable name will reference the local variable over the global variable. This 
1934:	could be a potential name conflict. The keyword "this" with the dot operator can make an 
1935:	explicit reference to the global variable over the local variable. 
1936:	// Local and global variable scopes
1937:	class Fighter {
1938:	    public int number;
1939:	    public void attack(int number) {
1940:	        this.number = number;
1941:	    }
1942:	}
1943:	5.9 this Keyword...........................................................................
1944:	The keyword "this" is an explicit reference to the (eventual) object within a class. It 
1945:	refers to the name of an object that will later be instantiated by the class the word this 
1946:	is used within. The word "this" can be used to give explicit control to a global variable 
1947:	or call a class method. The keyword "this" can also be used to pass the current object 
1948:	as an actual parameter in a method call.
1949:	5.10 Ethical and Social Implications of Computing Systems..................................
1950:	The social and ethical considerations of computing and Computer Science are things as 
1951:	an A.P. student you should be aware of. These are not necessarily testable concepts on the 
1952:	A.P. exam. The general ideas of legality, impact, and reliability of computing systems 
1953:	and software should always be considered by programers and Computer Scientists.
1954:	AP: Unit 9 (Inheritance)...................................................................
1955:	9.1 Creating Superclasses and Subclasses...................................................
1956:	// 
1957:	9.2 Writing Constructors for Subclasses....................................................
1958:	Inheritance is the relationship between two or 
1959:	more classes of code
1960:	// 
1961:	9.3 Overriding Methods.....................................................................
1962:	// 
1963:	9.4 super Keyword..........................................................................
1964:	// 
1965:	9.5 Creating References Using Inheritance Hierarchies......................................
1966:	// 
1967:	9.6 Polymorphism...........................................................................
1968:	// 
1969:	9.7 Object Superclass......................................................................
1970:	// 
1971:	AP curriculum - Part 3.....................................................................
1972:	AP: Unit 6 (Arrays)........................................................................
1973:	6.1 Array Creation and Access..............................................................
1974:	...
1975:	6.2 Traversing Arrays......................................................................
1976:	...
1977:	6.3 Enhanced for Loop for Arrays...........................................................
1978:	...
1979:	6.4 Developing Algorithms Using Arrays.....................................................
1980:	...
1981:	AP: Unit 8 (2D Arrays).....................................................................
1982:	8.1 2D Arrays..............................................................................
1983:	...
1984:	8.2 Traversing 2D Arrays...................................................................
1985:	...
1986:	AP curriculum - Part 4.....................................................................
1987:	AP: Unit 7 (Array List)....................................................................
1988:	7.1 Introduction to ArrayList..............................................................
1989:	...
1990:	7.2 ArrayList Methods......................................................................
1991:	...
1992:	7.3 Traversing ArrayLists..................................................................
1993:	...
1994:	7.4 Developing Algorithms Using ArrayLists.................................................
1995:	...
1996:	7.5 Searching..............................................................................
1997:	...
1998:	7.6 Sorting................................................................................
1999:	...
2000:	7.7 Ethical Issues Around Data Collection..................................................
2001:	...
2002:	AP: Unit 10 (Recursion)....................................................................
2003:	10.1 Recursion.............................................................................
2004:	...
2005:	10.2 Recursive Searching and Sorting.......................................................
2006:	...
2007:	Computer Science 42SAP practice tests......................................................
2008:	AP Practice Test 1.........................................................................
2009:	// Question 1...
2010:	Consider the following code segment.
2011:	int a = 5;
2012:	int b = 2;
2013:	double c = 3.0;
2014:	System.out.println(5 + a / b * c - 1);
2015:	What is printed when the code segment is executed?
2016:	(A) 0.666666666666667
2017:	(B) 9.0
2018:	(C) 10.0
2019:	(D) 11.5
2020:	(E) 14.0
2021:	// Answer 1...
2022:	C
2023:	// Question 2...
2024:	Which of the following statements assigns a random
2025:	integer between 25 and 60, inclusive to rn?
2026:	(A) int rnA = (int)(Math.random() * 25) + 36;
2027:	(B) int rnB = (int)(Math.random() * 25) + 60;
2028:	(C) int rnC = (int)(Math.random() * 26) + 60;
2029:	(D) int rnD = (int)(Math.random() * 36) + 25;
2030:	(E) int rnE = (int)(Math.random() * 60) + 25;
2031:	// Answer 2...
2032:	A
2033:	D
2034:	// Question 3...
2035:	Which of the following best describes the value
2036:	of the Boolean expression shown below?
2037:	a && !(b || a)
2038:	(A) The value is always true
2039:	(B) The value is always false
2040:	(C) The value is true when a has the value 
    false, and is false otherwise
2041:	(D) The value is true when b has the value 
    false, and is false otherwise
2042:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
2043:	// Answer 3...
2044:	B
2045:	// Question 4...
2046:	Consider the following code segment
2047:	int val = 48;
2048:	int div = 6;
2049:	while((val % 2 == 0) && div > 0) {
2050:	    if (val % div == 0) {
2051:	        System.out.print(val + " ");
2052:	    }
2053:	    val /= 2;
2054:	    div--;
2055:	}
2056:	What is printed when the code segment is executed?
2057:	(A) 48 12 6
2058:	(B) 48 12 6 3
2059:	(C) 48 12 6 3 1
2060:	(D) 48 24 12 6
2061:	(E) 48 24 12 6 3
2062:	// Answer 4...
2063:	A
2064:	// Question 5...
2065:	Which of the following code segments is equivalent to the code below
2066:	if (x >= 1) x = x * 3;
2067:	if (x > 3) x = 0;
2068:	(A) x = 0
2069:	(B) if (x > 1) x = 0;
2070:	(C) if (x > 3) x = 0;
2071:	(D) if (x >= 1) x = 0;
2072:	(E) none of the above
2073:	// Answer 5...
2074:	B
2075:	// Question 6...
2076:	When is the following Boolean expression true
2077:	(a and b are integers)?
2078:	(a < b) && !(b > a)
2079:	(A) Always true
2080:	(B) Never true
2081:	(C) a = b
2082:	(D) a < b
2083:	(E) a > b
2084:	// Answer 6...
2085:	B
2086:	// Question 7...
2087:	Consider the following code segment
2088:	int i = a random number such that 1 <= i <= n;
2089:	for (int a = 2; a <= i; a++)
2090:	    for (int b = 1; b < i; b++)
2091:	        System.out.println("*");
2092:	(A) 0
2093:	(B) 1
2094:	(C) 2
2095:	(D) n - 1
2096:	(E) n - 2
2097:	// Answer 7...
2098:	B
2099:	// Question 8...
2100:	Consider the following code segment
2101:	int p = 5;
2102:	int q = 2;
2103:	int sum = 0;
2104:	while (p <= 8) {
2105:	    sum += p % q;
2106:	    p++;
2107:	    q++;
2108:	}
2109:	(A) 1
2110:	(B) 0
2111:	(C) 13
2112:	(D) 7
2113:	(E) 4
2114:	// Answer 8...
2115:	D
2116:	// Question 9...
2117:	Consider the following code segment
2118:	for (int i = 0; i <= 3; i++) {
2119:	    for (int j = 1; j <= 5; j+=2) {
2120:	        System.out.println("*");
2121:	    }
2122:	}
2123:	(A) 3
2124:	(B) 6
2125:	(C) 9
2126:	(D) 12
2127:	(E) 15
2128:	// Answer 9...
2129:	D
2130:	// Question 10...
2131:	What are the values of a and b after the for loop
2132:	finishes?
2133:	int a = 10;
2134:	int b = 3;
2135:	int t = 0;
2136:	for (int i = 1; i < 4; i++) {
2137:	    t = a;
2138:	    a = i + b;
2139:	    b = t - i;
2140:	}
2141:	(A) a = 5 and b = -2
2142:	(B) a = 6 and b = 7
2143:	(C) a = 6 and b = 3
2144:	(D) a = 12 and b = 1
2145:	(E) a = 5 and b = 8
2146:	// Answer 10...
2147:	E
2148:	AP Practice Test 2.........................................................................
2149:	// Question 1...
2150:	Consider the following class definition
2151:	public class Example
2152:	{
2153:	     private int x;
2154:	     // constructor not shown
2155:	}
2156:	Which of the following is a correct header for a
2157:	method that would return the value of the private
2158:	instance variable x so that it can be used in a
2159:	class other than Example?
2160:	(A) private int getX()
2161:	(B) private void getX()
2162:	(C) public int getX()
2163:	(D) public void getX()
2164:	(E) public void getX(int x)
2165:	// Answer 1...
2166:	C
2167:	// Question 2...
2168:	Consider the following class definitions
2169:	public class Thing1 {
2170:	     public void calc(int n) {
2171:	          n *= 3;
2172:	          System.out.print(n);
2173:	     }
2174:	}
2175:	public class Thing2 extends Thing1 {
2176:	     public void calc(int n) {
2177:	          n += 2;
2178:	          super.calc(n);
2179:	          System.out.print(n);
2180:	     }
2181:	}
2182:	The following code seqment appears in a class
2183:	other than Thing1 or Thing2
2184:	Thing1 t = new Thing2();
2185:	t.calc(2);
2186:	What is printed as a result of executing the
2187:	code segment?
2188:	(A) 4
2189:	(B) 6
2190:	(C) 68
2191:	(D) 124
2192:	(E) 1212
2193:	// Answer 2...
2194:	D
2195:	// Question 3...
2196:	Consider the following class definitions.
2197:	public class Student {
2198:	    public String getFood() {
2199:	        return "Pizza";
2200:	    }
2201:	    public String getInfo() {
2202:	        return "Studying";
2203:	    }
2204:	}
2205:	public class GradStudent extends Student {
2206:	    public String getFood() {
2207:	        return "Taco";
2208:	    }
2209:	    public String getInfo() {
2210:	        super.getInfo();
2211:	        return "Eating";
2212:	    }
2213:	}
2214:	What is printed when the following code is
2215:	executed?
2216:	Student s = new GradStudent();
2217:	System.out.println(s.getInfo());
2218:	(A) Pizza
2219:	(B) Taco
2220:	(C) Studying
2221:	(D) Eating
2222:	(E) Studying
2223:	    Eating
2224:	// Answer 3...
2225:	D
2226:	// Question 4...
2227:	Given the following class declarations:
2228:	public class Car {
2229:	    private String make;
2230:	    public Car(String theMake) {
2231:	        make = theMake;
2232:	    }
2233:	    public String getMake() {
2234:	        return make;
2235:	    }
2236:	}
2237:	public class ElectricCar extends Car {
2238:	    public ElectricCar() {
2239:	        super("Ford");
2240:	    }
2241:	    public ElectricCar(String theMake) {
2242:	        super(theMake);
2243:	    } 
2244:	}
2245:	Which of the following will cause a compile
2246:	time error?
2247:	(A) Car myCar = new Car();
2248:	(B) Car myCar1 = new ElectricCar();
2249:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2250:	(D) Car myCar3 = new Car("Ford");
2251:	(E) Car myCar4 = new ElectricCar("Ford");
2252:	// Answer 4...
2253:	A
2254:	// Question 5...
2255:	Given the following declarations.
2256:	public class Vehicle {
2257:	    public void test(Car x, SportsCar y) { }
2258:	}
2259:	public class Car extends Vehicle {
2260:	}
2261:	public class SportsCar extends Car {
2262:	}
2263:	Also consider the following code that appears
2264:	in a different class.
2265:	Vehicle v = new Vehicle();
2266:	Car c = new Car();
2267:	SportsCar sporty = new SportsCar();
2268:	Which of the following is a correct call to test ?
2269:	(A) v.test(sporty, v);
2270:	(B) sporty.test(c, c);
2271:	(C) v.test(sporty, c);
2272:	(D) sporty.test(sporty, v);
2273:	(E) c.test(sporty, sporty);
2274:	// Answer 5...
2275:	E
2276:	// Question 6...
2277:	Class C extends class B, which extends class A. 
2278:	Also, all of the three classes implement a public
2279:	method test(). How can a method in an object of
2280:	class C invoke the test() method defined in class
2281:	A (without creating a new instance of class A)?
2282:	(A) test();
2283:	(B) super.super.test();
2284:	(C) super.test();
2285:	(D) this.test();
2286:	(E) There is no way to call a method in a 
2287:	    grandparent class from a grandchild class
2288:	// Answer 6...
2289:	E
2290:	// Question 7...
2291:	Given the following class declarations. Assume
2292:	that Parent p = new Child(); appears in a client
2293:	program. What is the result of the call p.m1();
2294:	public class Parent {
2295:	    public void m1() {
2296:	        System.out.print("pm1");
2297:	        m2();
2298:	    }
2299:	    public void m2() {
2300:	        System.out.print("pm2");
2301:	    }
2302:	}
2303:	public class Child extends Parent {
2304:	    public void m1() {
2305:	        super.m1();
2306:	        System.out.print("cm1");
2307:	    }
2308:	    public void m2() {
2309:	        super.m2();
2310:	        System.out.print("cm2");
2311:	    }
2312:	}
2313:	(A) pm1pm2cm2cm1
2314:	(B) pm1pm2
2315:	(C) pm1pm2cm1cm2
2316:	(D) pm1cm1
2317:	(E) pm1
2318:	// Answer 7...
2319:	pm1pm2cm2cm1// Question 8...
2320:	Given the following class declarations.
2321:	public class Animal {
2322:	    public void eat() {
2323:	        System.out.println("AE");
2324:	    }
2325:	}
2326:	public class Bear extends Animal {
2327:	    public void growl() {
2328:	        System.out.println("BG");
2329:	    }
2330:	}
2331:	Assume the following declaration is in a 
2332:	different class.
2333:	Animal b = new Bear();
2334:	Which of the following will compile without error?
2335:	I.   b.eat();
2336:	II.  b.growl();
2337:	III. ((Bear)b).growl();
2338:	(A) I only
2339:	(B) II only
2340:	(C) III only
2341:	(D) I and III only
2342:	(E) I, II, and III
2343:	// Answer 8...
2344:	B
2345:	// Question 9...
2346:	Consider the following partial class definitions.
2347:	public class C1 {
2348:	    private int num;
2349:	    private String name;
2350:	    public C1(int theNum) {
2351:	        num = theNum
2352:	    } 
2353:	    public C1(String theName) {
2354:	        name = theName;
2355:	    }
2356:	}
2357:	public class C2 extends C1 {
2358:	    // methods not shown
2359:	}
2360:	Which of the following constructors are valid for
2361:	C2?
2362:	I. public C2() { }
2363:	II. public C2(int quan) { super(quan); }
2364:	III. public C2(String label) { super(label); }
2365:	(A) All three are valid
2366:	(B) II only
2367:	(C) III only
2368:	(D) II and III
2369:	(E) None are valid
2370:	// Answer 9...
2371:	D
2372:	// Question 10...
2373:	Given the following class definition. What are 
2374:	the values of x, y, and z just before method2
2375:	returns?
2376:	public class Class1 {
2377:	    public int method1(int a, int b) {
2378:	        int temp = a;
2379:	        a = b;
2380:	        b = temp;
2381:	        return b;
2382:	    }  
2383:	    public void method2() {
2384:	        int x = 3;
2385:	        int y = 5;
2386:	        int z = method1(x, y);
2387:	    }
2388:	}
2389:	(A) x=3,y=3,z=3
2390:	(B) x=3,y=5,z=3
2391:	(C) x=5,y=3,z=5
2392:	(D) x=5,y=3,z=3
2393:	(E) x=3,y=5,z=5
2394:	// Answer 10...
2395:	B
2396:	AP Practice Test 3 not running.............................................................
2397:	AP Practice Test 4 not running.............................................................
2398:	Computer Science 42SAP Post Secondary Content:.............................................
2399:	~~~ SIMULATED {GUI Frame} DIALOG: Virus ~~~ 
2400:	Permanent Storage Post Secondary Content:..................................................
2401:	// Learn about 'error traps'
2402:	Divide by zero -> java.lang.ArithmeticException: / by zero
2403:	// Create sample data to use
2404:	// Save ONE piece of data to that permanent file
2405:	// Now involve the user to get a file name
2406:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2407:	File already exists!
2408:	// Open file with one line (no user involvment)
2409:	line read was Defenestration
2410:	// Open file with multiple lines (user picks file)
2411:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2412:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
2413:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
2414:	This line read was q ~ pq ~ �
2415:	// Class to save/open one line (no user)
2416:	Before: Defenestration
2417:	After : Defenestration
2418:	// Class to save/open multiple lines (with user)
2419:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2420:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2421:	// Now save/open on a complex data type
2422:	Before: Athlete: Husky: HighSchool: Student: Person
2423:	After:  Athlete: Husky: HighSchool: Student: Person
2424:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2425:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2426:	Stacks and Queues Post Secondary Content:..................................................
2427:	// Create objects for testing...
2428:	// Create and Test a stack object...
2429:	// Test toString, size, isEmpty, and push methods...
2430:	Empty = true	Size = 0	Empty Stack
2431:	// Loop through adding random values
2432:	Empty = false	Size = 1	Stack top -> [Fundy] <- bottom
2433:	Empty = false	Size = 2	Stack top -> [miffs,Fundy] <- bottom
2434:	Empty = false	Size = 3	Stack top -> [fasts,miffs,Fundy] <- bottom
2435:	Empty = false	Size = 4	Stack top -> [Fabio,fasts,miffs,Fundy] <- bottom
2436:	Empty = false	Size = 5	Stack top -> [prods,Fabio,fasts,miffs,Fundy] <- bottom
2437:	Empty = false	Size = 6	Stack top -> [vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2438:	Empty = false	Size = 7	Stack top -> [ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2439:	Empty = false	Size = 8	Stack top -> [Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2440:	Empty = false	Size = 9	Stack top -> [raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2441:	Empty = false	Size = 10	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2442:	// Test clone method...
2443:	Clone stack: Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2444:	// Test equals method...
2445:	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
==
Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2446:	// Now change the copy
2447:	// Now check again
2448:	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
!=
Stack top -> [holds] <- bottom
2449:	// Re-clone the stack, and output
2450:	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2451:	// Text the pop method...
2452:	Clone stack:	Empty = false	Size = 10	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2453:	// Loop through removing values
2454:	Popped -> bound	Empty = false	Size = 9	Stack top -> [raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2455:	Popped -> raspy	Empty = false	Size = 8	Stack top -> [Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2456:	Popped -> Court	Empty = false	Size = 7	Stack top -> [ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2457:	Popped -> ester	Empty = false	Size = 6	Stack top -> [vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2458:	Popped -> vague	Empty = false	Size = 5	Stack top -> [prods,Fabio,fasts,miffs,Fundy] <- bottom
2459:	Popped -> prods	Empty = false	Size = 4	Stack top -> [Fabio,fasts,miffs,Fundy] <- bottom
2460:	Popped -> Fabio	Empty = false	Size = 3	Stack top -> [fasts,miffs,Fundy] <- bottom
2461:	Popped -> fasts	Empty = false	Size = 2	Stack top -> [miffs,Fundy] <- bottom
2462:	Popped -> miffs	Empty = false	Size = 1	Stack top -> [Fundy] <- bottom
2463:	Popped -> Fundy	Empty = true	Size = 0	Empty Stack
2464:	Popped -> null	Empty = true	Size = 0	Empty Stack
2465:	// Test peek (top is wrapper no testing needed)...
2466:	Clone Top = null
2467:	Stack Top = bound
2468:	// Test to array and to linked list...
2469:	Linked List 	[bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy]
2470:	Array   	[bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy]
2471:	// Test our constructors...
2472:	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2473:	Stack top -> [bound,raspy,Court,ester,vague,prods,Fabio,fasts,miffs,Fundy] <- bottom
2474:	// Test the Queue object...
2475:	// Test toString,size,isEmpty, and enqueue methods...
2476:	Empty = true	Size = 0	Empty Queue
2477:	// Loop through adding random values
2478:	Empty = false	Size = 1	Queue back -> [abort] <- front
2479:	Empty = false	Size = 2	Queue back -> [berms,abort] <- front
2480:	Empty = false	Size = 3	Queue back -> [Gerti,berms,abort] <- front
2481:	Empty = false	Size = 4	Queue back -> [hicks,Gerti,berms,abort] <- front
2482:	Empty = false	Size = 5	Queue back -> [Davie,hicks,Gerti,berms,abort] <- front
2483:	Empty = false	Size = 6	Queue back -> [Kippy,Davie,hicks,Gerti,berms,abort] <- front
2484:	Empty = false	Size = 7	Queue back -> [arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2485:	Empty = false	Size = 8	Queue back -> [rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2486:	Empty = false	Size = 9	Queue back -> [night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2487:	Empty = false	Size = 10	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2488:	// Test clone method...
2489:	Clone Queue 			Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2490:	// Test equals method...
2491:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
==
Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2492:	// Now change the duplicate
2493:	// Now check again
2494:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
==
Queue back -> [aches] <- front
2495:	// Re-clone the queue, and output
2496:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2497:	// Test the dequeue method...
2498:	Clone queue:	Empty = false	Size = 10	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2499:	// Loop through removing values
2500:	Dequeued -> abort	Empty = false	Size = 9	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms] <- front
2501:	Dequeued -> berms	Empty = false	Size = 8	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti] <- front
2502:	Dequeued -> Gerti	Empty = false	Size = 7	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks] <- front
2503:	Dequeued -> hicks	Empty = false	Size = 6	Queue back -> [stdio,night,rolls,arced,Kippy,Davie] <- front
2504:	Dequeued -> Davie	Empty = false	Size = 5	Queue back -> [stdio,night,rolls,arced,Kippy] <- front
2505:	Dequeued -> Kippy	Empty = false	Size = 4	Queue back -> [stdio,night,rolls,arced] <- front
2506:	Dequeued -> arced	Empty = false	Size = 3	Queue back -> [stdio,night,rolls] <- front
2507:	Dequeued -> rolls	Empty = false	Size = 2	Queue back -> [stdio,night] <- front
2508:	Dequeued -> night	Empty = false	Size = 1	Queue back -> [stdio] <- front
2509:	Dequeued -> stdio	Empty = true	Size = 0	Empty Queue
2510:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
2511:	// Test front and back...
2512:	Clone Front = null
2513:	Queue Front = abort
2514:	Clone Back  = null
2515:	Queue Back  = stdio
2516:	// Test to array and to linked list...
2517:	Linked List 	[stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort]
2518:	Array   	[stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort]
2519:	// Test our constructors...
2520:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2521:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2522:	// Constructors from stack to queue (and back)...
2523:	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front	 into 	Stack top -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- bottom
2524:	Stack top -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- bottom	 into 	Queue back -> [stdio,night,rolls,arced,Kippy,Davie,hicks,Gerti,berms,abort] <- front
2525:	Searching and Sorting Post Secondary Content:..............................................
2526:	// For the I.B. Exam, you only need to know:
2527:	// Search: linear search and binary search
2528:	// Sort: bubble sort and the selection sort
2529:	// Create some constants (edges) for the data
2530:	// Create some random data to search through and sort
2531:	// Including edge cases to test
2532:	// Create data to store the results...
2533:	// The simpliest of searches
2534:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2535:	// Now the linear search on all test data
2536:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2537:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2538:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2539:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2540:	Array [68,38,73,20,2,70,54,100,50,50,51,16,21,60,36,74,33,16,77,14,3,23,84,17,100,16,72,10,13,53,60,99,52,10,76,69,83,2,8,72,47,94,45,72,58,90,83,100,46,50,36,29,53,40,79,54,83,67,40,36,33,69,63,70,68 ... (line shortened) ...
2541:	// Simple sort...
2542:	Sorted Array: 	[2,2,3,3,5,8,9,10,10,11,13,14,15,16,16,16,16,17,19,20,20,21,23,25,29,31,33,33,35,35,36,36,36,36,37,38,40,40,45,46,46,47,47,50,50,50,50,50,51,52,53,53,54,54,58,59,60,60,63,64,64,67,68,68 ... (line shortened) ...
2543:	// We will re-scramble array for further testing
2544:	Sorted Array: 	[64,66,34,98,55,49,59,75,83,14,4,42,54,38,4,26,38,76,84,69,70,2,54,69,44,13,21,22,32,66,57,13,95,25,8,79,59,94,32,82,27,56,25,57,4,4,73,55,23,82,90,67,17,79,27,98,3,63,46,94,10,57,85,37 ... (line shortened) ...
2545:	// Now bubble sort (from bubbles rising from water)
2546:	Original Array 	[64,66,34,98,55,49,59,75,83,14,4,42,54,38,4,26,38,76,84,69,70,2,54,69,44,13,21,22,32,66,57,13,95,25,8,79,59,94,32,82,27,56,25,57,4,4,73,55,23,82,90,67,17,79,27,98,3,63,46,94,10,57,85,3 ... (line shortened) ...
2547:	// Now selection sort (from selecting the smallest)
2548:	Original Array 	[64,66,34,98,55,49,59,75,83,14,4,42,54,38,4,26,38,76,84,69,70,2,54,69,44,13,21,22,32,66,57,13,95,25,8,79,59,94,32,82,27,56,25,57,4,4,73,55,23,82,90,67,17,79,27,98,3,63,46,94,10,57,85,3 ... (line shortened) ...
2549:	// Now binary search (named after two or dividing)
2550:	// NOTE: binary search can only happen on sorted list
2551:	// Redo some of the test data...
2552:	Array [2,3,4,4,4,4,5,7,8,10,13,13,14,16,17,21,21,22,23,24,24,25,25,26,27,27,29,31,32,32,32,32,33,34,34,36,37,37,38,38,42,42,44,44,46,46,46,48,49,50,52,52,54,54,55,55,55,55,56,56,57,57,57,58,59,59,61,6 ... (line shortened) ...
2553:	Array [2,3,4,4,4,4,5,7,8,10,13,13,14,16,17,21,21,22,23,24,24,25,25,26,27,27,29,31,32,32,32,32,33,34,34,36,37,37,38,38,42,42,44,44,46,46,46,48,49,50,52,52,54,54,55,55,55,55,56,56,57,57,57,58,59,59,61,6 ... (line shortened) ...
2554:	Array [2,3,4,4,4,4,5,7,8,10,13,13,14,16,17,21,21,22,23,24,24,25,25,26,27,27,29,31,32,32,32,32,33,34,34,36,37,37,38,38,42,42,44,44,46,46,46,48,49,50,52,52,54,54,55,55,55,55,56,56,57,57,57,58,59,59,61,6 ... (line shortened) ...
2555:	Array [2,3,4,4,4,4,5,7,8,10,13,13,14,16,17,21,21,22,23,24,24,25,25,26,27,27,29,31,32,32,32,32,33,34,34,36,37,37,38,38,42,42,44,44,46,46,46,48,49,50,52,52,54,54,55,55,55,55,56,56,57,57,57,58,59,59,61,6 ... (line shortened) ...
2556:	Array [2,3,4,4,4,4,5,7,8,10,13,13,14,16,17,21,21,22,23,24,24,25,25,26,27,27,29,31,32,32,32,32,33,34,34,36,37,37,38,38,42,42,44,44,46,46,46,48,49,50,52,52,54,54,55,55,55,55,56,56,57,57,57,58,59,59,61,6 ... (line shortened) ...
2557:	// Use class for searching and sorting
2558:	// Create random linked list data
2559:	// Create random array data
2560:	// Place all test cases into another linked list
2561:	// Execute the linear search on all list test data...
2562:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2563:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2564:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2565:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2566:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2567:	// Execute the linear search on all array test data...
2568:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2569:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2570:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2571:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2572:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2573:	// Execute all the sorts on all test data...
2574:	// Bubble sort LinkedList data...
2575:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2576:	// Bubble sort array data...
2577:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2578:	// Selection sort LinkedList data...
2579:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2580:	// Selection sort array data...
2581:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2582:	// Shell sort LinkedList data...
2583:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2584:	// Shell sort array data...
2585:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2586:	// Insertion sort LinkedList data...
2587:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2588:	// Insertion sort array data...
2589:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2590:	// Quick sort LinkedList data...
2591:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2592:	// Quick sort array data...
2593:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2594:	// Merge sort LinkedList data...
2595:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2596:	// Merge sort array data...
2597:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2598:	// Heap sort LinkedList data...
2599:	Before: 	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Ro ... (line shortened) ...
2600:	// Heap sort array data...
2601:	Before: 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis, ... (line shortened) ...
2602:	// Execute the binary search on all List test data...
2603:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2604:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2605:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2606:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2607:	Linked List 	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,a ... (line shortened) ...
2608:	// Execute the binary search on all Array test data...
2609:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2610:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2611:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2612:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2613:	[fogs,Zeno,font,foxy,Bret,murk,olds,went,Yagi,peen,Myer,Deny,face,ebbs,bale,ants,Bard,elks,Anna,Clim,sous,slid,Troy,Brok,snow,Jere,incl,page,pimp,dory,Dalt,Lora,Mair,wart,Mali,Rora,yuck,axis,sort,Zibo ... (line shortened) ...
2614:	Binary Trees Post Secondary Content:.......................................................
2615:	// Constants/variables for creating random values...
2616:	// Creating some TreeNode objects...
2617:	// Linking the TreeNodes...
2618:	// Testing TreeNode equals...
2619:	// Testing TreeNode toString...
2620:	60
2621:	67
2622:	97
2623:	// Creating a Tree object...
2624:	// Test the insert method...
2625:	// Insert one more...
2626:	// Test the search of the tree...
2627:	Should be found     = true
2628:	Should NOT be found = false
2629:	// Test toString() and pre, post, in order traversals
2630:	Binary Tree:
Order: Linked List 	[23,38,33,24,96,27]
Pre:   Linked List 	[23,38,33,24,27,96]
Post:  Linked List 	[27,24,33,96,38,23]
In:    Linked List 	[23,24,27,33,38,96]
2631:	// Building second tree (test clone) and test equals
2632:	1st tree -> Linked List 	[23,24,27,33,38,96]
2633:	2nd tree -> Linked List 	[10,13,14,20,20,84]
2634:	1st!=2nd
2635:	// Building a third tree (test clone) and test equals
2636:	1st tree -> Linked List 	[23,24,27,33,38,96]
2637:	3rd tree -> Linked List 	[23,24,27,33,38,96]
2638:	1st==3rd
2639:	// Build all our data structures from each other...
2640:	// Create variable objects...
2641:	// Create array from variables...
2642:	// Create LinkedList from array...
2643:	// Create Stack from LinkedList...
2644:	// Create Queue from Stack...
2645:	// Create Tree from Queue...
2646:	// Output variables,array,list,stack,queue,tree...
2647:	vowed
2648:	belly
2649:	racer
2650:	bekki
2651:	hokey
2652:	[vowed,belly,racer,bekki,hokey]
2653:	Linked List 	[vowed,belly,racer,bekki,hokey]
2654:	Stack top -> [vowed,belly,racer,bekki,hokey] <- bottom
2655:	Queue back -> [vowed,belly,racer,bekki,hokey] <- front
2656:	Binary Tree:
Order: Linked List 	[vowed,belly,racer,bekki,hokey]
Pre:   Linked List 	[vowed,belly,bekki,racer,hokey]
Post:  Linked List 	[bekki,hokey,racer,belly,vowed]
In:    Linked List 	[bekki,bell ... (line shortened) ...
2657:	// Now re-building queue from tree
2658:	// Now re-building stack from queue
2659:	// Now re-building LinkedList from stack...
2660:	// Now re-building array from LinkedList...
2661:	// Output array,list,stack,queue,tree again...
2662:	[bekki,belly,hokey,racer,vowed]
2663:	Linked List 	[bekki,belly,hokey,racer,vowed]
2664:	Stack top -> [bekki,belly,hokey,racer,vowed] <- bottom
2665:	Queue back -> [bekki,belly,hokey,racer,vowed] <- front
2666:	Binary Tree:
Order: Linked List 	[vowed,belly,racer,bekki,hokey]
Pre:   Linked List 	[vowed,belly,bekki,racer,hokey]
Post:  Linked List 	[bekki,hokey,racer,belly,vowed]
In:    Linked List 	[bekki,bell ... (line shortened) ...
