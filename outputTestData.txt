1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	Hello World
13:	I'm in the world
14:	Good-bye world!
15:	Make a quote " 
16:	Make a slash \ 
17:	Make a 	 tab 
18:	Make a new line 
 break 
19:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
20:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
21:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
22:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
23:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
24:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
25:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
29:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
34:	a = false
35:	b = 1
36:	c = 1.2
37:	d = A
38:	e = apple
39:	x = 10
40:	x = 20
41:	y = 30
42:	y = 30
43:	x = 28
44:	y = 5
45:	z = 3
46:	3.141592658389, 99, Y, true, Wachs
47:	f = 25
48:	g = 25.0
49:	g = 25.999999999999
50:	h = 25
51:	k = 2.99999999
52:	l = 2
53:	m = 2.0
54:	n = A
55:	o = 65
56:	p = F
57:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
58:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
59:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
60:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
61:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
62:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
63:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
64:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
65:	Word hippopotomonsprosesquippedaiophobia is length 35
66:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
67:	answer1 = 3.141592653589793
68:	answer2 = 0.8775825618903728
69:	answer3 = 1.0
70:	answer4 = 125.0
71:	answer5 = 3.0
72:	answer6 = -0.6931471805599453
73:	seed = 0.788495426049864
74:	low    = 1.0
75:	high   = 10.0
76:	number = 8.88495426049864
77:	value = 8
78:	card is 44
79:	equal
80:	The example is less than
81:	!=
82:	W1 kind of == W2
83:	Keep trying
84:	counter = 0
85:	counter = 1
86:	counter = 2
87:	counter = 3
88:	counter = 4
89:	counter = 5
90:	counter = 6
91:	counter = 7
92:	counter = 8
93:	counter = 9
94:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
95:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
96:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
97:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
98:	i = 0
99:	i = 1
100:	i = 2
101:	i = 3
102:	i = 4
103:	i = 5
104:	i = 6
105:	i = 7
106:	i = 8
107:	i = 9
108:	counting = 100
109:	counting = 90
110:	counting = 80
111:	counting = 70
112:	counting = 60
113:	counting = 50
114:	counting = 40
115:	counting = 30
116:	counting = 20
117:	counting = 10
118:	counting = 0
119:	i = 99.789
120:	i = 19.007428571428573
121:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
122:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
123:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
125:	Starting to Learn methods...
126:	*
127:	*
128:	Phenakistoscope
129:	Volleywood
130:	pancakes
131:	Spider-man
132:	Batman
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Number is 4
334:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
335:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
336:	Completed Learning Methods!
337:	Start learning arrays...
338:	333
339:	666
340:	666
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	333
440:	0 = 666
441:	1 = 0
442:	2 = 0
443:	3 = 0
444:	4 = 0
445:	5 = 0
446:	6 = 0
447:	7 = 0
448:	8 = 0
449:	9 = 0
450:	10 = 0
451:	11 = 0
452:	12 = 0
453:	13 = 0
454:	14 = 0
455:	15 = 0
456:	16 = 0
457:	17 = 0
458:	18 = 0
459:	19 = 0
460:	20 = 0
461:	21 = 0
462:	22 = 0
463:	23 = 0
464:	24 = 0
465:	25 = 0
466:	26 = 0
467:	27 = 0
468:	28 = 0
469:	29 = 0
470:	30 = 0
471:	31 = 0
472:	32 = 0
473:	33 = 0
474:	34 = 0
475:	35 = 0
476:	36 = 0
477:	37 = 0
478:	38 = 0
479:	39 = 0
480:	40 = 0
481:	41 = 0
482:	42 = 0
483:	43 = 0
484:	44 = 0
485:	45 = 0
486:	46 = 0
487:	47 = 0
488:	48 = 0
489:	49 = 0
490:	50 = 0
491:	51 = 0
492:	52 = 0
493:	53 = 0
494:	54 = 0
495:	55 = 0
496:	56 = 0
497:	57 = 0
498:	58 = 0
499:	59 = 0
500:	60 = 0
501:	61 = 0
502:	62 = 0
503:	63 = 0
504:	64 = 0
505:	65 = 0
506:	66 = 0
507:	67 = 0
508:	68 = 0
509:	69 = 0
510:	70 = 0
511:	71 = 0
512:	72 = 0
513:	73 = 0
514:	74 = 0
515:	75 = 0
516:	76 = 0
517:	77 = 0
518:	78 = 0
519:	79 = 0
520:	80 = 0
521:	81 = 0
522:	82 = 0
523:	83 = 0
524:	84 = 0
525:	85 = 0
526:	86 = 0
527:	87 = 0
528:	88 = 0
529:	89 = 0
530:	90 = 0
531:	91 = 0
532:	92 = 0
533:	93 = 0
534:	94 = 0
535:	95 = 0
536:	96 = 0
537:	97 = 0
538:	98 = 0
539:	99 = 333
540:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
541:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
542:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
543:	~~~ SIMULATED {Message} DIALOG: [3,1,2,5,1,10,4,2,10,3,6,5,5,9,9,8,4,10,7,3,4,6,2,3,6,2,6,4,8,4,7,9,6,3,8,3,7,10,2,10,3,3,3,9,2,2,10,9,9,3,] ~~~ 
544:	Random character was x
545:	% } ` H d F 8 0 | > R 4 q { : 5 _ I F } C i ^ \ J ; N ' o . 
i d G 7 y b K v } b g 7 ; S n F U T 0 9 2 " c t o h Q @ 4 & 
$ | V S > S G } { n 9 2 l ^ I " 6 y c 1 [ a " < ( : / F I ! 
# < ` N , w r b g ... (line shortened) ...
546:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	X O X 
O X O 
X O X 

549:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
550:	Completed learning arrays!
551:	Start Learning classes...
552:	Complete Learning classes
553:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
556:	Computer Science 40S Course:...............................................................
557:	Recursion test started...
558:	Recursive factorials............................
559:	-1 factorial = 1
560:	0 factorial = 1
561:	1 factorial = 1
562:	2 factorial = 2
563:	3 factorial = 6
564:	4 factorial = 24
565:	5 factorial = 120
566:	6 factorial = 720
567:	7 factorial = 5040
568:	8 factorial = 40320
569:	9 factorial = 362880
570:	10 factorial = 3628800
571:	11 factorial = 39916800
572:	12 factorial = 479001600
573:	13 factorial = 6227020800
574:	14 factorial = 87178291200
575:	15 factorial = 1307674368000
576:	16 factorial = 20922789888000
577:	17 factorial = 355687428096000
578:	18 factorial = 6402373705728000
579:	19 factorial = 121645100408832000
580:	20 factorial = 2432902008176640000
581:	Recursive powers................................
582:	-5 to the exponent -5 = -3.2E-4
583:	-4 to the exponent -5 = -9.765625E-4
584:	-3 to the exponent -5 = -0.00411522633744856
585:	-2 to the exponent -5 = -0.03125
586:	-1 to the exponent -5 = -1.0
587:	0 to the exponent -5 = 4.9E-324
588:	1 to the exponent -5 = 1.0
589:	2 to the exponent -5 = 0.03125
590:	3 to the exponent -5 = 0.00411522633744856
591:	4 to the exponent -5 = 9.765625E-4
592:	5 to the exponent -5 = 3.2E-4
593:	6 to the exponent -5 = 1.286008230452675E-4
594:	7 to the exponent -5 = 5.9499018266198606E-5
595:	8 to the exponent -5 = 3.0517578125E-5
596:	9 to the exponent -5 = 1.6935087808430286E-5
597:	10 to the exponent -5 = 1.0E-5
598:	-5 to the exponent -4 = 0.0016
599:	-4 to the exponent -4 = 0.00390625
600:	-3 to the exponent -4 = 0.012345679012345678
601:	-2 to the exponent -4 = 0.0625
602:	-1 to the exponent -4 = 1.0
603:	0 to the exponent -4 = 4.9E-324
604:	1 to the exponent -4 = 1.0
605:	2 to the exponent -4 = 0.0625
606:	3 to the exponent -4 = 0.012345679012345678
607:	4 to the exponent -4 = 0.00390625
608:	5 to the exponent -4 = 0.0016
609:	6 to the exponent -4 = 7.716049382716049E-4
610:	7 to the exponent -4 = 4.1649312786339027E-4
611:	8 to the exponent -4 = 2.44140625E-4
612:	9 to the exponent -4 = 1.5241579027587258E-4
613:	10 to the exponent -4 = 1.0E-4
614:	-5 to the exponent -3 = -0.008
615:	-4 to the exponent -3 = -0.015625
616:	-3 to the exponent -3 = -0.037037037037037035
617:	-2 to the exponent -3 = -0.125
618:	-1 to the exponent -3 = -1.0
619:	0 to the exponent -3 = 4.9E-324
620:	1 to the exponent -3 = 1.0
621:	2 to the exponent -3 = 0.125
622:	3 to the exponent -3 = 0.037037037037037035
623:	4 to the exponent -3 = 0.015625
624:	5 to the exponent -3 = 0.008
625:	6 to the exponent -3 = 0.004629629629629629
626:	7 to the exponent -3 = 0.0029154518950437317
627:	8 to the exponent -3 = 0.001953125
628:	9 to the exponent -3 = 0.0013717421124828531
629:	10 to the exponent -3 = 0.001
630:	-5 to the exponent -2 = 0.04
631:	-4 to the exponent -2 = 0.0625
632:	-3 to the exponent -2 = 0.1111111111111111
633:	-2 to the exponent -2 = 0.25
634:	-1 to the exponent -2 = 1.0
635:	0 to the exponent -2 = 4.9E-324
636:	1 to the exponent -2 = 1.0
637:	2 to the exponent -2 = 0.25
638:	3 to the exponent -2 = 0.1111111111111111
639:	4 to the exponent -2 = 0.0625
640:	5 to the exponent -2 = 0.04
641:	6 to the exponent -2 = 0.027777777777777776
642:	7 to the exponent -2 = 0.02040816326530612
643:	8 to the exponent -2 = 0.015625
644:	9 to the exponent -2 = 0.012345679012345678
645:	10 to the exponent -2 = 0.01
646:	-5 to the exponent -1 = -0.2
647:	-4 to the exponent -1 = -0.25
648:	-3 to the exponent -1 = -0.3333333333333333
649:	-2 to the exponent -1 = -0.5
650:	-1 to the exponent -1 = -1.0
651:	0 to the exponent -1 = 4.9E-324
652:	1 to the exponent -1 = 1.0
653:	2 to the exponent -1 = 0.5
654:	3 to the exponent -1 = 0.3333333333333333
655:	4 to the exponent -1 = 0.25
656:	5 to the exponent -1 = 0.2
657:	6 to the exponent -1 = 0.16666666666666666
658:	7 to the exponent -1 = 0.14285714285714285
659:	8 to the exponent -1 = 0.125
660:	9 to the exponent -1 = 0.1111111111111111
661:	10 to the exponent -1 = 0.1
662:	-5 to the exponent 0 = 1.0
663:	-4 to the exponent 0 = 1.0
664:	-3 to the exponent 0 = 1.0
665:	-2 to the exponent 0 = 1.0
666:	-1 to the exponent 0 = 1.0
667:	0 to the exponent 0 = 1.0
668:	1 to the exponent 0 = 1.0
669:	2 to the exponent 0 = 1.0
670:	3 to the exponent 0 = 1.0
671:	4 to the exponent 0 = 1.0
672:	5 to the exponent 0 = 1.0
673:	6 to the exponent 0 = 1.0
674:	7 to the exponent 0 = 1.0
675:	8 to the exponent 0 = 1.0
676:	9 to the exponent 0 = 1.0
677:	10 to the exponent 0 = 1.0
678:	-5 to the exponent 1 = -5.0
679:	-4 to the exponent 1 = -4.0
680:	-3 to the exponent 1 = -3.0
681:	-2 to the exponent 1 = -2.0
682:	-1 to the exponent 1 = -1.0
683:	0 to the exponent 1 = 0.0
684:	1 to the exponent 1 = 1.0
685:	2 to the exponent 1 = 2.0
686:	3 to the exponent 1 = 3.0
687:	4 to the exponent 1 = 4.0
688:	5 to the exponent 1 = 5.0
689:	6 to the exponent 1 = 6.0
690:	7 to the exponent 1 = 7.0
691:	8 to the exponent 1 = 8.0
692:	9 to the exponent 1 = 9.0
693:	10 to the exponent 1 = 10.0
694:	-5 to the exponent 2 = 25.0
695:	-4 to the exponent 2 = 16.0
696:	-3 to the exponent 2 = 9.0
697:	-2 to the exponent 2 = 4.0
698:	-1 to the exponent 2 = 1.0
699:	0 to the exponent 2 = 0.0
700:	1 to the exponent 2 = 1.0
701:	2 to the exponent 2 = 4.0
702:	3 to the exponent 2 = 9.0
703:	4 to the exponent 2 = 16.0
704:	5 to the exponent 2 = 25.0
705:	6 to the exponent 2 = 36.0
706:	7 to the exponent 2 = 49.0
707:	8 to the exponent 2 = 64.0
708:	9 to the exponent 2 = 81.0
709:	10 to the exponent 2 = 100.0
710:	-5 to the exponent 3 = -125.0
711:	-4 to the exponent 3 = -64.0
712:	-3 to the exponent 3 = -27.0
713:	-2 to the exponent 3 = -8.0
714:	-1 to the exponent 3 = -1.0
715:	0 to the exponent 3 = 0.0
716:	1 to the exponent 3 = 1.0
717:	2 to the exponent 3 = 8.0
718:	3 to the exponent 3 = 27.0
719:	4 to the exponent 3 = 64.0
720:	5 to the exponent 3 = 125.0
721:	6 to the exponent 3 = 216.0
722:	7 to the exponent 3 = 343.0
723:	8 to the exponent 3 = 512.0
724:	9 to the exponent 3 = 729.0
725:	10 to the exponent 3 = 1000.0
726:	-5 to the exponent 4 = 625.0
727:	-4 to the exponent 4 = 256.0
728:	-3 to the exponent 4 = 81.0
729:	-2 to the exponent 4 = 16.0
730:	-1 to the exponent 4 = 1.0
731:	0 to the exponent 4 = 0.0
732:	1 to the exponent 4 = 1.0
733:	2 to the exponent 4 = 16.0
734:	3 to the exponent 4 = 81.0
735:	4 to the exponent 4 = 256.0
736:	5 to the exponent 4 = 625.0
737:	6 to the exponent 4 = 1296.0
738:	7 to the exponent 4 = 2401.0
739:	8 to the exponent 4 = 4096.0
740:	9 to the exponent 4 = 6561.0
741:	10 to the exponent 4 = 10000.0
742:	-5 to the exponent 5 = -3125.0
743:	-4 to the exponent 5 = -1024.0
744:	-3 to the exponent 5 = -243.0
745:	-2 to the exponent 5 = -32.0
746:	-1 to the exponent 5 = -1.0
747:	0 to the exponent 5 = 0.0
748:	1 to the exponent 5 = 1.0
749:	2 to the exponent 5 = 32.0
750:	3 to the exponent 5 = 243.0
751:	4 to the exponent 5 = 1024.0
752:	5 to the exponent 5 = 3125.0
753:	6 to the exponent 5 = 7776.0
754:	7 to the exponent 5 = 16807.0
755:	8 to the exponent 5 = 32768.0
756:	9 to the exponent 5 = 59049.0
757:	10 to the exponent 5 = 100000.0
758:	-5 to the exponent 6 = 15625.0
759:	-4 to the exponent 6 = 4096.0
760:	-3 to the exponent 6 = 729.0
761:	-2 to the exponent 6 = 64.0
762:	-1 to the exponent 6 = 1.0
763:	0 to the exponent 6 = 0.0
764:	1 to the exponent 6 = 1.0
765:	2 to the exponent 6 = 64.0
766:	3 to the exponent 6 = 729.0
767:	4 to the exponent 6 = 4096.0
768:	5 to the exponent 6 = 15625.0
769:	6 to the exponent 6 = 46656.0
770:	7 to the exponent 6 = 117649.0
771:	8 to the exponent 6 = 262144.0
772:	9 to the exponent 6 = 531441.0
773:	10 to the exponent 6 = 1000000.0
774:	-5 to the exponent 7 = -78125.0
775:	-4 to the exponent 7 = -16384.0
776:	-3 to the exponent 7 = -2187.0
777:	-2 to the exponent 7 = -128.0
778:	-1 to the exponent 7 = -1.0
779:	0 to the exponent 7 = 0.0
780:	1 to the exponent 7 = 1.0
781:	2 to the exponent 7 = 128.0
782:	3 to the exponent 7 = 2187.0
783:	4 to the exponent 7 = 16384.0
784:	5 to the exponent 7 = 78125.0
785:	6 to the exponent 7 = 279936.0
786:	7 to the exponent 7 = 823543.0
787:	8 to the exponent 7 = 2097152.0
788:	9 to the exponent 7 = 4782969.0
789:	10 to the exponent 7 = 1.0E7
790:	-5 to the exponent 8 = 390625.0
791:	-4 to the exponent 8 = 65536.0
792:	-3 to the exponent 8 = 6561.0
793:	-2 to the exponent 8 = 256.0
794:	-1 to the exponent 8 = 1.0
795:	0 to the exponent 8 = 0.0
796:	1 to the exponent 8 = 1.0
797:	2 to the exponent 8 = 256.0
798:	3 to the exponent 8 = 6561.0
799:	4 to the exponent 8 = 65536.0
800:	5 to the exponent 8 = 390625.0
801:	6 to the exponent 8 = 1679616.0
802:	7 to the exponent 8 = 5764801.0
803:	8 to the exponent 8 = 1.6777216E7
804:	9 to the exponent 8 = 4.3046721E7
805:	10 to the exponent 8 = 1.0E8
806:	-5 to the exponent 9 = -1953125.0
807:	-4 to the exponent 9 = -262144.0
808:	-3 to the exponent 9 = -19683.0
809:	-2 to the exponent 9 = -512.0
810:	-1 to the exponent 9 = -1.0
811:	0 to the exponent 9 = 0.0
812:	1 to the exponent 9 = 1.0
813:	2 to the exponent 9 = 512.0
814:	3 to the exponent 9 = 19683.0
815:	4 to the exponent 9 = 262144.0
816:	5 to the exponent 9 = 1953125.0
817:	6 to the exponent 9 = 1.0077696E7
818:	7 to the exponent 9 = 4.0353607E7
819:	8 to the exponent 9 = 1.34217728E8
820:	9 to the exponent 9 = 3.87420489E8
821:	10 to the exponent 9 = 1.0E9
822:	-5 to the exponent 10 = 9765625.0
823:	-4 to the exponent 10 = 1048576.0
824:	-3 to the exponent 10 = 59049.0
825:	-2 to the exponent 10 = 1024.0
826:	-1 to the exponent 10 = 1.0
827:	0 to the exponent 10 = 0.0
828:	1 to the exponent 10 = 1.0
829:	2 to the exponent 10 = 1024.0
830:	3 to the exponent 10 = 59049.0
831:	4 to the exponent 10 = 1048576.0
832:	5 to the exponent 10 = 9765625.0
833:	6 to the exponent 10 = 6.0466176E7
834:	7 to the exponent 10 = 2.82475249E8
835:	8 to the exponent 10 = 1.073741824E9
836:	9 to the exponent 10 = 3.486784401E9
837:	10 to the exponent 10 = 1.0E10
838:	Recursion complete!
839:	Advanced Classes Test started...
840:	unidentified is 0 identifies as unidentified
841:	Per Soney is 0 identifies as unidentified
842:	Per Soney is 1 identifies as unidentified
843:	Booooo!
844:	unidentified is 0 identifies as unidentified
845:	I am a student
846:		 Number: 	1
847:		 GPA:    	0.0
848:	Stu Denty is 0 identifies as unidentified
849:	I am a student
850:		 Number: 	1
851:		 GPA:    	0.0
852:	Stu Denty is 0 identifies as unidentified
853:	I am a student
854:		 Number: 	1
855:		 GPA:    	0.3
856:	Stu Denty is 0 identifies as unidentified
857:	I am a student
858:		 Number: 	1
859:		 GPA:    	0.0
860:	Stu Denty is 0 identifies as unidentified
861:	I am a student
862:		 Number: 	1
863:		 GPA:    	3.0002999999999993
864:	Booooo!
865:	I am a student
866:		 Number: 	1
867:		 GPA:    	3.0002999999999993
868:	Stewie Griffin is 2 identifies as cat
869:	I am a student
870:		 Number: 	1
871:		 GPA:    	0.0
872:	Mr. Teachery is 45 identifies as teacher
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Booooo!
876:	I am a student
877:		 Number: 	1
878:		 GPA:    	3.300299999999999
879:	Stewie Griffin is 2 identifies as cat
880:	I am a student
881:		 Number: 	1
882:		 GPA:    	0.3
883:	O1 = java.lang.Object@57536d79
884:	O2 = java.lang.Object@3b0143d3
885:	O3 = java.lang.Object@3b0143d3
886:	Person  as string = Person
887:	Student as string = Student: Person
888:	Teacher as string = Teacher: Person
889:	String  as string = squirrel
890:	JOptionPane as string = utility.io.JOptionPane@5a8e6209
891:	O2==O3
892:	P1==P2
893:	P2==P3
894:	P1==P3
895:	P2==P3
896:	Person is Person
897:	Clone  is Person
898:	Clone is ==
899:	S1 total = 2
900:	S2 total = 2
901:	S3 total = 4
902:	S4 total = 4
903:	S3 total = 9
904:	S4 total = 9
905:	Boom!!!
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Doctor: Person
912:	DiskJockey: Person
913:	MrWachs: Teacher: Person
914:	Piper: HighSchool: Student: Person
915:	Husky: HighSchool: Student: Person
916:	Athlete: Husky: HighSchool: Student: Person
917:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
918:	Grill on the BBQ
919:	Mr. Lawrence Wachs is eating Protein it was Savory
920:	unidentified is eating Apple from Do not eat!
921:	Round 1...
922:	Jock has signed the form!
923:	Round 2...
924:	Jock has scored
925:	Jock has scored
926:	St. Pauls has scored
927:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
928:	Jock SLAPS St. Pauls
929:	KO
930:	Round 3...
931:	Jock has scored
932:	Jock has scored
933:	St. Pauls has scored
934:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
935:	Round 4...
936:	Jock has scored
937:	Jock has scored
938:	St. Pauls has scored
939:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
940:	Hard core ironing of clothes!
941:	Jock wins!
942:	Grill on the BBQ
943:	Jock is eating Protein it was Savory
944:	Class name: Boolean, Hash Code: 1231, To String: true
945:	Class name: Integer, Hash Code: 0, To String: 0
946:	Class name: Double, Hash Code: 300063655, To String: 3.14
947:	Class name: Character, Hash Code: 97, To String: a
948:	Class name: String, Hash Code: 3556498, To String: test
949:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
950:	Class name: JOptionPane, Hash Code: 1535634836, To String: utility.io.JOptionPane@5b87ed94
951:	Class name: Object, Hash Code: 1846412426, To String: java.lang.Object@6e0e048a
952:	true
953:	0
954:	3.14
955:	a
956:	test
957:	Athlete: Husky: HighSchool: Student: Person
958:	Class name: Boolean, Hash Code: 1231, To String: true
959:	Class name: Integer, Hash Code: 0, To String: 0
960:	Class name: Double, Hash Code: 300063655, To String: 3.14
961:	Class name: Character, Hash Code: 97, To String: a
962:	Class name: String, Hash Code: 3556498, To String: test
963:	Class name: Athlete, Hash Code: 2142003995, To String: Athlete: Husky: HighSchool: Student: Person
964:	Home Owner:
965:	Mr. Lawrence Wachs
966:	And the contents...
967:	testing.prerequisite.cs40s.advancedclasses.Meeting@23e028a9
968:	Mr. Lawrence Wachs is eating Apple from Do not eat!
969:	Grill on the BBQ
970:	Mr. Lawrence Wachs is eating Protein it was Savory
971:	Advanced Classes Test complete!
972:	Collections testing begins...
973:	Testing Node constructors....................
974:	Testing Node toString()......................
975:	Node a = null
976:	Node b = Sass
977:	Node c = Pros
978:	Node d = Joes
979:	Testing Node clone().........................
980:	Node e = null
981:	Node f = Sass
982:	Node g = Pros
983:	Node h = Joes
984:	Testing Node equal().........................
985:	Node a == b? -> false
986:	Node b == c? -> false
987:	Node c == d? -> false
988:	Node d == d? -> true
989:	Node e == a? -> false
990:	Node f == b? -> true
991:	Node g == c? -> true
992:	Node h == d? -> true
993:	Testing Node finalize()......................
994:	Node a = null
995:	Node b = Sass
996:	Node c = Pros
997:	Node d = Joes
998:	Node e = null
999:	Node f = Sass
1000:	Node g = Pros
1001:	Node h = Joes
1002:	Node a = null
1003:	Node b = null
1004:	Node c = null
1005:	Node d = null
1006:	Node e = null
1007:	Node f = null
1008:	Node g = null
1009:	Node h = null
1010:	Testing default LinkedList constructor.......
1011:	Testing toString, empty, size methods........
1012:	L1 toString -> Empty LinkedList
1013:	L2 toString -> Empty LinkedList
1014:	L1 empty? -> true
1015:	L2 empty? -> true
1016:	L1 size -> 0
1017:	L2 size -> 0
1018:	Test add (first to the back) of the list.....
1019:	addBack -> true	Linked List 	[51]
1020:	addBack -> true	Linked List 	[51,50]
1021:	addBack -> true	Linked List 	[51,50,-50]
1022:	addBack -> true	Linked List 	[51,50,-50,55]
1023:	addBack -> false	Linked List 	[51,50,-50,55]
1024:	Test add (second to the front) of the list...
1025:	addFront -> true	Linked List 	[80,51,50,-50,55]
1026:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1028:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1029:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1030:	Re-testing empty, size methods...............
1031:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1032:	L2 empty? -> true	Empty LinkedList
1033:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1034:	L2 size -> 0	Empty LinkedList
1035:	Test get method..............................
1036:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1046:	Test set method..............................
1047:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1048:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1049:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1050:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1051:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1052:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1053:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1054:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1055:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1056:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1058:	Test equals method...........................
1059:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1060:	List 2 = Empty LinkedList
1061:	List1 == List2 -> false
1062:	Test clone method............................
1063:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1064:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1065:	Re-testing equals...
1066:	List1 == List2 -> true
1067:	Test addAfter method.........................
1068:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1069:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1070:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1071:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1072:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1073:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1074:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1075:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1076:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1077:	Test other edge case
1078:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1079:	Test addBefore method.........................
1080:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1097:	Test other edge case
1098:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1099:	Test front and back methods..................
1100:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1101:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1102:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1103:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1104:	Clear out list 2
1105:	Front of list 2 = null	Empty LinkedList
1106:	Back of list 2 = null	Empty LinkedList
1107:	Cloning list 2 from list 1
1108:	Test removeFront method......................
1109:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1110:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1111:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1112:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1113:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1114:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1115:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1116:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1117:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1118:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1119:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1120:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1121:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1122:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1123:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1124:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1125:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1126:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1127:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1128:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1129:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1130:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1131:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1132:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1133:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1134:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1135:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1136:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1137:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1138:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1139:	Linked List 	[16,17]	Removing list 1 front = 	16
1140:	Linked List 	[17]	Removing list 1 front = 	17
1141:	Empty LinkedList	Removing list 1 front = 	null
1142:	Cloning list 1 from list 2
1143:	Test removeBack method.......................
1144:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1166:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1167:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1168:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1169:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1170:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1171:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1172:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1173:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1174:	Linked List 	[100,101]	Removing list 2 back = 	101
1175:	Linked List 	[100]	Removing list 2 back = 	100
1176:	Empty LinkedList	Removing list 2 back = 	null
1177:	Cloning list 2 from list 1
1178:	Test remove method...........................
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1203:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1204:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1205:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1206:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1207:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1208:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1209:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1210:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1211:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1212:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1213:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1214:	Test contains method.........................
1215:	List 1 (empty) contains 10 = false	Empty LinkedList
1216:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1217:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1249:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1250:	Test firstIndexOf and lastIndexOf methods....
1251:	First index of 5: 	0
1252:	Last  index of 5: 	7
1253:	First index of 7: 	2
1254:	Last  index of 7: 	9
1255:	First index of 8: 	3
1256:	Last  index of 8: 	3
1257:	First index of 9: 	-1
1258:	Last  index of 9: 	-1
1259:	Test numberOf method.........................
1260:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1261:	Number of 5: 	3
1262:	Number of 8: 	1
1263:	Number of 9: 	0
1264:	Test allIndices method.......................
1265:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1266:	Array -> indices 5: 	[0, 4, 7]
1267:	Array -> indices 8: 	[3]
1268:	Array -> indices 9: 	null
1269:	Cloning list 2 from list 1
1270:	Test remove method...........................
1271:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1272:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1273:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1274:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1275:	Test removeLast method.......................
1276:	Linked List 	[6,7,5,6,7,5,6,7]
1277:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1278:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1279:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1280:	Test removeAll method........................
1281:	Linked List 	[6,7,5,6,7,6,7]
1282:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1283:	Removing all 6: 	true	Linked List 	[7,7,7]
1284:	Removing all 9: 	false	Linked List 	[7,7,7]
1285:	Cloning list 1 from list 2
1286:	Test removeAll array method..................
1287:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1288:	Array: 	[5, 6, 9]
1289:	Removing all from array: Linked List 	[7,8,7,7]
1290:	Test removeAll list method..................
1291:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1292:	List 2 	Linked List 	[7,8,7,7]
1293:	Removing all list 2 from list 1...
1294:	List 1 	Linked List 	[5,6,5,6,5,6]
1295:	List 2 	Linked List 	[7,8,7,7]
1296:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1297:	Test containsAll array method................
1298:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1299:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1300:	Test containsAll list method.................
1301:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1302:	Alter list 2...
1303:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1304:	Test addAll array method.....................
1305:	Linked List 	[6,7,8,6,7,5,6,45]
1306:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1307:	Test addAll list method......................
1308:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1309:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1310:	Test subList method..........................
1311:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1312:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1313:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1314:	Pulling out sub-list from 2 to 10: 	null
1315:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1316:	Test fromArray method........................
1317:	Array is 	[5, 6, 7, 8]
1318:	List is 	Linked List 	[5,6,7,8]
1319:	Test fromLinkedList method...................
1320:	1st List is 	Linked List 	[5,6,7,8]
1321:	2nd List is 	Linked List 	[5,6,7,8]
1322:	Test toArray method..........................
1323:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1324:	Testing the imported util LinkedList.........
1325:	Imported constructor...
1326:	Imported add:	[0.0]
1327:	Imported add:	[0.0, 1.23]
1328:	Imported addFirst:	[4.56, 0.0, 1.23]
1329:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1330:	Imported size:	4
1331:	Imported isEmpty:	false
1332:	Imported get:	0.0
1333:	Imported set:	4.56
1334:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1335:	Imported equals:	true
1336:	Imported getFirst:	0.01
1337:	Imported getLast:	7.89
1338:	Imported contains:	true
1339:	Imported removeFirst:	0.01
1340:	Imported removeLast:	7.89
1341:	Imported remove:	1.23
1342:	Imported remove:	false
1343:	Testing the imported util ArrayList.........
1344:	Imported ArrayList:	[a, b, c, d, e]
1345:	Using the enhanced for loop with this object...
1346:	a b c d e Using an iterator object...
1347:	a b c d e Collections testing complete!
1348:	Computer Science 42SAP Course:.............................................................
1349:	Computer Science 42SAP curriculum content..................................................
1350:	AP curriculum - Part 1.....................................................................
1351:	AP: Unit 1 (Primitive Types)...............................................................
1352:	1.1 Why Programming? Why Java?.............................................................
1353:	System.out.print outputs text to the screen and System.out.println outputs with a line break
1354:	More specifically, the code word "System" refers to the "computer system" and the 
1355:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
1356:	methods (or "actions") that take the string literal (which is the word or words in between 
1357:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
1358:	will take the string literal and output it to the default output device - that being the 
1359:	computer screen.
1360:	1.2 Variables and Data Types...............................................................
1361:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
1362:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
1363:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
1364:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
1365:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
1366:	variable can only be one type and only store that specified type of data. However, the data 
1367:	itself can change (or "vary") after the initial declaration. Examples of this are below...
1368:	// Variables declared and assigned initial ("starting") values:
1369:	boolean a = true;
1370:	int     b = 0;
1371:	double  c = 1.0;
1372:	char    d = 'A';
1373:	// Variables content changes ("reassigned"):
1374:	a = false;
1375:	b = 1;
1376:	c = 1.1;
1377:	d = 'B';
1378:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
1379:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
1380:	given the initial value when declared (or initialized) and that value stays locked. These 
1381:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
1382:	the name. Final variables are more efficient for a number of reasons including ease of code 
1383:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
1384:	are below
1385:	// Constants (finals) declared (initialized)
1386:	final boolean FOUND  = true;
1387:	final int     VALUE  = 1;
1388:	final double  AMOUNT = 2.5;
1389:	final char    CODE   = 'X';
1390:	1.3 Expressions and Assignment Statements..................................................
1391:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
1392:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
1393:	context, the word "literal" can also mean a number (like "5"). This usually involves 
1394:	variable types int and double (the number types) used in a math expression or equation. This 
1395:	can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
1396:	evaluated in a formula, they always evaluate to an int answer (solution) and double values 
1397:	will evaluate to a double. Complex (or "compound" expressions can be formed in which 
1398:	the order of operations (or precedence order). This means multiplication and division are 
1399:	evaluated before addition and subtraction. If operations are at the same precedence level, 
1400:	then they are evaluated from left to right.When you try and divide by zero, an error 
1401:	(the "ArithmeticException" error) will occur and the program will stop running. Examples:
1402:	// Arithmetic evaluations using variables
1403:	int    v1 = 5;
1404:	int    v2 = 3;
1405:	int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
1406:	double v4 = 5.2;
1407:	double v5 = 3.3;
1408:	double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
1409:	1.4 Compound Assignment Operators..........................................................
1410:	Compound statements in this context refers to using shortcuts to quickly add or subtract one 
1411:	(increment or decrement) to a variable. You can also use more complex shorthand compound 
1412:	statements to quickly multiply, divide, even modulus a variable with itself or other 
1413:	variables. For example:
1414:	// Shorthand Compound Arithmetic expressions
1415:	int value = 5;
1416:	value++;    // is the same as "value = value + 1;"
1417:	value--;    // is the same as "value = value + 1;"
1418:	value += 5; // is the same as "value = value + 5;"
1419:	value -= 5; // is the same as "value = value - 5;"
1420:	value *= 5; // is the same as "value = value * 5;"
1421:	value /= 5; // is the same as "value = value / 5;"
1422:	value %= 5; // is the same as "value = value % 5;"
1423:	1.5 Casting and Ranges of Variables........................................................
1424:	Casting is the process of "converting" one data type into another data type. When casting 
1425:	an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
1426:	off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
1427:	A char when cast will turn into it's ASCII value. The process of casting involves putting 
1428:	variable to be cast with the type being cast into in round brackets to the left of that 
1429:	variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
1430:	constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
1431:	evaluates an int outside that range, an error will occur (overflow error). For example:
1432:	// Casting data types
1433:	int integer = Integer.MAX_VALUE;
1434:	double doub = Double.MIN_VALUE;
1435:	doub        = (int)integer;
1436:	integer     = (int)doub;
1437:	char letter = 'A';
1438:	integer     = (int)letter;
1439:	AP: Unit 3 (Boolean Expressions And If Statements).........................................
1440:	3.1 Boolean Expressions....................................................................
1441:	A Boolean (true/false) expression is a code statement most likely in a control structure 
1442:	like a conditional statement or loop control structure that evaluates to true or false to 
1443:	make decisions and control the flow of the program. The Boolean expression will require 
1444:	the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
1445:	than", "greater than", "less than or equal to", "greater than or equal to", "equal 
1446:	to", and "not equal to".
1447:	3.2 if Statements and Control Flow.........................................................
1448:	A "Conditional Statement" is also known under other names like "branching statement", "if 
1449:	statement", "one-way selection statement", and "control structure". It uses the reserved 
1450:	keyword "if" along with round brackets which contain the Boolean expression, and curly 
1451:	brackets to contain the control block of all code you wish to be controlled by the 
1452:	conditional statement. Brackets are optional if the block is only one line, and you may also 
1453:	move thos lines up to the same line as the conditional statement. For example:
1454:	// Example of if statements
1455:	int a = 10;
1456:	int b = 10;
1457:	if (a == a) {
1458:	    // "equal"
1459:	}
1460:	3.3 if-else Statements.....................................................................
1461:	The "else" statement is paired with an "if" statement to control the flow of the logic so 
1462:	that the conditional now evaluates to both true and false. This can be called a "two 
1463:	way selection" (for true/false). An "else" must always follow an "if" statement first. 
1464:	For example:
1465:	// if with "else" 
1466:	double c = 1.45, d = 1.5; 
1467:	if (c < d) {
1468:	    // "Less than"
1469:	}
1470:	else {
1471:	    // "Greater than"
1472:	}
1473:	// Shortened lines version
1474:	char e = 'A';
1475:	char f = 'a';
1476:	if (e != f) e = '!';
1477:	else        e = '=';
1478:	3.4 else if Statements.....................................................................
1479:	When making multiple decisions (more than 2), the "else if" statement is added to an 
1480:	existing "if" statement to have multiple branches of logic for the code to follow. This 
1481:	is much more efficient than seperate "if" statements. This can also be called "multi-way 
1482:	selection" (or "if-else-if"). An "else" statement is also still the final option (but 
1483:	this is not required). For example:
1484:	// Showing a "chain" of else if statements
1485:	int g = 0;
1486:	if (g == 1) {
1487:	    // The first if is true
1488:	}
1489:	else if (g == 2) {
1490:	    // The next if is true
1491:	}
1492:	else if (g == 3) {
1493:	    // The next if (in the "chain" of ifs) is true
1494:	}
1495:	else {
1496:	    // Nothing above is true, so go to this else
1497:	}
1498:	3.5 Compound Boolean Expressions...........................................................
1499:	The process of "nesting" means to place one conditional statement inside the "block" of 
1500:	another conditional statement. The logical operators: "and", "or", and "not" are 
1501:	represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
1502:	is used to combine logical boolean expressions such that ALL expressions need to be true for 
1503:	the entire statement to be true. The operator OR is used to combine logical boolean 
1504:	expressions such that ANY expression can be true for the entire statement to be true. The 
1505:	operator NOT reverses the logic so that true statements are evaluated as false (and visa 
1506:	versa). If the statement contains multiple Boolean expressions and the result of the 
1507:	evaluation of one expression has already determined the expressions result, then the 
1508:	rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
1509:	evaluation". For example:
1510:	// Logical operators and "nesting"
1511:	int    age = 17;
1512:	double iq  = 1.0;
1513:	if (age >= 18 && iq > 90) {
1514:	    // with "and" ("&&") BOTH have to be true
1515:	}
1516:	else if (age >= 18 || iq > 0) {
1517:	    // with "or" ("||") EITHER can be true
1518:	}
1519:	else {
1520:	    // Case if neither evaluates
1521:	    if (age > 0) {
1522:	        // A "nested if statement"
1523:	    }
1524:	}
1525:	3.6 Equivalent Boolean Expressions.........................................................
1526:	Boolean (true/false) expressions turned into logical statements used by control structures 
1527:	like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
1528:	Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
1529:	not necessarily applicable to this exam). This just means that complex statements need to be 
1530:	evaluated by using mathematical rules (like "order of operations") and logical operators 
1531:	(like "and, or, not") to determine the final Boolean result. This could determine if a 
1532:	control structure (like an "if" statement) runs a block of code or not.
1533:	3.7 Comparing Objects......................................................................
1534:	The use of an advanced data type like an "Object" in code means that comparison 
1535:	operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
1536:	double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
1537:	determine the equality of two objects. For example:
1538:	// Use of the built-in equals method with Objects
1539:	String word1 = "edgy";
1540:	String word2 = "edGy";
1541:	if (word1.equals(word2)) {
1542:	    // "W1=W2"
1543:	}
1544:	else if (word1.equalsIgnoreCase(word2)) {
1545:	    // "W1 kind of == W2"
1546:	}
1547:	AP: Unit 4 (Iteration).....................................................................
1548:	4.1 while Loops............................................................................
1549:	The word "Iteration" is another word for "Loop" or "Looping" which is a control 
1550:	struture to have code statements "repeat". Like conditional ("if") statements, iteration 
1551:	statements control the flow of a program's logic. Also like if statements, iteration 
1552:	statements are controlled by a Boolean expression (true or false). The result of the Boolean 
1553:	expression will result in the code executing zero or mulitple times (until the expression 
1554:	evaluates to false). The expression is evaluated each time through an iteration of the loop. 
1555:	A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
1556:	(thus the loop never stops looping - or never stops running). It is possible a loop will 
1557:	never run if it evaluates to false before the body (block) of the loop. If you use the 
1558:	keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
1559:	potentially exit any method the loop is written inside. The "while" loop is a event loop or 
1560:	non-deterministic loop, which means it is not usually used for counting but when you do 
1561:	not know how many times the loop needs to run (a certain event can cause the loop to 
1562:	end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
1563:	(traversing) arrays and lists, and searching and sorting values. For example:
1564:	// Example of a simple while loop
1565:	int counter = 0;
1566:	while (counter < 10) {
1567:	    counter++;
1568:	}
1569:	4.2 for Loops..............................................................................
1570:	The "for" loop is another looping form. The for loop is a count controlled loop that 
1571:	generally is used when a loop needs to run a specific number of times. There are three 
1572:	parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
1573:	the starting, ending, and change of the loop. In a for loop a counting variable is 
1574:	generally declared right inside the loop to a starting value, then the Boolean condition 
1575:	to end the loop, then the change value increasing (increment) or decreasing (decrement) 
1576:	that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
1577:	by one" error occurs when a loop runs one too many or one too few times. For Example:
1578:	// Example of a for loop
1579:	for (int i = 0; i < 10; i++) {
1580:	    // potential code body...
1581:	}
1582:	4.3 Developing Algorithms Using Strings....................................................
1583:	The String class allows for several "built-in" methods of the String class to manipulate 
1584:	the string and the value it stores. Several of these methods could apply to the A.P. exam 
1585:	including travelling (traversing) string characters, pulling out substrings (parts 
1586:	of the string), reversing a string, etc. For example:
1587:	// Example of string methods with a loop
1588:	String word   = "completion";
1589:	String parts1 = word.substring(3);
1590:	String parts2 = word.substring(1,7);
1591:	for (int i = 0; i < word.length(); i++) {
1592:	    char character = word.charAt(i);
1593:	}
1594:	4.4 Nested Iteration.......................................................................
1595:	Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
1596:	This means you can place a iteration statement inside the block of another iteration 
1597:	statement. The inner loop must complete all of its iterations before the outer loop 
1598:	can continue. For example:
1599:	// Example of nested loops
1600:	for (int i = 0; i < 10; i++) {
1601:	    for (int j = 0; j < 10; j++) {
1602:	        int k = 10;
1603:	        while (k < 10) {
1604:	            // potential code body...
1605:	        }
1606:	    }
1607:	}
1608:	4.5 Informal Code Analysis.................................................................
1609:	Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
1610:	loops are typical A.P. exam questions. You should practice these types of questions.
1611:	AP curriculum - Part 2.....................................................................
1612:	AP: Unit 2 (Using Objects).................................................................
1613:	2.1 Objects: Instances of Classes..........................................................
1614:	A "class" is the "blueprint" for creating an "object". In Java, the class is a way to 
1615:	use code to model "things" using properties and methods. The object is what the class 
1616:	"creates" when the class is made into a specific "object" of that class. The various 
1617:	terms used for this vary but all revolve around the same concepts. The term "object" 
1618:	can also be called a "instance" of the class. The term "properties" can also be 
1619:	called "things about the class", or "descriptors", or "adjectives", or 
1620:	"fields". The term "methods" could also be called "what the class can do", or 
1621:	"actions", or "verbs", or "functions". 
1622:	// Example of a simple class with properties and methods
1623:	class Person {
1624:	    String name;
1625:	    int age;
1626:	    void walk() {
1627:	        // code logic could go here
1628:	    }
1629:	    void talk() {
1630:	        // code logic could go here
1631:	    }
1632:	}
1633:	2.2 Creating and Storing Objects (Instantiation)...........................................
1634:	Methods are a way to break up code into logic modules and it also provides a way to avoid 
1635:	repeating code and be able to reuse sections of code logic. You can think of methods as 
1636:	analogous to "machines" that perform "actions" and you can reuse. They are also analogous to 
1637:	"functions" in math that may take a variable "input" and generate an "answer".  The term 
1638:	"parameter" (and you may have zero, one, or more than one) is the "input" (if needed) to a 
1639:	method that is passed to the method. The value(s) passed are called "argument(s)". When you 
1640:	define the method in the method "signature" line, the round brackets can contain 
1641:	parameters separated by comma (if needed). A method may also give an "output" in the form 
1642:	of its "return" value (which also might not be needed, in which case it is a "void" method).
1643:	A method is "overloaded" if you have more than one method with the exact same name but 
1644:	different parameters. Classes have "constructor" methods that are called when 
1645:	a class is instantiated into an object. Constructor methods do not have a return type 
1646:	(not even the keyword "void"). They must have the exact same name as the class (including a 
1647:	capital letter). They are used to set the properties of the class to starting (or 
1648:	"default") values. If a class has multiple constructor methods, they are said to be 
1649:	overloaded constructors. When a line of code is used to instantiate a class into an instance 
1650:	of that class, the line includes the name of the class, the identifier name of the object, 
1651:	then an equals ("="), then the keyword "new" (which allots new memory for this 
1652:	advanced data type), then a call to a constructor method. If not constructor method 
1653:	is called, then the object references a "null" value until such time it is given a value to 
1654:	reference.
1655:	// Example of a class with constructors and instantiation
1656:	class Person {
1657:	    Person() {
1658:	        // code logic
1659:	    }
1660:	    Person(int age) {
1661:	        // code logic
1662:	    }
1663:	}
1664:	Person person1 = new Person();
1665:	Person person2 = new Person(5);
1666:	2.3 Calling a Void Method..................................................................
1667:	A "non-static" method is a method (meaning a "action", "behaviour", "procedure", 
1668:	or "verb") that does not use the "static" modifier word in the method signature line. 
1669:	A method with no prameters (or "inputs") means the method is defined with empty round 
1670:	brackets "( )". The "behavior" or action the method performs is defined in the body 
1671:	block of the method (between the two curly "{ }" brackets). The A.P. term "procedural 
1672:	abstraction" refers to a programmer being able to call a method without knowing how the 
1673:	method was written (also known as "black box" programming). When methods are "called" 
1674:	the execution flow stops, jumps and runs all the method body (or until a "return" 
1675:	statement) and then returns to the next line of execution after the method call line 
1676:	(or part of a code expression line). Methods can also be called from objects (or 
1677:	"instances") of a class using the dot "." operator. Void method do not return anthing 
1678:	(no "outputs") and use the keyword modifier "void" in the method signature in place of 
1679:	the return type.
1680:	// Examples of methods, parameters, return, and calling
1681:	public void show() {
1682:	    System.out.println("*")
1683:	}
1684:	public void show(char value) {
1685:	    System.out.println(value);
1686:	}
1687:	public int double(int number) {
1688:	    return number * 2;
1689:	} 
1690:	show();
1691:	show('A');
1692:	int answer = double(5);
1693:	2.4 Calling a Void Method with Parameters..................................................
1694:	A "non-static void" methods with parameters is a method with no outputs, but has input(s). 
1695:	This means the method signature has defined parameter(s) within the round brackets "( )" 
1696:	seperated by commas (if necessary). When this type of method is called, the "arguments" 
1697:	passed to this method must be in the same order in terms of data type. A method is 
1698:	"overloaded" when you have two or more methods with the same name but different and 
1699:	distinct parameter lists.
1700:	// Examples of method overloading
1701:	public void show() {
1702:	    System.out.println("*")
1703:	}
1704:	public void show(char value) {
1705:	    System.out.println(value);
1706:	}
1707:	public void show(int value) {
1708:	    System.out.println(value);
1709:	}
1710:	2.5 Calling a Non-void Method..............................................................
1711:	A method that does return a value, defines the return "type" in the method signature and 
1712:	the keyword "return" somewhere in the method body (at least once). When calling a return 
1713:	method, the value returned must be stored (in a variable) or used as part of an expression.
1714:	2.6 String Objects: Concatenation, Literals, and More......................................
1715:	The "String" class allows you to create String variables, concatenate them (join) 
1716:	together and use "built-in" methods of the String class. String literals (contained in 
1717:	quotes "") can be assigned to String variables or concatenated with Strings. String methods 
1718:	do not change the String ("immutable") object. The "+" or the "+=" operators can be used 
1719:	to concatenate Strings (resulting in a new String object). Primitives (like int, double, 
1720:	etc.) can also be concatenated with String objects. Those are now automatically converted 
1721:	to Strings and then concatenated. Escape sequences is the character "\" followed 
1722:	by another character to make certain outputs or changes to a String object. These include: 
1723:	\" for a quote, \\ for a slash, and \n for a new line.
1724:	// Examples of Strings and escape sequences
1725:	String str1 = "cat";
1726:	String str2 = str1 + "ty";
1727:	str1 += str2;
1728:	str2 = "\n" + str1 + "\\" + "\" dog";
1729:	2.7 String Methods.........................................................................
1730:	The "API" or Application Program Interface is a "library" of code that could be imported 
1731:	into a Java project or it could automatically be part of every Java project without needing 
1732:	an import. Classes and libraries are organized into "packages" in Java (also known as 
1733:	"namespaces"). The String class is in the "java.lang" package. Strings are collections 
1734:	of "char" values index from 0 up to the length of the String minus 1 (just like arrays 
1735:	are indexed). String methods used are: the String constructor "String s = new String();", 
1736:	the "length()" method, the "substring(int)" and "substring(int,int)" methods, the 
1737:	"indexOf(String)" method, the "equals(String)" method, and the 
1738:	"compareTo(String)" method.
1739:	// Examples of String methods
1740:	String str3 = new String("chatty");
1741:	// Constructs object with same sequence of characters as str3
1742:	int length = str3.length();
1743:	// Returns the number of characters in a String object
1744:	String str4 = str3.substring(1);
1745:	// Returns substring(from) starting at index "from" to the end
1746:	String str5 = str3.substring(1,3);
1747:	// Returns substring(from, to) starting at index "from" to index "to"
1748:	int index = str3.indexOf("hat");
1749:	// Returns the index of the first occurrence (returns -1 if not found)
1750:	boolean result1 = str3.equals(str4);
1751:	// Returns true if this is equal to other (returns false otherwise)
1752:	int result2 = str3.compareTo(str5);
1753:	// Returns value < 0 if less than other, returns 0 if equal to other,
1754:	// and returns value > 0 if greater than other
1755:	2.8 Wrapper Classes: Integer and Double....................................................
1756:	A "wrapper class" is a class type that is based in a primitive data type. For example the 
1757:	primitive data type "int" has the wrapper class "Integer". Similarily, the "Double" 
1758:	wrapper class, wraps around the "double" primitive type. The wrapper classes (using a 
1759:	capital letter) are part of java.lang and have built-in methods like "parseInt()" and 
1760:	"parseDouble()". Other methods include: "Integer(int)" a constructor, 
1761:	"Double(double)" a constructor, "MIN_VALUE" a constant, "MAX_VALUE", "intValue()", and 
1762:	"doubleValue()". Boxing and unboxing can be done between the wrapper classes and the 
1763:	primitive types (known as "autoboxing"). The term "boxing" means the conversion between 
1764:	primitive types and corresponding wrapper. The term "unboxing" means the conversion 
1765:	from the wrapper class to the primitive type.
1766:	// Example of wrapper classes and methods...
1767:	int     integerPrimitive1 = Integer.parseInt("10");
1768:	double  doublePrimitive1  = Double.parseDouble("1.2");
1769:	Integer integerObject     = new Integer("10");
1770:	Double  doubleObject      = new Double("1.2");
1771:	int     integerPrimitive2 = integerObject.intValue();
1772:	double  doublePrimitive2  = doubleObject.doubleValue();
1773:	int     minInteger        = Integer.MIN_VALUE;
1774:	int     maxInteger        = Integer.MAX_VALUE;
1775:	double  minDouble         = Double.MIN_VALUE;
1776:	double  maxDouble         = Double.MAX_VALUE;
1777:	// Boxing and unboxing...
1778:	int     integerPrimitive3 = integerObject1;
1779:	double  doublePrimitive3  = doubleObject1;
1780:	Integer integerObject2    = integerPrimitive3;
1781:	Double  doubleObject2     = doublePrimitive3;
1782:	2.9 Using the Math Class...................................................................
1783:	The "Math" class is part of the java.lang package and has built-in static methods that can 
1784:	be called. Useful methods include: abs, pow, sqrt, and random. Including manipulating the 
1785:	random method in a formula to define random numbers in a range. Examples of this follow...
1786:	// Examples of the Math class methods and randoms...
1787:	int    value1 = Math.abs(-1);
1788:	double value2 = Math.abs(-1.2);
1789:	double value3 = Math.pow(2,3);
1790:	double value4 = Math.sqrt(9);
1791:	double value5 = Math.random();
1792:	final double HIGH = 10.9d;
1793:	final double LOW  = 5.5d;
1794:	double value6 = (HIGH - LOW + 1.0d) * Math.random() + LOW;
1795:	AP: Unit 5 (Writing Classes)...............................................................
1796:	5.1 Anatomy of a Class.....................................................................
1797:	The properties (attributes) and methods (actions) of a class can be defined in terms of 
1798:	visibility. This means that the keywords "public" and "private" can be used as a 
1799:	modifier in the front of a method signature or at the front of a property declaration line 
1800:	to define the encapsulation level. The public keyword means the property can be accessed (and 
1801:	modified) both inside the class and from other classes outside the class. In terms of methods 
1802:	it means the method can be called within the class (by other methods) and outside the class 
1803:	from other classes using the dot "." operator. Classes and constructor methods are 
1804:	designated public. The concept of "encapsulation" is used to make certain data and actions 
1805:	private and protect them from outside classes and perhaps only allow access through accessor 
1806:	and modifier ("getter" and "setter") methods.
1807:	// Class example private/public properties and methods
1808:	class Apple { 
1809:	    public int number;
1810:	    private double price;
1811:	    public void eat() {
1812:	        // logic here
1813:	    }
1814:	    private void spoil() {
1815:	        // logic here
1816:	    }
1817:	}
1818:	5.2 Constructors...........................................................................
1819:	A constructor method is a special method defined in a class that is called when a class is 
1820:	instantiated into an instance (or "object") of that class. The constructor method has to have 
1821:	the exact same name as the class (including letter case) and no return type (not even the 
1822:	word void). Constructors are usually used to set the initial (or "default") values for the 
1823:	class properties. This can be said to be setting the "state" of the object. If any of the 
1824:	properties (attributes) are another class level instance variable (not a primitive type), 
1825:	then this class is said to have a "has-a" relationship with that class. This can also be 
1826:	called "association" or "composition" between the classes. Constructors can have 
1827:	parameters passed to the class that can be used in setting the initial state. When no 
1828:	constructor is written, Java provides a no-argument constructor, and the instance 
1829:	variables are set to default values.
1830:	// Class example association and constructors
1831:	class Basket {
1832:	    public Apple apple;
1833:	    public Basket() {
1834:	        // logic here
1835:	    }
1836:	    public Basket(Apple apple) {
1837:	        // logic here
1838:	    }
1839:	}
1840:	5.2 Documentation with Comments............................................................
1841:	Comments are a documentation system that allows programmers to leave notes for themselves or 
1842:	other programmers. This can serve several purposes including (but not limited to) 
1843:	documenting names and dates, explaining code logic, working through problem solving logic, 
1844:	and others. In Java, the two forward slashes // allows a comment at the end of a line of code or 
1845:	on its own line. A slash and a star /* opens a comment block which will continue until a star 
1846:	and slash */ closes the comment block. The slash and two stars /** open the JavaDoc style of 
1847:	comment block which many IDEs (e.g. NetBeans) recognize and help with commenting and to create 
1848:	API documentation. Methods should be commented with the method's purpose (a brief description), 
1849:	any pre-conditions (the parameters if any), and post-conditions (the return type if any) of the 
1850:	method.
1851:	// Comments...
1852:	// a standard comment
1853:	/* opens a comment block */
1854:	/** JavaDoc comment block */
1855:	5.4 Accessor Methods.......................................................................
1856:	Accessor methods are the names given to methods in a class that "access" data. this usually 
1857:	means properties of the class that are encapsulated (private). Other names for 
1858:	accessors are "getters" or "get" methods. The method (behaviours, actions, functions, 
1859:	procedures) of a class are accessed with the dot operator (".") after the name of the 
1860:	object (instance of the class). Non-void methods that return a value can then be used as 
1861:	part of a code line expression. The return type of the method must be compatible with any 
1862:	data types (e.g. variables) being used in the expression. If the return type is a class level 
1863:	type then the method returns a reference to the actual object ("return by reference") not a 
1864:	reference to a copy ("return by value") of the actual object. If the "System.out.print" 
1865:	or "System.out.println" methods are called and an object is passed to those methods, the 
1866:	object's "toString()" method is automatically 
1867:	invoked (called) in the output.
1868:	// Examples of calling methods in a class
1869:	class Fighter {
1870:	    private int health;
1871:	    private Weapon weapon;
1872:	    public int getHealth() {
1873:	        return health;
1874:	    }
1875:	    public Weapon getWeapon() {
1876:	        return weapon;
1877:	    }
1878:	}
1879:	Fighter fighter = new Fighter();
1880:	int hp = fighter.health;
1881:	Weapon club = fighter.getWeapon();
1882:	5.5 Mutator Methods........................................................................
1883:	Mutator methods are the name given to methods that "change" a property of a class (usually 
1884:	an encapsulated property). These can be void methods (but are sometimes boolean methods to 
1885:	indicate success or not).
1886:	// Examples of calling mutator methods in a class
1887:	class Fighter {
1888:	    private int health;
1889:	    public int setHealth(int health) {
1890:	        this.health = health;
1891:	    }
1892:	}
1893:	Fighter fighter = new Fighter();
1894:	fighter.setHealth(10);
1895:	5.6 Writing Methods........................................................................
1896:	Methods are written to model an "action". Also known as functions or procedures, methods may 
1897:	or may not have zero, one, or more than one "input(s)" called "parameters" (or empty round 
1898:	brackets if no inputs are required). Methods may have zero (a "void" method) or one "output" 
1899:	known as the return type. If the parameter is a primitive data type, then a copy of the data 
1900:	from the original primitive type is passed to the method ("pass by value"). If the parameter 
1901:	is an advanced data type ("class" level data) then a reference to that object is passed. This 
1902:	means that any changes the method makes to the object will be reflected (unless the object 
1903:	was an immutable object). Because the passed reference object parameter and the original 
1904:	argument object are "linked" they can be referred to as "aliases".
1905:	5.7 Static Variables and Methods...........................................................
1906:	Although they can be called from an object of a class, "static" methods are generally called 
1907:	from the class name itself. Static methods "belong" to the class itself and therefore 
1908:	do not require you to instantiate an object to call a method from that class. The keyword 
1909:	"static" is included as a modifier word in the method signature line. Static methods 
1910:	cannot access or change the values of instance properties of a class but can change/access 
1911:	static properties. Static properties (variables) also "belong" to the class itself 
1912:	and are "shared" by all objects of the class. Static properties can be either public or 
1913:	private and are also declared using the "static" keyword as a modifier for the 
1914:	property. Static properties are used with the class name and then the dot operator and then 
1915:	the name of the property (although they can also be accessed from an object name). 
1916:	// Static properties and methods
1917:	class Fighter {
1918:	    public static int number;
1919:	    public static void attack() {
1920:	        // logic here
1921:	    }
1922:	}
1923:	Fighter.number = 10;
1924:	Fighter.attack();
1925:	5.8 Scope and Access.......................................................................
1926:	Variables can be used throughout code in classes and methods and have a "scope" defining where 
1927:	the variable can be accessed and modified. A "local" variable is one which is defined in a 
1928:	code block like a control structure (a loop or if statement) or a method. The scope of that 
1929:	variable is that internal code block and no other variables can have the same name within 
1930:	that scope. A "global" variable is one declared at the class level and its scope is 
1931:	the entire code module (class). When there is a local variable with the same name as a global 
1932:	variable, the variable name will reference the local variable over the global variable. This 
1933:	could be a potential name conflict. The keyword "this" with the dot operator can make an 
1934:	explicit reference to the global variable over the local variable. 
1935:	// Local and global variable scopes
1936:	class Fighter {
1937:	    public int number;
1938:	    public void attack(int number) {
1939:	        this.number = number;
1940:	    }
1941:	}
1942:	5.9 this Keyword...........................................................................
1943:	The keyword "this" is an explicit reference to the (eventual) object within a class. It 
1944:	refers to the name of an object that will later be instantiated by the class the word this 
1945:	is used within. The word "this" can be used to give explicit control to a global variable 
1946:	or call a class method. The keyword "this" can also be used to pass the current object 
1947:	as an actual parameter in a method call.
1948:	5.10 Ethical and Social Implications of Computing Systems..................................
1949:	The social and ethical considerations of computing and Computer Science are things as 
1950:	an A.P. student you should be aware of. These are not necessarily testable concepts on the 
1951:	A.P. exam. The general ideas of legality, impact, and reliability of computing systems 
1952:	and software should always be considered by programers and Computer Scientists.
1953:	AP: Unit 9 (Inheritance)...................................................................
1954:	9.1 Creating Superclasses and Subclasses...................................................
1955:	// 
1956:	9.2 Writing Constructors for Subclasses....................................................
1957:	Inheritance is the relationship between two or 
1958:	more classes of code
1959:	// 
1960:	9.3 Overriding Methods.....................................................................
1961:	// 
1962:	9.4 super Keyword..........................................................................
1963:	// 
1964:	9.5 Creating References Using Inheritance Hierarchies......................................
1965:	// 
1966:	9.6 Polymorphism...........................................................................
1967:	// 
1968:	9.7 Object Superclass......................................................................
1969:	// 
1970:	AP curriculum - Part 3.....................................................................
1971:	AP: Unit 6 (Arrays)........................................................................
1972:	6.1 Array Creation and Access..............................................................
1973:	...
1974:	6.2 Traversing Arrays......................................................................
1975:	...
1976:	6.3 Enhanced for Loop for Arrays...........................................................
1977:	...
1978:	6.4 Developing Algorithms Using Arrays.....................................................
1979:	...
1980:	AP: Unit 8 (2D Arrays).....................................................................
1981:	8.1 2D Arrays..............................................................................
1982:	...
1983:	8.2 Traversing 2D Arrays...................................................................
1984:	...
1985:	AP curriculum - Part 4.....................................................................
1986:	AP: Unit 7 (Array List)....................................................................
1987:	7.1 Introduction to ArrayList..............................................................
1988:	...
1989:	7.2 ArrayList Methods......................................................................
1990:	...
1991:	7.3 Traversing ArrayLists..................................................................
1992:	...
1993:	7.4 Developing Algorithms Using ArrayLists.................................................
1994:	...
1995:	7.5 Searching..............................................................................
1996:	...
1997:	7.6 Sorting................................................................................
1998:	...
1999:	7.7 Ethical Issues Around Data Collection..................................................
2000:	...
2001:	AP: Unit 10 (Recursion)....................................................................
2002:	10.1 Recursion.............................................................................
2003:	...
2004:	10.2 Recursive Searching and Sorting.......................................................
2005:	...
2006:	Computer Science 42SAP practice tests......................................................
2007:	AP Practice Test 1.........................................................................
2008:	// Question 1...
2009:	Consider the following code segment.
2010:	int a = 5;
2011:	int b = 2;
2012:	double c = 3.0;
2013:	System.out.println(5 + a / b * c - 1);
2014:	What is printed when the code segment is executed?
2015:	(A) 0.666666666666667
2016:	(B) 9.0
2017:	(C) 10.0
2018:	(D) 11.5
2019:	(E) 14.0
2020:	// Answer 1...
2021:	C
2022:	// Question 2...
2023:	Which of the following statements assigns a random
2024:	integer between 25 and 60, inclusive to rn?
2025:	(A) int rnA = (int)(Math.random() * 25) + 36;
2026:	(B) int rnB = (int)(Math.random() * 25) + 60;
2027:	(C) int rnC = (int)(Math.random() * 26) + 60;
2028:	(D) int rnD = (int)(Math.random() * 36) + 25;
2029:	(E) int rnE = (int)(Math.random() * 60) + 25;
2030:	// Answer 2...
2031:	A
2032:	D
2033:	// Question 3...
2034:	Which of the following best describes the value
2035:	of the Boolean expression shown below?
2036:	a && !(b || a)
2037:	(A) The value is always true
2038:	(B) The value is always false
2039:	(C) The value is true when a has the value 
    false, and is false otherwise
2040:	(D) The value is true when b has the value 
    false, and is false otherwise
2041:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
2042:	// Answer 3...
2043:	B
2044:	// Question 4...
2045:	Consider the following code segment
2046:	int val = 48;
2047:	int div = 6;
2048:	while((val % 2 == 0) && div > 0) {
2049:	    if (val % div == 0) {
2050:	        System.out.print(val + " ");
2051:	    }
2052:	    val /= 2;
2053:	    div--;
2054:	}
2055:	What is printed when the code segment is executed?
2056:	(A) 48 12 6
2057:	(B) 48 12 6 3
2058:	(C) 48 12 6 3 1
2059:	(D) 48 24 12 6
2060:	(E) 48 24 12 6 3
2061:	// Answer 4...
2062:	A
2063:	// Question 5...
2064:	Which of the following code segments is equivalent to the code below
2065:	if (x >= 1) x = x * 3;
2066:	if (x > 3) x = 0;
2067:	(A) x = 0
2068:	(B) if (x > 1) x = 0;
2069:	(C) if (x > 3) x = 0;
2070:	(D) if (x >= 1) x = 0;
2071:	(E) none of the above
2072:	// Answer 5...
2073:	B
2074:	// Question 6...
2075:	When is the following Boolean expression true
2076:	(a and b are integers)?
2077:	(a < b) && !(b > a)
2078:	(A) Always true
2079:	(B) Never true
2080:	(C) a = b
2081:	(D) a < b
2082:	(E) a > b
2083:	// Answer 6...
2084:	B
2085:	// Question 7...
2086:	Consider the following code segment
2087:	int i = a random number such that 1 <= i <= n;
2088:	for (int a = 2; a <= i; a++)
2089:	    for (int b = 1; b < i; b++)
2090:	        System.out.println("*");
2091:	(A) 0
2092:	(B) 1
2093:	(C) 2
2094:	(D) n - 1
2095:	(E) n - 2
2096:	// Answer 7...
2097:	B
2098:	// Question 8...
2099:	Consider the following code segment
2100:	int p = 5;
2101:	int q = 2;
2102:	int sum = 0;
2103:	while (p <= 8) {
2104:	    sum += p % q;
2105:	    p++;
2106:	    q++;
2107:	}
2108:	(A) 1
2109:	(B) 0
2110:	(C) 13
2111:	(D) 7
2112:	(E) 4
2113:	// Answer 8...
2114:	D
2115:	// Question 9...
2116:	Consider the following code segment
2117:	for (int i = 0; i <= 3; i++) {
2118:	    for (int j = 1; j <= 5; j+=2) {
2119:	        System.out.println("*");
2120:	    }
2121:	}
2122:	(A) 3
2123:	(B) 6
2124:	(C) 9
2125:	(D) 12
2126:	(E) 15
2127:	// Answer 9...
2128:	D
2129:	// Question 10...
2130:	What are the values of a and b after the for loop
2131:	finishes?
2132:	int a = 10;
2133:	int b = 3;
2134:	int t = 0;
2135:	for (int i = 1; i < 4; i++) {
2136:	    t = a;
2137:	    a = i + b;
2138:	    b = t - i;
2139:	}
2140:	(A) a = 5 and b = -2
2141:	(B) a = 6 and b = 7
2142:	(C) a = 6 and b = 3
2143:	(D) a = 12 and b = 1
2144:	(E) a = 5 and b = 8
2145:	// Answer 10...
2146:	E
2147:	AP Practice Test 2.........................................................................
2148:	// Question 1...
2149:	Consider the following class definition
2150:	public class Example
2151:	{
2152:	     private int x;
2153:	     // constructor not shown
2154:	}
2155:	Which of the following is a correct header for a
2156:	method that would return the value of the private
2157:	instance variable x so that it can be used in a
2158:	class other than Example?
2159:	(A) private int getX()
2160:	(B) private void getX()
2161:	(C) public int getX()
2162:	(D) public void getX()
2163:	(E) public void getX(int x)
2164:	// Answer 1...
2165:	C
2166:	// Question 2...
2167:	Consider the following class definitions
2168:	public class Thing1 {
2169:	     public void calc(int n) {
2170:	          n *= 3;
2171:	          System.out.print(n);
2172:	     }
2173:	}
2174:	public class Thing2 extends Thing1 {
2175:	     public void calc(int n) {
2176:	          n += 2;
2177:	          super.calc(n);
2178:	          System.out.print(n);
2179:	     }
2180:	}
2181:	The following code seqment appears in a class
2182:	other than Thing1 or Thing2
2183:	Thing1 t = new Thing2();
2184:	t.calc(2);
2185:	What is printed as a result of executing the
2186:	code segment?
2187:	(A) 4
2188:	(B) 6
2189:	(C) 68
2190:	(D) 124
2191:	(E) 1212
2192:	// Answer 2...
2193:	D
2194:	// Question 3...
2195:	Consider the following class definitions.
2196:	public class Student {
2197:	    public String getFood() {
2198:	        return "Pizza";
2199:	    }
2200:	    public String getInfo() {
2201:	        return "Studying";
2202:	    }
2203:	}
2204:	public class GradStudent extends Student {
2205:	    public String getFood() {
2206:	        return "Taco";
2207:	    }
2208:	    public String getInfo() {
2209:	        super.getInfo();
2210:	        return "Eating";
2211:	    }
2212:	}
2213:	What is printed when the following code is
2214:	executed?
2215:	Student s = new GradStudent();
2216:	System.out.println(s.getInfo());
2217:	(A) Pizza
2218:	(B) Taco
2219:	(C) Studying
2220:	(D) Eating
2221:	(E) Studying
2222:	    Eating
2223:	// Answer 3...
2224:	D
2225:	// Question 4...
2226:	Given the following class declarations:
2227:	public class Car {
2228:	    private String make;
2229:	    public Car(String theMake) {
2230:	        make = theMake;
2231:	    }
2232:	    public String getMake() {
2233:	        return make;
2234:	    }
2235:	}
2236:	public class ElectricCar extends Car {
2237:	    public ElectricCar() {
2238:	        super("Ford");
2239:	    }
2240:	    public ElectricCar(String theMake) {
2241:	        super(theMake);
2242:	    } 
2243:	}
2244:	Which of the following will cause a compile
2245:	time error?
2246:	(A) Car myCar = new Car();
2247:	(B) Car myCar1 = new ElectricCar();
2248:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2249:	(D) Car myCar3 = new Car("Ford");
2250:	(E) Car myCar4 = new ElectricCar("Ford");
2251:	// Answer 4...
2252:	A
2253:	// Question 5...
2254:	Given the following declarations.
2255:	public class Vehicle {
2256:	    public void test(Car x, SportsCar y) { }
2257:	}
2258:	public class Car extends Vehicle {
2259:	}
2260:	public class SportsCar extends Car {
2261:	}
2262:	Also consider the following code that appears
2263:	in a different class.
2264:	Vehicle v = new Vehicle();
2265:	Car c = new Car();
2266:	SportsCar sporty = new SportsCar();
2267:	Which of the following is a correct call to test ?
2268:	(A) v.test(sporty, v);
2269:	(B) sporty.test(c, c);
2270:	(C) v.test(sporty, c);
2271:	(D) sporty.test(sporty, v);
2272:	(E) c.test(sporty, sporty);
2273:	// Answer 5...
2274:	E
2275:	// Question 6...
2276:	Class C extends class B, which extends class A. 
2277:	Also, all of the three classes implement a public
2278:	method test(). How can a method in an object of
2279:	class C invoke the test() method defined in class
2280:	A (without creating a new instance of class A)?
2281:	(A) test();
2282:	(B) super.super.test();
2283:	(C) super.test();
2284:	(D) this.test();
2285:	(E) There is no way to call a method in a 
2286:	    grandparent class from a grandchild class
2287:	// Answer 6...
2288:	E
2289:	// Question 7...
2290:	Given the following class declarations. Assume
2291:	that Parent p = new Child(); appears in a client
2292:	program. What is the result of the call p.m1();
2293:	public class Parent {
2294:	    public void m1() {
2295:	        System.out.print("pm1");
2296:	        m2();
2297:	    }
2298:	    public void m2() {
2299:	        System.out.print("pm2");
2300:	    }
2301:	}
2302:	public class Child extends Parent {
2303:	    public void m1() {
2304:	        super.m1();
2305:	        System.out.print("cm1");
2306:	    }
2307:	    public void m2() {
2308:	        super.m2();
2309:	        System.out.print("cm2");
2310:	    }
2311:	}
2312:	(A) pm1pm2cm2cm1
2313:	(B) pm1pm2
2314:	(C) pm1pm2cm1cm2
2315:	(D) pm1cm1
2316:	(E) pm1
2317:	// Answer 7...
2318:	pm1pm2cm2cm1// Question 8...
2319:	Given the following class declarations.
2320:	public class Animal {
2321:	    public void eat() {
2322:	        System.out.println("AE");
2323:	    }
2324:	}
2325:	public class Bear extends Animal {
2326:	    public void growl() {
2327:	        System.out.println("BG");
2328:	    }
2329:	}
2330:	Assume the following declaration is in a 
2331:	different class.
2332:	Animal b = new Bear();
2333:	Which of the following will compile without error?
2334:	I.   b.eat();
2335:	II.  b.growl();
2336:	III. ((Bear)b).growl();
2337:	(A) I only
2338:	(B) II only
2339:	(C) III only
2340:	(D) I and III only
2341:	(E) I, II, and III
2342:	// Answer 8...
2343:	B
2344:	// Question 9...
2345:	Consider the following partial class definitions.
2346:	public class C1 {
2347:	    private int num;
2348:	    private String name;
2349:	    public C1(int theNum) {
2350:	        num = theNum
2351:	    } 
2352:	    public C1(String theName) {
2353:	        name = theName;
2354:	    }
2355:	}
2356:	public class C2 extends C1 {
2357:	    // methods not shown
2358:	}
2359:	Which of the following constructors are valid for
2360:	C2?
2361:	I. public C2() { }
2362:	II. public C2(int quan) { super(quan); }
2363:	III. public C2(String label) { super(label); }
2364:	(A) All three are valid
2365:	(B) II only
2366:	(C) III only
2367:	(D) II and III
2368:	(E) None are valid
2369:	// Answer 9...
2370:	D
2371:	// Question 10...
2372:	Given the following class definition. What are 
2373:	the values of x, y, and z just before method2
2374:	returns?
2375:	public class Class1 {
2376:	    public int method1(int a, int b) {
2377:	        int temp = a;
2378:	        a = b;
2379:	        b = temp;
2380:	        return b;
2381:	    }  
2382:	    public void method2() {
2383:	        int x = 3;
2384:	        int y = 5;
2385:	        int z = method1(x, y);
2386:	    }
2387:	}
2388:	(A) x=3,y=3,z=3
2389:	(B) x=3,y=5,z=3
2390:	(C) x=5,y=3,z=5
2391:	(D) x=5,y=3,z=3
2392:	(E) x=3,y=5,z=5
2393:	// Answer 10...
2394:	B
2395:	AP Practice Test 3.........................................................................
2396:	// Section 1...
2397:	For the next two Free response questions, 
2398:	refer to the description below...
2399:	A travel agency maintains a list of information 
2400:	about airline flights. Flight information 
2401:	includes a departure time and an arrival time.
2402:	You may assume that the two times occur on the 
2403:	same day. These times are represented by 
2404:	objects of the Time class. The declaration for
2405:	the Time class is shown below. It includes a 
2406:	method which returns the difference (in minutes)
2407:	between the current Time object and another Time
2408:	object. 
2409:	public class Time {
2410:	     /** 
2411:	      * @return difference, in minutes, between this
2412:	      * time and other; difference is negative
2413:	      * if other is earlier than this time
2414:	      */
2415:	     public int minutesUntil(Time other) {
2416:	          /* implementation not shown */
2417:	     }
2418:	     // There may be instance variables, constructors,
2419:	     // and methods that are not shown.
2420:	}
2421:	For example, assume that t1 and t2 are Time 
2422:	objects where t1 represents 1:00 p.m. and t2 
2423:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
2424:	will return 75 and the call t2.minutesUntil(t1) 
2425:	will return -75. The declaration for the Flight class 
2426:	is shown below. It has methods to access the 
2427:	departure time and the arrival time of a flight. 
2428:	You may assume that the departure time of a 
2429:	flight is earlier than its arrival time.
2430:	public class Flight {
2431:	      /** @return time at which the flight departs */
2432:	      public Time getDepartureTime() {
2433:	           /* implementation not shown */ 
2434:	      }
2435:	      /** @return time at which the flight arrives */
2436:	      public Time getArrivalTime() {
2437:	           /* implementation not shown */ 
2438:	      }
2439:	      // There may be instance variables, constructors, 
2440:	      // and methods that are not shown.
2441:	}
2442:	A trip consists of a sequence of flights and is 
2443:	represented by the Trip class. The Trip class 
2444:	contains a List of Flight objects that are stored 
2445:	in chronological order. You may assume that for 
2446:	each flight after the first flight in the list, 
2447:	the departure time of the flight is later than 
2448:	the arrival time of the preceding flight in the 
2449:	list. A partial declaration of the Trip class is 
2450:	shown below. You will write two methods for the 
2451:	Trip class.
2452:	public class Trip {
2453:	     /** 
2454:	       * The list of flights (if any) that make up 
2455:	       * this trip, stored in chronological order
2456:	       */
2457:	     private List<Flight> flights;
2458:	     /** 
2459:	       * @return the number of minutes from the 
2460:	       * departure of the first flight to the arrival 
2461:	       * of the last flight if there are one or more 
2462:	       * flights in the trip; 0, if there are no 
2463:	       * flights in the trip
2464:	       */
2465:	     public int getDuration() {
2466:	          /* to be implemented in part (a) */ 
2467:	     }
2468:	     /** 
2469:	       * Precondition: the departure time for each 
2470:	       * flight is later than the arrival time of its 
2471:	       * preceding flight
2472:	       * @return the smallest number of minutes 
2473:	       * between the arrival of a flight and the 
2474:	       * departure of the flight immediately after it, 
2475:	       * if there are two or more flights in the 
2476:	       * trip; -1, if there are fewer than two flights 
2477:	       * in the trip
2478:	       */
2479:	     public int getShortestLayover() {
2480:	          /* to be implemented in part (b) */
2481:	     }
2482:	       // There may be instance variables, constructors,
2483:	       // and methods that are not shown
2484:	}
2485:	// Question 1...
2486:	Complete method getDuration below.  
2487:	// An answer could be...
2488:	public int getDuration() {
2489:	    int totalDuration = 0;
2490:	    for (Flight flight : flights) {
2491:	        Time departure = flight.getDepartureTime();
2492:	        Time arrival   = flight.getArrivalTime();
2493:	        int  duration  = departure.minutesUntil(arrival);
2494:	        totalDuration  = totalDuration + duration;
2495:	    }
2496:	    return totalDuration;
2497:	}
2498:	// Question 2...
2499:	Write the Trip method getShortestLayover. A 
2500:	layover is the number of minutes from the arrival 
2501:	of one flight in a trip to the departure of the 
2502:	flight immediately after it. If there are two or 
2503:	more flights in the trip, the method should return 
2504:	the shortest layover of the trip; otherwise, it 
2505:	should return -1. For example, assume that the 
2506:	instance variable flights of a Trip object vacation 
2507:	contains the following flight information.
2508:	          Departure   Arrival   Layover
2509:	            Time      Time     (minutes)
2510:	         +---------+----------+
2511:	Flight 0 | 11:30am |  12:15pm |
2512:	         +---------+----------+ }  60
2513:	Flight 1 |  1:15pm |   3:45pm |
2514:	         +---------+----------+ }  15
2515:	Flight 2 |  4:00pm |   6:45pm |
2516:	         +---------+----------+ }  210
2517:	Flight 3 | 10:15pm |  11:00pm |
2518:	         +---------+----------+
2519:	The call vacation.getShortestLayover() should 
2520:	return 15. Complete method getShortestLayover() 
2521:	below.
2522:	public int getShortestLayover()
2523:	// An answer could be...
2524:	public int getShortestLayover() {
2525:	    if (flights.isEmpty()) return -1;
2526:	    int shortestLayover = Integer.MAX_VALUE;
2527:	    int i = 0;
2528:	    while (i < flights.size()) {
2529:	        Flight currentFlight = flights.get(i);
2530:	        i++;
2531:	        Flight nextFlight    = flights.get(i);
2532:	        Time arrival         = currentFlight.getArrivalTime();
2533:	        Time departure       = nextFlight.getDepartureTime();
2534:	        int layover = Math.abs(arrival.minutesUntil(departure));
2535:	        if (layover < shortestLayover) {
2536:	            shortestLayover = layover;
2537:	        }
2538:	        i++;
2539:	    }
2540:	    return shortestLayover;
2541:	}
2542:	// Section 1...
2543:	For the next three Free response questions, refer 
2544:	to the description below...
2545:	Consider the hierarchy of classes shown in the 
2546:	following diagram
2547:	         +----------+ 
2548:	         |    Pet   |
2549:	         +----------+
2550:	            /    \
2551:	 +----------+    +----------+
2552:	 |    Cat   |    |    Dog   |
2553:	 +----------+    +----------+
2554:	                       \
2555:	                       +----------+
2556:	                       | Loud Dog |
2557:	                       +----------+
2558:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
2559:	a LoudDog 'is-a' Dog. The class Pet is specified 
2560:	as an abstract class as shown in the following 
2561:	declaration. Each Pet has a name that is 
2562:	specified when it is constructed.
2563:	public abstract class Pet {
2564:	    private String name;
2565:	    public Pet(String petName) {
2566:	        name = petName;
2567:	    }
2568:	    public String getName() {
2569:	        return name;
2570:	    }
2571:	    public abstract String speak();
2572:	}
2573:	The subclass Dog has the partial class 
2574:	declaration shown below.
2575:	public class Dog extends Pet {
2576:	    public Dog(String petName) {
2577:	        /* implementation not shown */
2578:	    }
2579:	    public String speak() {
2580:	        /* implementation not shown */
2581:	    }
2582:	}
2583:	// Question 3...
2584:	Given the class hierarchy shown above, write a 
2585:	complete class declaration for the class Cat, 
2586:	including implementations of its constructor 
2587:	and method(s). The Cat method speak returns 
2588:	'meow' when it is invoked.
2589:	// An answer could be...
2590:	public class Cat extends Pet {
2591:	    public Cat(String petName) {
2592:	        super(petName);
2593:	    }
2594:	    public String speak() {
2595:	        return "meow";
2596:	    }
2597:	}
2598:	// Question 4...
2599:	Assume that class Dog has been declared as shown 
2600:	at the beginning of the question. If the String 
2601:	dog-sound is returned by the Dog method speak, 
2602:	then the LoudDog method method speak returns a 
2603:	String containing dog-sound repeated two times. 
2604:	Given the class hierarchy shown previously, 
2605:	write a complete class declaration for the class 
2606:	LoudDog including implementations of its 
2607:	constructor and method(s).
2608:	// An answer could be...
2609:	public class LoudDog extends Dog {
2610:	    public LoudDog(String petName) {
2611:	        super(petName);
2612:	    }
2613:	    public String speak() {
2614:	        return super.speak() + super.speak();
2615:	    }
2616:	}
2617:	// Question 5...
2618:	Consider the following partial declaration of 
2619:	class Kennel
2620:	public class Kennel {
2621:	    private ArrayList<Pet> petList;
2622:	     /**
2623:	      * For every Pet in the kennel, prints the name 
2624:	      * followed by the result of a call to its speak 
2625:	      * method, one line per Pet
2626:	      */
2627:	     public void allSpeak() {
2628:	        /* to be implemented */
2629:	     }
2630:	     // There may be instance variables, constructors, 
2631:	     // and methods that are not shown
2632:	}
2633:	Write the Kennel method allSpeak For each Pet in 
2634:	the kennel, allSpeak prints a line with the name 
2635:	of the Pet followed by the result of a call to 
2636:	its speak method. In writing allSpeak you may use 
2637:	any of the methods defined for any of the classes 
2638:	specified for this problem. Assume that these 
2639:	methods work as specified, regardless of what 
2640:	you wrote in previous questions. Complete method
2641:	allSpeak below
2642:	public void allSpeak()
2643:	// An answer could be...
2644:	public void allSpeak() {
2645:	    for (Pet pet : petList) {
2646:	        System.out.println(pet.getName() + pet.speak());
2647:	    }
2648:	}
2649:	AP Practice Test 4 not running.............................................................
2650:	Computer Science 42SAP Post Secondary Content:.............................................
2651:	Fun Friday (and Thursday) Content:.........................................................
2652:	// Learn about 'error traps'
2653:	Caught ArrayIndexOutOfBoundsException
2654:	// Learn about reading and writing to files
2655:	Defenestration
2656:	~~~ SIMULATED {GUI Frame} DIALOG: Virus ~~~ 
2657:	// Learn about searching
2658:	List/Array is: [Adam, Chylsy, Colton, Foxx, James, Lanze, Manskrit, Miles, Samantha, Scott, Tyler, Wachs]
2659:	Found Wachs
2660:	Linear Search array: Wachs was at 11
2661:	Linear Search list: Wachs was at 11
2662:	Binary Search array: Wachs was at 11
2663:	Binary Search list: Wachs was at 11
2664:	// Learn about sorting
2665:	Sort by Name...............................
2666:	Here are the first 5 people in the list...
2667:	0: 	Aaliyah Bayer	68	0.54028962384366
2668:	1: 	Aaliyah Bayer	99	3.8062785666119714
2669:	2: 	Aaliyah Bayer	44	3.4057953512190924
2670:	3: 	Aaliyah Bayer	83	0.07163067015352576
2671:	4: 	Aaliyah Bayer	119	1.5920741119083948
2672:	Here are the last 5 people in the list...
2673:	38249995: 	Zoie Stanfield	77	0.7757526164610135
2674:	38249996: 	Zoie Stanfield	20	4.422439327384857
2675:	38249997: 	Zoie Stanfield	45	2.687151107894859
2676:	38249998: 	Zoie Stanfield	100	1.149167120773552
2677:	38249999: 	Zoie Stanfield	101	4.555617978600034
2678:	Sort by Age...............................
2679:	Here are the first 5 people in the list...
2680:	0: 	Kieran Spalding	1	0.9150748365878819
2681:	1: 	Kendra Langford	1	2.4420120025933993
2682:	2: 	Braxton Whelan	1	4.7493204941482015
2683:	3: 	Stanley Shackelford	1	3.4737458291319916
2684:	4: 	Stanley Shackelford	1	0.12378044321879889
2685:	Here are the last 5 people in the list...
2686:	38249995: 	Annabelle Nobles	120	0.6758750596710245
2687:	38249996: 	Kendrick Romano	120	3.5418364265455398
2688:	38249997: 	Jacklyn Feeney	120	0.9639514355530415
2689:	38249998: 	Madeline Her	120	1.6469103782545451
2690:	38249999: 	Claudia Barbour	120	0.9648630379056616
2691:	Sort by IQ...............................
2692:	Here are the first 5 people in the list...
2693:	0: 	Nicolette Pickard	32	2.677908866877132E-7
2694:	1: 	Elisha Bales	45	3.5214076987699627E-7
2695:	2: 	Jim Matlock	105	6.450712169980832E-7
2696:	3: 	Mariel Singer	64	9.943185746985606E-7
2697:	4: 	Cloe Currie	22	1.021639444154232E-6
2698:	Here are the last 5 people in the list...
2699:	38249995: 	Alani Cates	54	4.999999532894217
2700:	38249996: 	Shanice Rice	97	4.999999571865114
2701:	38249997: 	Angie Soares	33	4.999999822191389
2702:	38249998: 	Bo Murry	98	4.9999999660603685
2703:	38249999: 	Monet Ferrer	117	4.999999984083831
2704:	// Student requested exam review topics
2705:	// Start Learning about ArrayList...
2706:	.................................................
2707:	Create (declare) an ArrayList by importing the 
2708:	ArrayList class from the core 'java.util' API
2709:	.................................................
2710:	Method to get the size of the ArrayList...
2711:	(note: with arrays, they use '.length' instead)

2712:	size = 0
2713:	.................................................
2714:	Method to add values dynamically into the
2715:	ArrayList. Note that it will always append the 
2716:	item to the end of the ArrayList

2717:	Operation add() success was true
2718:	ArrayList is now [20]
2719:	.................................................
2720:	Repeating the add operation...

2721:	Add(30): true ArrayList: [20, 30]
2722:	Add(40): true ArrayList: [20, 30, 40]
2723:	Add(50): true ArrayList: [20, 30, 40, 50]
2724:	Add(60): true ArrayList: [20, 30, 40, 50, 60]
2725:	Add(70): true ArrayList: [20, 30, 40, 50, 60, 70]
2726:	.................................................
2727:	Variation on add() with another parameter to 
2728:	indicate an index value (which will add the value 
2729:	and shift all the preceeding values after the 
2730:	index over)

2731:	Add(3,99): ArrayList: [20, 30, 40, 99, 50, 60, 70]
2732:	Add(0,99): ArrayList: [99, 20, 30, 40, 99, 50, 60, 70]
2733:	Add(list.size(),99): ArrayList: [99, 20, 30, 40, 99, 50, 60, 70, 99]
2734:	.................................................
2735:	The get(index) accessor method like  
2736:	int value = array[index]; which retrieves the value
2737:	at the passed index

2738:	get(3) = 40
2739:	get(0) = 99
2740:	get(list.size()-1) = 99
2741:	.................................................
2742:	The set(index,value) mutator method like 
2743:	array[index] = value; mutates (changes) the value 
2744:	at the passed index and returns the previous value 
2745:	at that index

2746:	set(3,1) previously was 40 list is now [99, 20, 30, 1, 99, 50, 60, 70, 99]
2747:	set(0,1) previously was 99 list is now [1, 20, 30, 1, 99, 50, 60, 70, 99]
2748:	set(list.size()-1,1) previously was 99 list is now [1, 20, 30, 1, 99, 50, 60, 70, 1]
2749:	.................................................
2750:	The remove(index) method removes the index value 
2751:	from the ArrayList and adjusts the list to now 
2752:	have one less element. It also returns the item 
2753:	it removes

2754:	list.remove(2) removed 30 list is now [1, 20, 1, 99, 50, 60, 70, 1]
2755:	list.remove(0) removed 1 list is now [20, 1, 99, 50, 60, 70, 1]
2756:	list.remove(list.size()-1) removed 1 list is now [20, 1, 99, 50, 60, 70]
2757:	.................................................
2758:	Traversing an ArrayList with a standard for loop 
2759:	and an enhanced for loop

2760:	for ArrayList = 20
2761:	for ArrayList = 1
2762:	for ArrayList = 99
2763:	for ArrayList = 50
2764:	for ArrayList = 60
2765:	for ArrayList = 70
2766:	enhanced for ArrayList = 20
2767:	enhanced for ArrayList = 1
2768:	enhanced for ArrayList = 99
2769:	enhanced for ArrayList = 50
2770:	enhanced for ArrayList = 60
2771:	enhanced for ArrayList = 70
2772:	.................................................
2773:	All array operations: 

2774:	 - declaring:  int a[] = new int[5];
2775:	 - mutating:   a[2] = 5;
2776:	 - accessing:  int x = a[2];
2777:	 - traversing: for (int i = 0; i < a.length; i++)
2778:	
Can also be performed with ArrayList but as a 
2779:	dynamic data structure:

2780:	 - declaring:  ArrayList<Integer> a = new ArrayList<>();
2781:	 - mutating:   a.set(2,5);
2782:	 - accessing:  int x = a.get(2);
2783:	 - traversing: for (int i = 0; i < a.size(); i++)
2784:	           or: for (Integer integer : list)
2785:	// Completed Learning about ArrayList!
2786:	// Learn about advanced data structures
2787:	// Learn about advanced stacks and queues
2788:	A version of a list structure
2789:	// Learn about binary trees
2790:	Create a binary tree object...

2791:	Insert some values [27,35,75,14,83,61] 
2792:	into the tree

2793:	Search the tree for 14 and 44...

2794:	Non-linear data structure
2795:	// Learn about more advanced data structures
2796:	Hash tables, Dictionaries, Graphs, etc.
2797:	More post secondary content:...............................................................
2798:	Permanent Storage Post Secondary Content:..................................................
2799:	// Learn about 'error traps'
2800:	Divide by zero -> java.lang.ArithmeticException: / by zero
2801:	// Create sample data to use
2802:	// Save ONE piece of data to that permanent file
2803:	// Now involve the user to get a file name
2804:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2805:	File already exists!
2806:	// Open file with one line (no user involvment)
2807:	line read was Defenestration
2808:	// Open file with multiple lines (user picks file)
2809:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2810:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
2811:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
2812:	This line read was q ~ pq ~ �
2813:	// Class to save/open one line (no user)
2814:	Before: Defenestration
2815:	After : Defenestration
2816:	// Class to save/open multiple lines (with user)
2817:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2818:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2819:	// Now save/open on a complex data type
2820:	Before: Athlete: Husky: HighSchool: Student: Person
2821:	After:  Athlete: Husky: HighSchool: Student: Person
2822:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2823:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2824:	Stacks and Queues Post Secondary Content:..................................................
2825:	// Create objects for testing...
2826:	// Create and Test a stack object...
2827:	// Test toString, size, isEmpty, and push methods...
2828:	Empty = true	Size = 0	Empty Stack
2829:	// Loop through adding random values
2830:	Empty = false	Size = 1	Stack top -> [Algol] <- bottom
2831:	Empty = false	Size = 2	Stack top -> [rhyme,Algol] <- bottom
2832:	Empty = false	Size = 3	Stack top -> [freer,rhyme,Algol] <- bottom
2833:	Empty = false	Size = 4	Stack top -> [plate,freer,rhyme,Algol] <- bottom
2834:	Empty = false	Size = 5	Stack top -> [Myrta,plate,freer,rhyme,Algol] <- bottom
2835:	Empty = false	Size = 6	Stack top -> [Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2836:	Empty = false	Size = 7	Stack top -> [Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2837:	Empty = false	Size = 8	Stack top -> [males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2838:	Empty = false	Size = 9	Stack top -> [tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2839:	Empty = false	Size = 10	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2840:	// Test clone method...
2841:	Clone stack: Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2842:	// Test equals method...
2843:	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
==
Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2844:	// Now change the copy
2845:	// Now check again
2846:	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
!=
Stack top -> [Whigs] <- bottom
2847:	// Re-clone the stack, and output
2848:	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2849:	// Text the pop method...
2850:	Clone stack:	Empty = false	Size = 10	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2851:	// Loop through removing values
2852:	Popped -> Luigi	Empty = false	Size = 9	Stack top -> [tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2853:	Popped -> tubed	Empty = false	Size = 8	Stack top -> [males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2854:	Popped -> males	Empty = false	Size = 7	Stack top -> [Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2855:	Popped -> Huron	Empty = false	Size = 6	Stack top -> [Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2856:	Popped -> Rahal	Empty = false	Size = 5	Stack top -> [Myrta,plate,freer,rhyme,Algol] <- bottom
2857:	Popped -> Myrta	Empty = false	Size = 4	Stack top -> [plate,freer,rhyme,Algol] <- bottom
2858:	Popped -> plate	Empty = false	Size = 3	Stack top -> [freer,rhyme,Algol] <- bottom
2859:	Popped -> freer	Empty = false	Size = 2	Stack top -> [rhyme,Algol] <- bottom
2860:	Popped -> rhyme	Empty = false	Size = 1	Stack top -> [Algol] <- bottom
2861:	Popped -> Algol	Empty = true	Size = 0	Empty Stack
2862:	Popped -> null	Empty = true	Size = 0	Empty Stack
2863:	// Test peek (top is wrapper no testing needed)...
2864:	Clone Top = null
2865:	Stack Top = Luigi
2866:	// Test to array and to linked list...
2867:	Linked List 	[Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol]
2868:	Array   	[Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol]
2869:	// Test our constructors...
2870:	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2871:	Stack top -> [Luigi,tubed,males,Huron,Rahal,Myrta,plate,freer,rhyme,Algol] <- bottom
2872:	// Test the Queue object...
2873:	// Test toString,size,isEmpty, and enqueue methods...
2874:	Empty = true	Size = 0	Empty Queue
2875:	// Loop through adding random values
2876:	Empty = false	Size = 1	Queue back -> [Maura] <- front
2877:	Empty = false	Size = 2	Queue back -> [Cathi,Maura] <- front
2878:	Empty = false	Size = 3	Queue back -> [appal,Cathi,Maura] <- front
2879:	Empty = false	Size = 4	Queue back -> [chary,appal,Cathi,Maura] <- front
2880:	Empty = false	Size = 5	Queue back -> [crest,chary,appal,Cathi,Maura] <- front
2881:	Empty = false	Size = 6	Queue back -> [gaper,crest,chary,appal,Cathi,Maura] <- front
2882:	Empty = false	Size = 7	Queue back -> [cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2883:	Empty = false	Size = 8	Queue back -> [ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2884:	Empty = false	Size = 9	Queue back -> [swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2885:	Empty = false	Size = 10	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2886:	// Test clone method...
2887:	Clone Queue 			Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2888:	// Test equals method...
2889:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
==
Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2890:	// Now change the duplicate
2891:	// Now check again
2892:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
==
Queue back -> [comma] <- front
2893:	// Re-clone the queue, and output
2894:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2895:	// Test the dequeue method...
2896:	Clone queue:	Empty = false	Size = 10	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2897:	// Loop through removing values
2898:	Dequeued -> Maura	Empty = false	Size = 9	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi] <- front
2899:	Dequeued -> Cathi	Empty = false	Size = 8	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal] <- front
2900:	Dequeued -> appal	Empty = false	Size = 7	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary] <- front
2901:	Dequeued -> chary	Empty = false	Size = 6	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest] <- front
2902:	Dequeued -> crest	Empty = false	Size = 5	Queue back -> [ingot,swine,ErvIn,cameo,gaper] <- front
2903:	Dequeued -> gaper	Empty = false	Size = 4	Queue back -> [ingot,swine,ErvIn,cameo] <- front
2904:	Dequeued -> cameo	Empty = false	Size = 3	Queue back -> [ingot,swine,ErvIn] <- front
2905:	Dequeued -> ErvIn	Empty = false	Size = 2	Queue back -> [ingot,swine] <- front
2906:	Dequeued -> swine	Empty = false	Size = 1	Queue back -> [ingot] <- front
2907:	Dequeued -> ingot	Empty = true	Size = 0	Empty Queue
2908:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
2909:	// Test front and back...
2910:	Clone Front = null
2911:	Queue Front = Maura
2912:	Clone Back  = null
2913:	Queue Back  = ingot
2914:	// Test to array and to linked list...
2915:	Linked List 	[ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura]
2916:	Array   	[ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura]
2917:	// Test our constructors...
2918:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2919:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2920:	// Constructors from stack to queue (and back)...
2921:	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front	 into 	Stack top -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- bottom
2922:	Stack top -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- bottom	 into 	Queue back -> [ingot,swine,ErvIn,cameo,gaper,crest,chary,appal,Cathi,Maura] <- front
2923:	Searching and Sorting Post Secondary Content:..............................................
2924:	// For the I.B. Exam, you only need to know:
2925:	// Search: linear search and binary search
2926:	// Sort: bubble sort and the selection sort
2927:	// Create some constants (edges) for the data
2928:	// Create some random data to search through and sort
2929:	// Including edge cases to test
2930:	// Create data to store the results...
2931:	// The simpliest of searches
2932:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2933:	// Now the linear search on all test data
2934:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2935:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2936:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2937:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2938:	Array [80,39,72,65,77,45,73,23,39,24,67,61,1,39,18,2,58,96,97,47,47,8,19,63,58,11,40,9,41,62,35,4,87,90,30,6,88,87,26,83,77,15,70,30,71,72,50,6,70,18,56,63,89,7,28,7,7,26,60,26,84,89,5,2,78,51,19,99,1 ... (line shortened) ...
2939:	// Simple sort...
2940:	Sorted Array: 	[1,2,2,3,4,4,5,6,6,7,7,7,8,9,11,11,12,15,18,18,19,19,23,24,26,26,26,27,28,30,30,33,35,36,37,38,39,39,39,40,41,42,43,45,47,47,50,51,55,56,56,58,58,58,60,61,62,63,63,65,65,66,67,67,67,69, ... (line shortened) ...
2941:	// We will re-scramble array for further testing
2942:	Sorted Array: 	[54,53,2,92,18,51,1,16,75,13,25,97,16,65,29,17,27,89,13,56,56,66,68,47,40,100,83,26,16,38,51,62,39,72,57,40,68,43,56,21,28,79,27,94,70,71,12,81,85,16,12,26,19,64,66,29,2,96,98,60,22,10, ... (line shortened) ...
2943:	// Now bubble sort (from bubbles rising from water)
2944:	Original Array 	[54,53,2,92,18,51,1,16,75,13,25,97,16,65,29,17,27,89,13,56,56,66,68,47,40,100,83,26,16,38,51,62,39,72,57,40,68,43,56,21,28,79,27,94,70,71,12,81,85,16,12,26,19,64,66,29,2,96,98,60,22,10 ... (line shortened) ...
2945:	// Now selection sort (from selecting the smallest)
2946:	Original Array 	[54,53,2,92,18,51,1,16,75,13,25,97,16,65,29,17,27,89,13,56,56,66,68,47,40,100,83,26,16,38,51,62,39,72,57,40,68,43,56,21,28,79,27,94,70,71,12,81,85,16,12,26,19,64,66,29,2,96,98,60,22,10 ... (line shortened) ...
2947:	// Now binary search (named after two or dividing)
2948:	// NOTE: binary search can only happen on sorted list
2949:	// Redo some of the test data...
2950:	Array [1,2,2,2,3,8,10,12,12,13,13,14,16,16,16,16,17,17,18,19,19,20,20,21,22,23,24,25,26,26,26,27,27,28,28,29,29,30,31,31,32,33,38,39,40,40,43,45,47,47,48,51,51,51,53,54,56,56,56,56,57,57,60,60,62,62,6 ... (line shortened) ...
2951:	Array [1,2,2,2,3,8,10,12,12,13,13,14,16,16,16,16,17,17,18,19,19,20,20,21,22,23,24,25,26,26,26,27,27,28,28,29,29,30,31,31,32,33,38,39,40,40,43,45,47,47,48,51,51,51,53,54,56,56,56,56,57,57,60,60,62,62,6 ... (line shortened) ...
2952:	Array [1,2,2,2,3,8,10,12,12,13,13,14,16,16,16,16,17,17,18,19,19,20,20,21,22,23,24,25,26,26,26,27,27,28,28,29,29,30,31,31,32,33,38,39,40,40,43,45,47,47,48,51,51,51,53,54,56,56,56,56,57,57,60,60,62,62,6 ... (line shortened) ...
2953:	Array [1,2,2,2,3,8,10,12,12,13,13,14,16,16,16,16,17,17,18,19,19,20,20,21,22,23,24,25,26,26,26,27,27,28,28,29,29,30,31,31,32,33,38,39,40,40,43,45,47,47,48,51,51,51,53,54,56,56,56,56,57,57,60,60,62,62,6 ... (line shortened) ...
2954:	Array [1,2,2,2,3,8,10,12,12,13,13,14,16,16,16,16,17,17,18,19,19,20,20,21,22,23,24,25,26,26,26,27,27,28,28,29,29,30,31,31,32,33,38,39,40,40,43,45,47,47,48,51,51,51,53,54,56,56,56,56,57,57,60,60,62,62,6 ... (line shortened) ...
2955:	// Use class for searching and sorting
2956:	// Create random linked list data
2957:	// Create random array data
2958:	// Place all test cases into another linked list
2959:	// Execute the linear search on all list test data...
2960:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
2961:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
2962:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
2963:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
2964:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
2965:	// Execute the linear search on all array test data...
2966:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
2967:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
2968:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
2969:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
2970:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
2971:	// Execute all the sorts on all test data...
2972:	// Bubble sort LinkedList data...
2973:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2974:	// Bubble sort array data...
2975:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2976:	// Selection sort LinkedList data...
2977:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2978:	// Selection sort array data...
2979:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2980:	// Shell sort LinkedList data...
2981:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2982:	// Shell sort array data...
2983:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2984:	// Insertion sort LinkedList data...
2985:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2986:	// Insertion sort array data...
2987:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2988:	// Quick sort LinkedList data...
2989:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2990:	// Quick sort array data...
2991:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2992:	// Merge sort LinkedList data...
2993:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2994:	// Merge sort array data...
2995:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
2996:	// Heap sort LinkedList data...
2997:	Before: 	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Le ... (line shortened) ...
2998:	// Heap sort array data...
2999:	Before: 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys, ... (line shortened) ...
3000:	// Execute the binary search on all List test data...
3001:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
3002:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
3003:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
3004:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
3005:	Linked List 	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,d ... (line shortened) ...
3006:	// Execute the binary search on all Array test data...
3007:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
3008:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
3009:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
3010:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
3011:	[Dela,mice,arms,lisp,socs,goto,skid,moth,mugs,imam,Tadd,arcs,bogs,Bork,Fred,ways,sill,emus,Robb,lace,yank,rice,hire,Perm,Nice,blow,viii,Loeb,Leif,Arty,Codi,Agna,RAMs,Blvd,hunt,Leon,acme,drys,lass,Mari ... (line shortened) ...
3012:	Binary Trees Post Secondary Content:.......................................................
3013:	// Constants/variables for creating random values...
3014:	// Creating some TreeNode objects...
3015:	// Linking the TreeNodes...
3016:	// Testing TreeNode equals...
3017:	// Testing TreeNode toString...
3018:	85
3019:	62
3020:	16
3021:	// Creating a Tree object...
3022:	// Test the insert method...
3023:	// Insert one more...
3024:	// Test the search of the tree...
3025:	Should be found     = true
3026:	Should NOT be found = false
3027:	// Test toString() and pre, post, in order traversals
3028:	Binary Tree:
Order: Linked List 	[67,18,56,92,65,77]
Pre:   Linked List 	[67,18,56,65,92,77]
Post:  Linked List 	[65,56,18,77,92,67]
In:    Linked List 	[18,56,65,67,77,92]
3029:	// Building second tree (test clone) and test equals
3030:	1st tree -> Linked List 	[18,56,65,67,77,92]
3031:	2nd tree -> Linked List 	[13,74,76,79,96,97]
3032:	1st!=2nd
3033:	// Building a third tree (test clone) and test equals
3034:	1st tree -> Linked List 	[18,56,65,67,77,92]
3035:	3rd tree -> Linked List 	[18,56,65,67,77,92]
3036:	1st==3rd
3037:	// Build all our data structures from each other...
3038:	// Create variable objects...
3039:	// Create array from variables...
3040:	// Create LinkedList from array...
3041:	// Create Stack from LinkedList...
3042:	// Create Queue from Stack...
3043:	// Create Tree from Queue...
3044:	// Output variables,array,list,stack,queue,tree...
3045:	blane
3046:	coyer
3047:	haily
3048:	bloom
3049:	satan
3050:	[blane,coyer,haily,bloom,satan]
3051:	Linked List 	[blane,coyer,haily,bloom,satan]
3052:	Stack top -> [blane,coyer,haily,bloom,satan] <- bottom
3053:	Queue back -> [blane,coyer,haily,bloom,satan] <- front
3054:	Binary Tree:
Order: Linked List 	[blane,coyer,haily,bloom,satan]
Pre:   Linked List 	[blane,coyer,bloom,haily,satan]
Post:  Linked List 	[bloom,satan,haily,coyer,blane]
In:    Linked List 	[blane,bloo ... (line shortened) ...
3055:	// Now re-building queue from tree
3056:	// Now re-building stack from queue
3057:	// Now re-building LinkedList from stack...
3058:	// Now re-building array from LinkedList...
3059:	// Output array,list,stack,queue,tree again...
3060:	[blane,bloom,coyer,haily,satan]
3061:	Linked List 	[blane,bloom,coyer,haily,satan]
3062:	Stack top -> [blane,bloom,coyer,haily,satan] <- bottom
3063:	Queue back -> [blane,bloom,coyer,haily,satan] <- front
3064:	Binary Tree:
Order: Linked List 	[blane,coyer,haily,bloom,satan]
Pre:   Linked List 	[blane,coyer,bloom,haily,satan]
Post:  Linked List 	[bloom,satan,haily,coyer,blane]
In:    Linked List 	[blane,bloo ... (line shortened) ...
